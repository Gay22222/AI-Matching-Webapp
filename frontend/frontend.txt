# ==================================================
# Path: D:\Final\frontend
# Detected tech: docker, javascript, python, react, typescript
# ==================================================

## DIRECTORY STRUCTURE
```
frontend/
├── .next/
├── .vscode/
├── node_modules/
├── public/
│   ├── default-avatar.jpg
│   ├── file.svg
│   ├── globe.svg
│   ├── next.svg
│   ├── vercel.svg
│   └── window.svg
├── src/
│   ├── app/
│   │   ├── (main)/
│   │   │   ├── discover/
│   │   │   │   └── page.js
│   │   │   ├── matches/
│   │   │   │   └── page.js
│   │   │   ├── message/
│   │   │   │   └── [matchId]/
│   │   │   │       └── page.js
│   │   │   ├── notifications/
│   │   │   │   └── page.js
│   │   │   ├── profile/
│   │   │   │   └── page.js
│   │   │   ├── settings/
│   │   │   │   └── page.js
│   │   │   ├── layout.js
│   │   │   └── page.js
│   │   ├── auth/
│   │   │   ├── login/
│   │   │   │   └── page.js
│   │   │   ├── otp/
│   │   │   │   └── OTPVerification.jsx
│   │   │   ├── register/
│   │   │   │   └── page.js
│   │   │   ├── _helpers.js
│   │   │   └── layout.js
│   │   ├── components/
│   │   │   ├── BottomNavigation.jsx
│   │   │   ├── MatchModal.jsx
│   │   │   ├── SwipeCard.jsx
│   │   │   └── UserDropdown.jsx
│   │   ├── dashboard/
│   │   │   └── page.js
│   │   ├── profile/
│   │   ├── profile-setup/
│   │   │   ├── components/
│   │   │   │   ├── BasicInfo.js
│   │   │   │   ├── BioInterests.js
│   │   │   │   ├── Location.js
│   │   │   │   ├── PhotoUpload.js
│   │   │   │   ├── Preferences.js
│   │   │   │   ├── ProfileSetup.js
│   │   │   │   └── Steps.js
│   │   │   └── page.js
│   │   ├── report/
│   │   │   └── page.js
│   │   ├── defaultVercel.ico
│   │   ├── favicon.ico
│   │   ├── globals.css
│   │   └── layout.js
│   ├── components/
│   │   ├── cards/
│   │   │   ├── ProfileCard.js
│   │   │   └── ProfileDetail.js
│   │   ├── layout/
│   │   │   └── AppLayout.js
│   │   ├── ChatWindow.jsx
│   │   └── Loading.jsx
│   ├── context/
│   │   └── ProfileContext.js
│   ├── hooks/
│   │   ├── _helper.js
│   │   ├── useAuth.js
│   │   ├── useMetadata.js
│   │   ├── useRecommendations.js
│   │   └── useSocket.js
│   ├── lib/
│   ├── redux/
│   │   ├── feature/
│   │   │   └── authSlice.js
│   │   └── store.js
│   ├── ui/
│   │   ├── FilterModal.js
│   │   ├── Footer.js
│   │   ├── Header.js
│   │   ├── MatchModal.js
│   │   └── NotificationDropdown.js
│   └── utils/
│       ├── ImageUtils.js
│       ├── LocalStorage.js
│       └── Time.js
├── .dockerignore
├── .gitignore
├── Dockerfile
├── README.md
├── docker-compose.yml
├── eslint.config.mjs
├── jsconfig.json
├── next.config.mjs
├── package.json
├── pnpm-lock.yaml
├── postcss.config.mjs
├── requirements.txt
└── tailwind.config.js
```

## FILE CONTENTS

### eslint.config.mjs
```mjs
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [...compat.extends("next/core-web-vitals")];

export default eslintConfig;

```

### next.config.mjs
```mjs
/** @type {import('next').NextConfig} */
const nextConfig = {
    reactStrictMode: true,
    experimental: {
        //appDir: true,
    },
    images: {
        remotePatterns: [
            {
                protocol: 'http',
                hostname: 'localhost',
                port: '3001',
                pathname: '/uploads/**',
            },
        ],
    },
    async rewrites() {
        return [
            {
                source: "/api/:path*",
                destination: "http://localhost:3001/api/:path*",
            },
            {
                source: "/uploads/:path*",
                destination: "http://localhost:3001/uploads/:path*",
            },
        ];
    },
};

export default nextConfig;
```

### postcss.config.mjs
```mjs
const config = {
  plugins: ["@tailwindcss/postcss"],
};

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

export default config;

```

### tailwind.config.js
```js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}; 
```

### src\app\layout.js
```js
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AuthProvider } from "@/hooks/useAuth"; // Thêm import
import { ProfileProvider } from "@/context/ProfileContext"; // Thêm import

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

export const metadata = {
    title: "DateViet",
    description: "Generated by create next app",
};

export default function RootLayout({ children }) {
    return (
        <html lang="en">
            <body className={`${geistSans.variable} ${geistMono.variable}`}>
                <AuthProvider>
                    <ProfileProvider>
                        {children}
                    </ProfileProvider>
                </AuthProvider>
            </body>
        </html>
    );
}
```

### src\app\(main)\layout.js
```js
import AppLayout from "@/components/layout/AppLayout";
import { AuthProvider } from "@/hooks/useAuth";
import { MetadataProvider } from "@/hooks/useMetadata";
import { ProfileProvider } from "@/context/ProfileContext"; // Thêm import
import { Toaster } from "react-hot-toast";
import { SocketProvider } from "@/hooks/useSocket";

import { setupAxios } from "@/app/auth/_helpers";
import axios from "axios";
setupAxios(axios);

export default function MainLayout({ children }) {
    return (
        <AuthProvider>
            <SocketProvider>
                <MetadataProvider>
                    <ProfileProvider>
                        <AppLayout>{children}</AppLayout>
                        <Toaster position="top-right" reverseOrder={false} />
                    </ProfileProvider>
                </MetadataProvider>
            </SocketProvider>
        </AuthProvider>
    );
}
```

### src\app\(main)\page.js
```js
"use client";

import React, { useCallback, useEffect, useState } from "react";
import MatchModal from "@/ui/MatchModal";
import ProfileCard from "@/components/cards/ProfileCard";
import ProfileDetail from "@/components/cards/ProfileDetail";
import { SlidersIcon, SparklesIcon } from "lucide-react";
import FilterModal from "@/ui/FilterModal";
import axios from "axios";
import { useMetadata } from "@/hooks/useMetadata";
import { useRouter, useSearchParams } from "next/navigation";
import { useAuth } from "@/hooks/useAuth";
import { showToast } from "@/lib/toast";
import { useSocket } from "@/hooks/useSocket";

const Home = () => {
  const { auth, currentUser } = useAuth();
  const socket = useSocket();
  const router = useRouter();
  const searchParams = useSearchParams();
  const { metadata } = useMetadata();
  const [profiles, setProfiles] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [selectedProfile, setSelectedProfile] = useState(null);
  const [showMatch, setShowMatch] = useState(false);
  const [matchedProfile, setMatchedProfile] = useState({});
  const [showFilters, setShowFilters] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Hàm chuẩn hóa URL ảnh
  const normalizePhotoUrl = (url) => {
    if (!url) {
      console.warn("Photo URL is empty, using default avatar");
      return "/default-avatar.jpg";
    }
    if (url.startsWith("http")) {
      return url;
    }
    let cleanUrl = url.replace(/^\/*uploads\/*/i, "");
    cleanUrl = cleanUrl.startsWith("/") ? cleanUrl : `/${cleanUrl}`;
    const finalUrl = `http://localhost:3001/uploads${cleanUrl.toLowerCase()}`;
    console.debug(`Normalized photo URL: ${finalUrl}`);
    return finalUrl;
  };

  // Danh sách các trường yêu cầu mảng
  const arrayFields = [
    "languageIds",
    "favoriteIds",
    "characterIds",
    "communicateStyleIds",
    "loveLanguageIds",
    "petIds",
    "zodiacIds",
    "educationIds",
    "dietIds",
    "sleepIds",
    "snuIds",
    "futureFamilyIds",
    "sexualOrientationIds",
    "searchingForIds",
  ];

  // Khởi tạo bộ lọc từ searchParams
  const initialFilters = {};
  for (const [key, value] of searchParams.entries()) {
    if (arrayFields.includes(key)) {
      initialFilters[key] = value.split(",").map(Number).filter((v) => !isNaN(v));
    } else {
      initialFilters[key] = value;
    }
  }
  const [filters, setFilters] = useState(initialFilters);

  // Hàm lấy danh sách profile
  const fetchProfileSetupData = useCallback(async () => {
    if (!auth?.access_token) {
      console.warn("No access token available, redirecting to login");
      router.push("/auth/login");
      return;
    }

    try {
      setLoading(true);
      setError(null);
      const params = new URLSearchParams();
      Object.entries(filters).forEach(([key, value]) => {
        if (arrayFields.includes(key) && Array.isArray(value) && value.length > 0) {
          params.append(key, value.join(","));
        } else if (value !== null && value !== undefined && value !== "") {
          params.append(key, value.toString().trim());
        }
      });
      if (currentUser?.id) {
        params.append("currentUserId", currentUser.id);
      }
      params.append("limit", "100");
      const queryString = params.toString();
      const url = queryString
        ? `http://localhost:3001/api/user/list-match?${queryString}`
        : `http://localhost:3001/api/user/list-match`;

      console.log("Fetching profiles with URL:", url);
      console.log("Auth token:", auth.access_token);
      console.log("Filters:", filters);

      const response = await axios.get(url, {
        headers: {
          Authorization: `Bearer ${auth.access_token}`,
        },
      });

      console.log("Response data:", JSON.stringify(response.data, null, 2));
      const users = Array.isArray(response.data.users)
        ? response.data.users.map((user) => ({
            ...user,
            distance: user.location || "N/A",
            tags: user.favorites?.map((favId) => {
              const fav = metadata?.favorites?.find((f) => f.id === favId);
              return fav?.value || "";
            }).filter(Boolean) || [],
            photos: Array.isArray(user.photos)
              ? user.photos.map((photo) => ({
                  ...photo,
                  url: normalizePhotoUrl(photo.url),
                }))
              : [],
          }))
        : [];
      console.log("Profiles:", JSON.stringify(users, null, 2));
      setProfiles(users);
      setCurrentIndex(0);
      if (users.length === 0) {
        setError("Không tìm thấy người dùng phù hợp với bộ lọc hiện tại.");
      }
    } catch (error) {
      console.error("Error fetching profiles:", {
        message: error.message,
        response: error.response ? {
          data: error.response.data,
          status: error.response.status,
          headers: error.response.headers,
        } : null,
        status: error.response?.status,
        stack: error.stack,
      });
      let errorMessage = error.response?.data?.message || "Không thể tải danh sách người dùng";
      if (error.response?.status === 400) {
        errorMessage = error.response.data.message || "Dữ liệu bộ lọc không hợp lệ. Vui lòng kiểm tra lại bộ lọc.";
      } else if (error.response?.status === 404) {
        errorMessage = "API không tồn tại. Vui lòng kiểm tra backend hoặc liên hệ hỗ trợ.";
      } else if (error.response?.status === 401) {
        console.warn("Unauthorized, redirecting to login");
        router.push("/auth/login");
        return;
      } else if (error.response?.status === 500) {
        errorMessage = "Lỗi server. Vui lòng thử lại sau hoặc liên hệ hỗ trợ.";
      } else if (!error.response) {
        errorMessage = "Không thể kết nối đến server. Vui lòng kiểm tra kết nối mạng.";
      }
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  }, [auth?.access_token, filters, currentUser?.id, router, metadata]);

  useEffect(() => {
    fetchProfileSetupData();
  }, [fetchProfileSetupData]);

  useEffect(() => {
    if (!socket) return;
    socket.on("new-match", (profile) => {
      setMatchedProfile(profile);
      setShowMatch(true);
    });
    return () => socket.off("new-match");
  }, [socket]);

  const handleApplyFilters = useCallback(
    (newFilters = filters) => {
      const validatedFilters = {};
      Object.entries(newFilters).forEach(([key, value]) => {
        if (arrayFields.includes(key)) {
          validatedFilters[key] = Array.isArray(value) ? value : [value].filter((v) => v !== "");
        } else {
          validatedFilters[key] = value;
        }
      });
      const params = new URLSearchParams();
      Object.entries(validatedFilters).forEach(([key, value]) => {
        if (arrayFields.includes(key) && Array.isArray(value) && value.length > 0) {
          params.append(key, value.join(","));
        } else if (value !== null && value !== undefined && value !== "") {
          params.append(key, value.toString());
        }
      });
      const queryString = params.toString();
      const newUrl = queryString ? `/?${queryString}` : "/";

      console.log("Updating URL to:", newUrl);
      console.log("Validated filters:", validatedFilters);
      router.push(newUrl, { scroll: false });
      setFilters(validatedFilters);
      setShowFilters(false);
    },
    [router]
  );

  const handleNext = useCallback(() => {
    console.log("handleNext called, currentIndex:", currentIndex, "profiles.length:", profiles.length);
    setCurrentIndex((prev) => prev + 1);
  }, [currentIndex, profiles.length]);

  const handleMatch = async (userId, callback) => {
    try {
      const response = await axios.post(
        "http://localhost:3001/api/match",
        {
          receiverId: userId,
        },
        {
          headers: {
            Authorization: `Bearer ${auth?.access_token}`,
          },
        }
      );

      setTimeout(() => {
        showToast.success("Đã thích!");
        callback && callback();
        // Làm mới danh sách profile để loại bỏ user vừa like
        fetchProfileSetupData();
      }, 1000);
    } catch (error) {
      console.error("Error matching:", {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
      });
      setTimeout(() => {
        callback && callback();
        showToast.error(error.response?.data?.message || "Lỗi khi thích");
        handleNext();
      }, 500);
    }
  };

  const handleCloseMatch = () => {
    setShowMatch(false);
  };

  const handleAIMatch = () => {
    console.log("Navigating to /discover");
    router.push("/discover");
  };

  const handlePremium = () => {
    console.log("Navigating to premium page");
    router.push("/premium");
  };

  const handleSelectProfile = (profile) => {
    console.log("Selected profile:", profile.id);
    setSelectedProfile(profile);
  };

  const handleBack = () => {
    console.log("Back to profile list");
    setSelectedProfile(null);
  };

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center h-screen">
        <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-[#FF5864]"></div>
        <p className="mt-4 text-gray-600">Đang tải danh sách người dùng...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center h-screen space-y-6">
        <h2 className="text-2xl font-bold text-gray-800">Lỗi tải dữ liệu</h2>
        <p className="text-gray-600">{error}</p>
        <button
          onClick={() => {
            setError(null);
            setFilters({});
            handleApplyFilters({});
          }}
          className="bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white px-6 py-3 rounded-xl font-medium hover:shadow-lg transition-all duration-300"
        >
          Thử lại
        </button>
      </div>
    );
  }

  if (!profiles || profiles.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-screen space-y-6">
        <h2 className="text-2xl font-bold text-gray-800">Không tìm thấy người dùng phù hợp</h2>
        <p className="text-gray-600">Hãy thử mở rộng bộ lọc hoặc thử ghép cặp AI!</p>
        <button
          onClick={handleAIMatch}
          className="bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white px-6 py-3 rounded-xl font-medium hover:shadow-lg transition-all duration-300"
        >
          Ghép cặp cùng AI
        </button>
        <button
          onClick={() => {
            setFilters({});
            handleApplyFilters({});
          }}
          className="bg-gray-200 text-gray-700 px-6 py-3 rounded-xl font-medium hover:bg-gray-300 transition-all duration-300"
        >
          Xóa bộ lọc
        </button>
      </div>
    );
  }

  if (currentIndex >= profiles.length) {
    return (
      <div className="flex flex-col items-center justify-center h-screen space-y-6">
        <h2 className="text-2xl font-bold text-gray-800">Đã hết người trong hôm nay</h2>
        <p className="text-gray-600">Quay lại vào ngày mai hoặc nâng cấp Premium để xem thêm!</p>
        <button
          onClick={handlePremium}
          className="bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white px-6 py-3 rounded-xl font-medium hover:shadow-lg transition-all duration-300"
        >
          Nâng cấp Premium
        </button>
        <button
          onClick={() => {
            setCurrentIndex(0);
            setFilters({});
            handleApplyFilters({});
          }}
          className="bg-gray-200 text-gray-700 px-6 py-3 rounded-xl font-medium hover:bg-gray-300 transition-all duration-300"
        >
          Xem lại từ đầu
        </button>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center justify-between min-h-screen p-4 w-full max-w-md mx-auto">
      <button
        onClick={handleAIMatch}
        className="flex items-center gap-2 px-4 py-2 mb-4 text-white bg-gradient-to-r from-[#FF5864] to-[#FF655B] rounded-xl hover:shadow-md transition-all duration-300"
      >
        <SparklesIcon className="w-5 h-5" />
        Ghép cặp cùng AI
      </button>
      <button
        onClick={() => setShowFilters(true)}
        className="flex items-center gap-2 px-4 py-2 text-gray-700 transition-all duration-300 bg-white border border-gray-200 rounded-xl hover:bg-gray-50 hover:shadow-md active:scale-95"
      >
        <SlidersIcon className="w-5 h-5" />
        Bộ lọc
        {Object.keys(filters).length > 0 && (
          <span className="bg-[#FF5864] text-white text-xs rounded-full px-2 py-1">{Object.keys(filters).length}</span>
        )}
      </button>
      <div className="w-full max-w-sm">
        {selectedProfile ? (
          <ProfileDetail profile={selectedProfile} onBack={handleBack} />
        ) : (
          profiles.length > 0 && currentIndex < profiles.length && (
            <ProfileCard
              profile={profiles[currentIndex]}
              onHandleMatch={handleMatch}
              onHandleNext={handleNext}
              onSelectProfile={handleSelectProfile}
            />
          )
        )}
      </div>
      {showMatch && matchedProfile && (
        <MatchModal me={currentUser} profile={matchedProfile} onClose={handleCloseMatch} />
      )}
      <FilterModal
        metadata={metadata}
        filtersData={filters}
        isOpen={showFilters}
        onClose={() => setShowFilters(false)}
        onHandleFilter={(filters) => {
          setFilters({ ...filters });
          handleApplyFilters(filters);
        }}
      />
    </div>
  );
};

export default Home;
```

### src\app\(main)\discover\page.js
```js
"use client";

import React, { useCallback, useEffect, useState } from "react";
import { useAuth } from "@/hooks/useAuth";
import axios from "axios";
import { setupAxios } from "@/app/auth/_helpers";
import { useRouter, useSearchParams } from "next/navigation";
import { SparklesIcon, SlidersIcon } from "lucide-react";
import ProfileCard from "@/components/cards/ProfileCard";
import ProfileDetail from "@/components/cards/ProfileDetail";
import MatchModal from "@/ui/MatchModal";
import FilterModal from "@/ui/FilterModal";
import { useMetadata } from "@/hooks/useMetadata";
import { showToast } from "@/lib/toast";
import { useSocket } from "@/hooks/useSocket";

setupAxios(axios);

const DiscoverPage = () => {
    const { auth, currentUser } = useAuth();
    const socket = useSocket();
    const router = useRouter();
    const searchParams = useSearchParams();
    const metadata = useMetadata();
    const [recommendations, setRecommendations] = useState([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [selectedProfile, setSelectedProfile] = useState(null);
    const [showMatch, setShowMatch] = useState(false);
    const [matchedProfile, setMatchedProfile] = useState({});
    const [showFilters, setShowFilters] = useState(false);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const initialFilters = {};
    for (const [key, value] of searchParams.entries()) {
        initialFilters[key] = value;
    }
    const [filters, setFilters] = useState(initialFilters);

    useEffect(() => {
        if (!auth?.access_token) {
            console.error("No access token available, redirecting to login");
            router.push("/auth/login");
            return;
        }

        const fetchRecommendations = async () => {
            try {
                setLoading(true);
                setError(null);
                const params = new URLSearchParams();
                Object.entries(filters).forEach(([key, value]) => {
                    if (value !== null && value !== undefined && value !== "") {
                        params.append(key, value.trim());
                    }
                });
                const queryString = params.toString();
                const url = queryString
                    ? `http://localhost:3001/api/ai/recommendations?${queryString}`
                    : `http://localhost:3001/api/ai/recommendations`;

                console.log("Fetching recommendations with URL:", url);
                console.log("Auth token:", auth.access_token);
                console.log("Filters:", filters);

                const response = await axios.get(url, {
                    headers: {
                        Authorization: `Bearer ${auth.access_token}`,
                    },
                });

                console.log("Response data:", JSON.stringify(response.data, null, 2));
                const recs = Array.isArray(response.data.data) ? response.data.data.slice(0, 20) : [];
                setRecommendations(recs.map(rec => ({
                    id: rec.recommendedUserId,
                    displayName: rec.recommendedUser?.display_name || "N/A",
                    name: rec.recommendedUser?.Bio?.name || "N/A",
                    age: rec.recommendedUser?.Bio?.age || "N/A",
                    aboutMe: rec.recommendedUser?.Bio?.about_me || "",
                    photos: rec.recommendedUser?.Bio?.Photo || [],
                    location: rec.recommendedUser?.Bio?.main_inf?.location || "N/A",
                    distance: rec.recommendedUser?.Bio?.main_inf?.location || "N/A",
                    tags: rec.recommendedUser?.user_favorites?.map(f => f.favorite?.name).filter(Boolean) || [],
                })));
                setCurrentIndex(0);
                if (recs.length === 0) {
                    setError("Không tìm thấy gợi ý phù hợp với bộ lọc hiện tại.");
                }
            } catch (err) {
                console.error("Error fetching recommendations:", {
                    message: err.message,
                    response: JSON.stringify(err.response?.data, null, 2),
                    status: err.response?.status,
                });
                let errorMessage = err.response?.data?.message || "Không thể tải danh sách gợi ý";
                if (err.response?.status === 404) {
                    errorMessage = "API không tồn tại. Vui lòng kiểm tra backend.";
                } else if (err.response?.status === 401) {
                    console.warn("Unauthorized, redirecting to login");
                    router.push("/auth/login");
                    return;
                } else if (err.response?.status === 500) {
                    errorMessage = "Lỗi server. Vui lòng thử lại sau.";
                } else if (!err.response) {
                    errorMessage = "Không thể kết nối đến server. Vui lòng kiểm tra mạng.";
                }
                setError(errorMessage);
            } finally {
                setLoading(false);
            }
        };

        fetchRecommendations();
    }, [auth?.access_token, filters, router]);

    useEffect(() => {
        if (!socket) return;
        socket.on("new-match", (profile) => {
            setMatchedProfile(profile);
            setShowMatch(true);
        });
        return () => socket.off("new-match");
    }, [socket]);

    const handleApplyFilters = useCallback(
        (newFilters = filters) => {
            const params = new URLSearchParams();
            Object.entries(newFilters).forEach(([key, value]) => {
                if (value !== null && value !== undefined && value !== "") {
                    params.append(key, value);
                }
            });
            const queryString = params.toString();
            const newUrl = queryString ? `/discover?${queryString}` : "/discover";

            console.log("Updating URL to:", newUrl);
            router.push(newUrl, { scroll: false });
            setFilters(newFilters);
            setShowFilters(false);
        },
        [router]
    );

    const handleNext = useCallback(() => {
        console.log("handleNext called, currentIndex:", currentIndex, "recommendations.length:", recommendations.length);
        setCurrentIndex((prev) => prev + 1);
    }, [currentIndex, recommendations.length]);

    const handleMatch = async (userId, callback) => {
        try {
            const response = await axios.post(
                "http://localhost:3001/api/match",
                {
                    receiverId: userId,
                },
                {
                    headers: {
                        Authorization: `Bearer ${auth?.access_token}`,
                    },
                }
            );

            setTimeout(() => {
                showToast.success("Đã thích!");
                callback && callback();
                handleNext();
            }, 1000);
        } catch (error) {
            console.error("Error matching:", {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status,
            });
            setTimeout(() => {
                callback && callback();
                showToast.error(error.response?.data?.message || "Lỗi khi thích");
                handleNext();
            }, 500);
        }
    };

    const handleCloseMatch = () => {
        setShowMatch(false);
    };

    const handleAIMatch = () => {
        console.log("Refreshing /discover");
        router.push("/discover");
    };

    const handlePremium = () => {
        console.log("Navigating to premium page");
        router.push("/premium");
    };

    const handleSelectProfile = async (profile) => {
        console.log("Selected profile:", profile.id);
        try {
            const response = await axios.get(`http://localhost:3001/api/user/${profile.id}`, {
                headers: {
                    Authorization: `Bearer ${auth?.access_token}`,
                },
            });
            console.log("Profile detail response:", JSON.stringify(response.data, null, 2));
            setSelectedProfile(response.data.user);
        } catch (err) {
            console.error("Error fetching profile detail:", {
                message: err.message,
                response: err.response?.data,
                status: err.response?.status,
            });
            showToast.error("Không thể tải thông tin chi tiết người dùng");
        }
    };

    const handleBack = () => {
        console.log("Back to recommendation list");
        setSelectedProfile(null);
    };

    if (loading) {
        return (
            <div className="flex flex-col items-center justify-center w-full h-screen gap-4">
                <div className="w-16 h-16 border-4 border-t-transparent border-[#FF5864] rounded-full animate-spin"></div>
                <p className="text-lg font-medium text-gray-700">Đang tải danh sách gợi ý...</p>
            </div>
        );
    }

    if (error) {
        return (
            <div className="flex flex-col items-center justify-center w-full h-screen gap-6 px-4">
                <h2 className="text-2xl font-bold text-gray-800">Lỗi tải dữ liệu</h2>
                <p className="text-lg text-gray-600">{error}</p>
                <button
                    onClick={() => {
                        setError(null);
                        setFilters({});
                        handleApplyFilters({});
                    }}
                    className="bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white px-6 py-3 rounded-xl font-medium hover:shadow-lg transition-all duration-300"
                >
                    Thử lại
                </button>
            </div>
        );
    }

    if (!recommendations || recommendations.length === 0) {
        return (
            <div className="flex flex-col items-center justify-center w-full h-screen gap-6 px-4">
                <h2 className="text-2xl font-bold text-gray-800">Không tìm thấy gợi ý phù hợp</h2>
                <p className="text-lg text-gray-600">Hãy thử mở rộng bộ lọc hoặc làm mới gợi ý AI!</p>
                <button
                    onClick={handleAIMatch}
                    className="bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white px-6 py-3 rounded-xl font-medium hover:shadow-lg transition-all duration-300"
                >
                    Làm mới gợi ý AI
                </button>
                <button
                    onClick={() => {
                        setFilters({});
                        handleApplyFilters({});
                    }}
                    className="bg-gray-200 text-gray-700 px-6 py-3 rounded-xl font-medium hover:bg-gray-300 transition-all duration-300"
                >
                    Xóa bộ lọc
                </button>
            </div>
        );
    }

    if (currentIndex >= recommendations.length) {
        return (
            <div className="flex flex-col items-center justify-center w-full h-screen gap-6 px-4">
                <h2 className="text-2xl font-bold text-gray-800">Đã hết người trong hôm nay</h2>
                <p className="text-lg text-gray-600">Quay lại vào ngày mai hoặc nâng cấp Premium để xem thêm!</p>
                <button
                    onClick={handlePremium}
                    className="bg-gradient-to-r from-[#FFD700] to-[#FFA500] text-white px-6 py-3 rounded-xl font-medium hover:shadow-lg transition-all duration-300"
                >
                    Nâng cấp Premium
                </button>
                <button
                    onClick={() => {
                        setCurrentIndex(0);
                        setFilters({});
                        handleApplyFilters({});
                    }}
                    className="bg-gray-200 text-gray-700 px-6 py-3 rounded-xl font-medium hover:bg-gray-300 transition-all duration-300"
                >
                    Xem lại từ đầu
                </button>
            </div>
        );
    }

    return (
        <div className="relative flex flex-col items-center justify-center w-full min-h-screen gap-6 px-4">
            <button
                onClick={handleAIMatch}
                className="flex items-center gap-2 px-4 py-2 text-white transition-all duration-300 bg-gradient-to-r from-[#FF5864] to-[#FF655B] rounded-xl hover:shadow-md active:scale-95"
            >
                <SparklesIcon className="w-5 h-5" />
                Làm mới gợi ý AI
            </button>
            <button
                onClick={() => setShowFilters(true)}
                className="flex items-center gap-2 px-4 py-2 text-gray-700 transition-all duration-300 bg-white border border-gray-200 rounded-xl hover:bg-gray-50 hover:shadow-md active:scale-95"
            >
                <SlidersIcon className="w-5 h-5" />
                Bộ lọc
                {Object.keys(filters).length > 0 && (
                    <span className="flex items-center justify-center w-5 h-5 text-xs text-white bg-red-500 rounded-full">
                        {Object.keys(filters).length}
                    </span>
                )}
            </button>
            {selectedProfile ? (
                <ProfileDetail
                    profile={selectedProfile}
                    onBack={handleBack}
                />
            ) : (
                recommendations.length > 0 && currentIndex < recommendations.length && (
                    <ProfileCard
                        profile={recommendations[currentIndex]}
                        onHandleMatch={handleMatch}
                        onHandleNext={handleNext}
                        onSelectProfile={handleSelectProfile}
                    />
                )
            )}
            {showMatch && matchedProfile && (
                <MatchModal me={currentUser} profile={matchedProfile} onClose={handleCloseMatch} />
            )}
            <FilterModal
                metadata={metadata.metadata}
                filtersData={filters}
                isOpen={showFilters}
                onClose={() => setShowFilters(false)}
                onHandleFilter={(filters) => {
                    setFilters({ ...filters });
                    handleApplyFilters(filters);
                }}
            />
        </div>
    );
};

export default DiscoverPage;
```

### src\app\(main)\matches\page.js
```js
"use client";

import React, { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/hooks/useAuth";
import Loading from "@/components/Loading";

const Matches = () => {
  const router = useRouter();
  const [matches, setMatches] = useState([]);
  const [error, setError] = useState(null);
  const { auth, currentUser } = useAuth();
  const [isLoading, setIsLoading] = useState(true);

  // Hàm chuẩn hóa URL ảnh
  const normalizePhotoUrl = (photo) => {
    if (!photo) {
      console.warn("Photo URL is missing", { photo });
      return "/default-avatar.jpg";
    }
    return photo.startsWith("http") ? photo : `http://localhost:3001${photo.toLowerCase()}`;
  };

  useEffect(() => {
    const fetchMatches = async () => {
      setIsLoading(true);
      setError(null);
      try {
        console.log("Auth data:", JSON.stringify(auth, null, 2));
        console.log("Current user:", currentUser?.id);
        if (!auth?.access_token) {
          throw new Error("No access token available");
        }
        const response = await fetch("http://localhost:3001/api/match", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${auth.access_token}`,
          },
        });
        if (!response.ok) {
          const errorData = await response.json();
          console.error("Network response was not ok:", {
            status: response.status,
            message: errorData.message,
          });
          throw new Error(errorData.message || `HTTP error: ${response.status}`);
        }
        const data = await response.json();
        console.log("Matches data from API:", JSON.stringify(data?.data, null, 2));
        setMatches(data?.data || []);
      } catch (error) {
        console.error("Error fetching matches:", error);
        setError(error.message);
        if (error.message.includes("token") || error.message.includes("401")) {
          router.push("/auth/login");
        }
      } finally {
        setIsLoading(false);
      }
    };
    fetchMatches();
  }, [router]);

  useEffect(() => {
    console.log("Current matches state:", JSON.stringify(matches, null, 2));
  }, [matches]);

  const handleMatchClick = (matchId) => {
    router.push(`/message/${matchId}`);
  };

  return (
    <div className="w-full max-w-md py-4 mx-auto">
      {isLoading ? (
        <Loading />
      ) : error ? (
        <div className="p-4 text-center text-red-500">
          Lỗi: {error}
          <button
            onClick={() => window.location.reload()}
            className="mt-2 px-4 py-2 bg-[#FF5864] text-white rounded-lg"
          >
            Thử lại
          </button>
        </div>
      ) : (
        <div className="bg-white rounded-lg shadow-sm max-h-[70vh] min-h-[60vh] overflow-auto">
          <div className="p-4 border-b border-gray-100">
            <h1 className="text-xl font-bold text-gray-800">Kết nối mới</h1>
          </div>
          <div className="divide-y divide-gray-100">
            {matches?.length > 0 ? (
              matches.map((match) => (
                <button
                  key={match.id}
                  onClick={() => handleMatchClick(match.id)}
                  className="flex items-center w-full p-4 transition-colors duration-300 hover:bg-gray-50"
                >
                  <div className="relative">
                    <img
                      src={normalizePhotoUrl(match?.photo)}
                      alt={match.name || "User"}
                      className="object-cover w-16 h-16 transition-transform duration-300 rounded-full hover:scale-105"
                      crossOrigin="anonymous"
                      onError={(e) => {
                        console.error(`Failed to load image: ${e.target.src}, error: ${e.type}, status: ${e.target.status || 'unknown'}`);
                        e.target.src = "/default-avatar.jpg";
                      }}
                    />
                    {match.unread && (
                      <div className="absolute -top-1 -right-1 w-4 h-4 bg-[#FF5864] rounded-full border-2 border-white animate-pulse"></div>
                    )}
                  </div>
                  <div className="flex-grow ml-4 text-left">
                    <div className="flex justify-between">
                      <h2 className="font-medium text-gray-800">
                        {match.name || "Không có tên"}
                      </h2>
                      <span className="text-sm text-gray-500">{match.matchTime}</span>
                    </div>
                    <p className="text-sm text-gray-600">
                      {match.unread ? "Bạn có kết nối mới!" : "Đã kết nối"}
                    </p>
                  </div>
                </button>
              ))
            ) : (
              <div className="p-4 text-center text-gray-500">Không có kết nối nào</div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default Matches;
```

### src\app\(main)\message\[matchId]\page.js
```js
"use client";

import React, { useEffect, useState, useRef } from "react";
import { useRouter, useParams } from "next/navigation";
import { ArrowLeftIcon, SendIcon, SmileIcon } from "lucide-react";
import { useAuth } from "@/hooks/useAuth";
import Loading from "@/components/Loading";
import { showToast } from "@/lib/toast";
import { getRelativeTime } from "@/utils/Time";
import { useSocket } from "@/hooks/useSocket";

const icebreakers = [
  "Nếu có thể đi du lịch bất cứ đâu, bạn sẽ chọn nơi nào?",
  "Bộ phim yêu thích của bạn là gì?",
  "Bữa ăn ngon nhất bạn từng có là gì?",
  "Hoạt động cuối tuần lý tưởng của bạn là gì?",
];

const MessagePage = () => {
  const { auth, currentUser } = useAuth();
  const socket = useSocket();
  const params = useParams();
  const id = params.matchId;
  const router = useRouter();
  const [message, setMessage] = useState("");
  const [chat, setChat] = useState(null);
  const [showIcebreakers, setShowIcebreakers] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    if (!auth?.access_token) {
      console.warn("No access token, redirecting to login");
      showToast.error("Vui lòng đăng nhập để tiếp tục");
      router.push("/auth/login");
    }
  }, [auth, router]);

  const fetchChatData = async () => {
    if (!id) {
      setError("Thiếu matchId");
      showToast.error("Có lỗi xảy ra: Thiếu matchId");
      return;
    }
    if (!auth?.access_token) {
      setError("Chưa đăng nhập");
      showToast.error("Vui lòng đăng nhập để tiếp tục");
      router.push("/auth/login");
      return;
    }
    try {
      setIsLoading(true);
      setError(null);
      const response = await fetch(
        `http://localhost:3001/api/message/${id}`,
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${auth.access_token}`,
          },
        }
      );
      if (!response.ok) {
        if (response.status === 401) {
          throw new Error("Phiên đăng nhập hết hạn, vui lòng đăng nhập lại");
        }
        if (response.status === 403) {
          throw new Error("Bạn không có quyền truy cập cuộc trò chuyện này");
        }
        throw new Error(`Lỗi API: ${response.status} ${response.statusText}`);
      }
      const data = await response.json();
      setChat(data.data);
      console.log("Chat data:", JSON.stringify(data.data, null, 2));
    } catch (error) {
      console.error("Error fetching chat data:", error);
      setError(error.message);
      showToast.error(`Lỗi tải tin nhắn: ${error.message}`);
      if (error.message.includes("đăng nhập")) {
        router.push("/auth/login");
      }
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchChatData();
  }, [id, auth]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({
      behavior: "smooth",
    });
  }, [chat?.messages]);

  useEffect(() => {
    if (!socket) return;
    socket.on("receive-new-message", (message) => {
      console.log("New message received:", message);
      fetchChatData();
    });
    return () => {
      socket.off("receive-new-message");
    };
  }, [socket]);

  const handleSend = async () => {
    if (message.trim() === "") return;
    if (!chat?.id) {
      showToast.error("Không thể gửi tin nhắn: Cuộc trò chuyện chưa được khởi tạo");
      return;
    }
    const newMessage = {
      content: message,
      receiverId: chat.id,
      matchId: parseInt(id),
    };
    console.log("Sending message:", JSON.stringify(newMessage, null, 2)); // Debug
    try {
      const response = await fetch(`http://localhost:3001/api/message`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${auth.access_token}`,
        },
        body: JSON.stringify(newMessage),
      });
      if (!response.ok) {
        const errorData = await response.json();
        console.error("API error:", errorData);
        throw new Error(errorData.message || `Lỗi API: ${response.status} ${response.statusText}`);
      }
      const data = await response.json();
      socket.emit("new-message", {
        id: data.data.id,
        text: data.data.text,
        time: data.data.time,
        sender: parseInt(data.data.sender_id) === parseInt(currentUser?.id) ? "me" : "other",
        sender_id: currentUser?.id,
        receiverId: newMessage.receiverId,
        matchId: newMessage.matchId,
      });
      fetchChatData();
    } catch (error) {
      console.error("Error sending message:", error);
      showToast.error(`Lỗi gửi tin nhắn: ${error.message}`);
    }
    setMessage("");
  };

  const handleIcebreakerSelect = (question) => {
    setMessage(question);
    setShowIcebreakers(false);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loading />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen">
        <p className="text-red-500">{error}</p>
        <button
          onClick={() => router.push("/matches")}
          className="mt-4 px-6 py-2 bg-[#FF5864] text-white rounded-xl hover:bg-[#FF655B]"
        >
          Quay lại
        </button>
      </div>
    );
  }

  return (
    <div className="flex flex-col min-h-screen bg-gray-100 w-full max-w-3xl mx-auto">
      {/* Header */}
      <div className="flex items-center p-4 bg-white shadow-sm">
        <button onClick={() => router.push("/matches")} className="mr-4">
          <ArrowLeftIcon className="w-6 h-6 text-gray-700" />
        </button>
        <div className="flex items-center">
          <div className="ml-2">
            <p className="font-semibold text-gray-900 text-lg">{chat?.name || "Người dùng"}</p>
          </div>
        </div>
      </div>

      {/* Khung chat */}
      <div className="flex-1 p-6 overflow-y-auto space-y-4">
        {chat?.messages?.length > 0 ? (
          chat.messages.map((msg) => {
            const isMe = parseInt(msg.sender_id) === parseInt(currentUser?.id);
            return (
              <div
                key={msg.id}
                className={`flex ${isMe ? "justify-end" : "justify-start"} mb-4`}
              >
                <div
                  className={`max-w-md p-4 rounded-2xl text-base ${
                    isMe ? "bg-[#FF5864] text-white" : "bg-white text-gray-900"
                  }`}
                >
                  <p>{msg.text}</p>
                  <p className="text-xs text-gray-400 mt-1">
                    {getRelativeTime(msg.time)}
                  </p>
                </div>
              </div>
            );
          })
        ) : (
          <div className="flex flex-col items-center justify-center h-full">
            <p className="text-gray-500 text-base">Chưa có tin nhắn nào</p>
            <button
              onClick={() => setShowIcebreakers(true)}
              className="mt-4 px-6 py-2 bg-[#FF5864] text-white rounded-xl hover:bg-[#FF655B]"
            >
              Gợi ý câu hỏi
            </button>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Icebreaker suggestions */}
      {showIcebreakers && (
        <div className="p-4 bg-white border-t border-gray-200">
          <p className="font-medium text-gray-700 mb-2">Gợi ý câu hỏi:</p>
          <div className="flex flex-wrap gap-2">
            {icebreakers.map((question, index) => (
              <button
                key={index}
                onClick={() => handleIcebreakerSelect(question)}
                className="px-3 py-2 text-sm text-gray-800 bg-gray-100 rounded-full whitespace-nowrap"
              >
                {question}
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Input nhập tin nhắn */}
      <div className="p-4 bg-white border-t border-gray-200">
        <div className="flex items-center gap-3 max-w-3xl mx-auto">
          <input
            type="text"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="Nhập tin nhắn..."
            className="flex-1 p-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-[#FF5864] focus:border-transparent text-base"
            onKeyPress={(e) => e.key === "Enter" && handleSend()}
          />
          {message.trim() === "" ? (
            <button
              onClick={() => setShowIcebreakers(!showIcebreakers)}
              className="p-2 text-gray-500 hover:text-[#FF5864]"
            >
              <SmileIcon className="w-6 h-6" />
            </button>
          ) : (
            <button onClick={handleSend} className="p-2 text-[#FF5864] hover:text-[#FF655B]">
              <SendIcon className="w-6 h-6" />
            </button>
          )}
        </div>
      </div>

      {/* Media queries cho responsive */}
      <style jsx>{`
        @media (max-width: 640px) {
          .max-w-md {
            max-width: 80% !important;
          }
          .max-w-3xl {
            max-width: 100% !important;
            padding-left: 1rem;
            padding-right: 1rem;
          }
          .text-base {
            font-size: 0.875rem !important;
          }
          .text-lg {
            font-size: 1rem !important;
          }
        }
      `}</style>
    </div>
  );
};

export default MessagePage;
```

### src\app\(main)\notifications\page.js
```js
"use client";

import { useEffect, useState } from "react";
import { useAuth } from "@/hooks/useAuth";
import { HeartIcon, MessageCircleIcon, StarIcon } from "lucide-react";
import Link from "next/link";
import { getRelativeTime } from "@/utils/Time";
import { useSocket } from "@/hooks/useSocket";

const getNotificationContent = (notification) => {
  // Chuẩn hóa URL ảnh
  const normalizePhotoUrl = (photo) => {
    let url;
    // Xử lý photo là mảng (từ Prisma)
    if (Array.isArray(photo)) {
      if (photo.length > 0 && photo[0]?.url && typeof photo[0].url === 'string') {
        url = photo[0].url;
      }
    }
    // Xử lý photo là object
    else if (photo && typeof photo === 'object' && photo.url && typeof photo.url === 'string') {
      url = photo.url;
    }
    // Fallback nếu photo là chuỗi trực tiếp
    else if (typeof photo === 'string' && photo) {
      url = photo;
    }

    // Kiểm tra url hợp lệ
    if (!url || typeof url !== 'string') {
      console.warn("Invalid or missing photo URL", { photo, url });
      return "/default-avatar.jpg";
    }

    // Chuẩn hóa URL
    return url.startsWith("http") ? url : `http://localhost:3001${url.toLowerCase()}`;
  };

  const photoUrl = normalizePhotoUrl(notification?.user?.photo);

  switch (notification.type) {
    case "NEW_MATCH":
      return {
        icon: <HeartIcon className="h-5 w-5 text-[#FF5864]" />,
        text: `Bạn và ${notification.user.name} đã ghép đôi!`,
        link: "/matches",
        photo: photoUrl,
      };
    case "LIKED":
      return {
        icon: <HeartIcon className="h-5 w-5 text-[#FF5864]" />,
        text: `${notification.user.name} đã thích bạn`,
        link: "/matches",
        type: "like",
        photo: photoUrl,
      };
    default:
      return null;
  }
};

export default function NotificationsPage() {
  const socket = useSocket();
  const auth = useAuth();
  const [notifications, setNotifications] = useState([]);

  const fetchNotifications = async () => {
    try {
      const res = await fetch("http://localhost:3001/api/notifications", {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${auth?.auth?.access_token}`,
        },
      });
      const data = await res.json();
      console.log(data);
      setNotifications(data?.data || []);
    } catch (error) {}
  };

  useEffect(() => {
    fetchNotifications();
  }, []);

  useEffect(() => {
    if (!socket) return;
    socket.on("new-notification", (notifications = []) => {
      console.log("Received new notification:", notifications);
      setNotifications(notifications);
    });
    socket.emit("accept-match", 1);
    return () => socket.off("new-notification");
  }, [socket]);

  const handleAccept = async (e, matchId, notificationId) => {
    e.preventDefault();
    e.stopPropagation();
    console.log("Accepted notification:");
    try {
      const res = await fetch(
        `http://localhost:3001/api/match/${matchId}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${auth?.auth?.access_token}`,
          },
          body: JSON.stringify({
            isAccept: true,
            notificationId,
          }),
        }
      );
      const data = await res?.json();
      socket.emit("accept-match", data?.match);
      setNotifications(data?.data || []);
    } catch (error) {}
  };

  return (
    <div className="w-full max-w-lg mx-auto ">
      <div className="bg-white rounded-lg shadow-sm overflow-hidden min-h-[70vh]">
        <div className="p-4 border-b border-gray-100">
          <h1 className="text-xl font-bold text-gray-800">Thông báo</h1>
        </div>
        <div className="divide-y divide-gray-100">
          {notifications?.map((notification) => {
            const content = getNotificationContent(notification);
            return (
              <Link
                key={notification?.id}
                href={content?.link}
                className={`flex items-center gap-4 p-4 hover:bg-gray-50 transition-colors
                  ${!notification?.read ? "bg-pink-50/50" : ""}`}
              >
                <div className="relative">
                  <img
                    src={content?.photo}
                    alt={notification?.user.name}
                    className="object-cover w-12 h-12 rounded-full"
                    crossOrigin="anonymous"
                    onError={(e) => {
                      console.error(`Failed to load image: ${e.target.src}, error: ${e.type}, status: ${e.target.status || 'unknown'}`);
                      e.target.src = "/default-avatar.jpg";
                    }}
                  />
                  <div className="absolute p-1 bg-white rounded-full -bottom-1 -right-1">
                    {content.icon}
                  </div>
                </div>
                <div className="flex-1 min-w-0">
                  <p className="text-sm text-gray-900">{content.text}</p>
                  <p className="text-xs text-gray-500 mt-0.5">
                    {getRelativeTime(notification?.time)}
                  </p>
                  {notification?.type === "LIKED" && (
                    <div className="flex items-center justify-between gap-2 mt-2">
                      <button
                        className="w-full btn btn-primary rounded-lg transition-all duration-300
                          bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white p-2 cursor-pointer"
                        onClick={(e) =>
                          handleAccept(
                            e,
                            notification?.matchId,
                            notification?.id
                          )
                        }
                      >
                        Accept
                      </button>
                      <button className="w-full p-2 transition-all duration-300 border border-gray-300 rounded-lg cursor-pointer btn btn-primary hover:bg-gray-100">
                        Remove
                      </button>
                    </div>
                  )}
                </div>
                {!notification?.read && (
                  <div className="w-2 h-2 bg-[#FF5864] rounded-full" />
                )}
              </Link>
            );
          })}
        </div>
        {notifications?.length === 0 && (
          <div className="py-12 text-center text-gray-500">
            <p>Không có thông báo mới</p>
          </div>
        )}
      </div>
    </div>
  );
}
```

### src\app\(main)\profile\page.js
```js
"use client";
import React, { useEffect, useState, useMemo } from "react";
import { CameraIcon, EditIcon, Loader2Icon, XIcon } from "lucide-react";
import { useAuth } from "@/hooks/useAuth";
import { useMetadata } from "@/hooks/useMetadata";
import axios from "axios";
import { setupAxios } from "@/app/auth/_helpers";
import { showToast } from "@/lib/toast";

setupAxios(axios);

const Profile = () => {
    const { auth, currentUser, refreshUser } = useAuth();
    const { metadata } = useMetadata();
    console.log("Current user:", JSON.stringify(currentUser, null, 2));

    const [showBioModal, setShowBioModal] = useState(false);
    const [showInterestsModal, setShowInterestsModal] = useState(false);
    const [showPhotoModal, setShowPhotoModal] = useState(false);
    const [showProfilePhotoModal, setShowProfilePhotoModal] = useState(false);
    const [error, setError] = useState(null);
    const [isClient, setIsClient] = useState(false);

    const [profile, setProfile] = useState({
        name: "Chưa cập nhật",
        age: "N/A",
        location: "Chưa cập nhật",
        bio: "Chưa có mô tả",
        interests: [],
        photos: [],
        profilePhoto: "/default-avatar.jpg",
    });

    useEffect(() => {
        setIsClient(true);
    }, []);

    const profileData = useMemo(() => {
        if (!currentUser || !metadata) return null;
        return {
            name: currentUser?.displayName || "Chưa cập nhật",
            age: currentUser?.age || "N/A",
            location: currentUser?.location || "Chưa cập nhật",
            bio: currentUser?.aboutMe || "Chưa có mô tả",
            interests: currentUser?.favorites?.map(
                (favorite) => metadata?.favorites?.find((f) => f.id === favorite)?.value || "N/A"
            ) || [],
            photos: currentUser?.photos
                ?.filter((photo) => !photo.url.startsWith("https://avatars.githubusercontent.com"))
                .map((photo) => ({
                    id: photo.id,
                    url: photo.url.startsWith("http") ? photo.url : `http://localhost:3001${photo.url.toLowerCase()}`,
                    is_profile_pic: photo.is_profile_pic,
                })) || [],
            profilePhoto: currentUser?.photos?.find((photo) => photo.is_profile_pic)?.url
                ? currentUser.photos.find((photo) => photo.is_profile_pic).url.startsWith("http")
                    ? currentUser.photos.find((photo) => photo.is_profile_pic).url
                    : `http://localhost:3001${currentUser.photos.find((photo) => photo.is_profile_pic).url.toLowerCase()}`
                : "/default-avatar.jpg",
        };
    }, [currentUser, metadata]);

    useEffect(() => {
        if (profileData) {
            setProfile(profileData);
            setError(null);
        } else if (!currentUser && auth) {
            setError("Đang tải dữ liệu hồ sơ...");
        } else if (!auth) {
            setError("Vui lòng đăng nhập để xem hồ sơ");
        }
    }, [profileData, currentUser, auth]);

    console.log("Profile state:", JSON.stringify(profile, null, 2));

    if (error && isClient) {
        return (
            <div className="flex items-center justify-center h-screen">
                <div className="text-center">
                    <p className="text-lg text-gray-600">{error}</p>
                    {!auth && (
                        <button
                            onClick={() => window.location.href = "/auth/login"}
                            className="mt-4 px-6 py-2 bg-[#FF5864] text-white rounded-xl hover:bg-[#FF655B]"
                        >
                            Đăng nhập
                        </button>
                    )}
                </div>
            </div>
        );
    }

    if (!currentUser && auth && isClient) {
        return (
            <div className="w-full max-w-lg mx-auto py-6 px-4">
                <div className="bg-white rounded-2xl shadow-lg overflow-hidden animate-pulse">
                    <div className="h-48 bg-gray-200" />
                    <div className="w-32 h-32 rounded-full bg-gray-200 mx-auto -mt-16" />
                    <div className="text-center mt-4 px-6">
                        <div className="h-6 bg-gray-200 w-1/2 mx-auto" />
                        <div className="h-4 bg-gray-200 w-1/3 mx-auto mt-2" />
                    </div>
                    <div className="px-6 py-4">
                        <div className="h-4 bg-gray-200 w-1/4" />
                        <div className="h-16 bg-gray-200 mt-2" />
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="w-full max-w-lg mx-auto py-6 px-4">
            <div className="bg-white rounded-2xl shadow-lg overflow-hidden">
                {/* Profile header */}
                <div className="relative h-48 bg-gradient-to-r from-[#FF5864] to-[#FF655B]">
                    <div className="absolute inset-0 bg-black/20" />
                    <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                        <div className="relative group">
                            {profile.profilePhoto ? (
                                <img
                                    src={profile.profilePhoto}
                                    alt="Profile"
                                    crossOrigin="anonymous"
                                    className="w-32 h-32 rounded-full border-4 border-white object-cover transition-transform duration-300 group-hover:scale-105"
                                    onError={(e) => {
                                        console.error(`Failed to load image: ${e.target.src}, error: ${e.type}, status: ${e.target.status || 'unknown'}`);
                                        e.target.src = "/default-avatar.jpg";
                                    }}
                                />
                            ) : (
                                <div className="w-32 h-32 rounded-full border-4 border-white bg-gray-200 flex items-center justify-center">
                                    <span className="text-4xl text-gray-400">?</span>
                                </div>
                            )}
                            <button
                                onClick={() => setShowProfilePhotoModal(true)}
                                className="absolute bottom-2 right-2 bg-[#FF5864] p-2 rounded-full text-white shadow-md hover:scale-110 transition-transform duration-300"
                            >
                                <CameraIcon className="w-5 h-5" />
                            </button>
                        </div>
                    </div>
                </div>

                {/* Profile info */}
                <div className="text-center mt-20 px-6">
                    <h1 className="text-2xl font-bold text-gray-900">{profile.name}, {profile.age}</h1>
                    <p className="text-gray-500 mt-1">{profile.location}</p>
                </div>

                {/* Bio */}
                <div className="px-6 py-4 border-t border-gray-100">
                    <div className="flex items-center justify-between mb-3">
                        <h2 className="text-lg font-semibold text-gray-900">Giới thiệu</h2>
                        <button
                            onClick={() => setShowBioModal(true)}
                            className="text-[#FF5864] hover:scale-110 transition-transform duration-300"
                        >
                            <EditIcon className="w-5 h-5" />
                        </button>
                    </div>
                    <p className="text-gray-600 leading-relaxed">{profile.bio}</p>
                </div>

                {/* Interests */}
                <div className="px-6 py-4 border-t border-gray-100">
                    <div className="flex items-center justify-between mb-3">
                        <h2 className="text-lg font-semibold text-gray-900">Sở thích</h2>
                        <button
                            onClick={() => setShowInterestsModal(true)}
                            className="text-[#FF5864] hover:scale-110 transition-transform duration-300"
                        >
                            <EditIcon className="w-5 h-5" />
                        </button>
                    </div>
                    <div className="flex flex-wrap gap-2">
                        {profile.interests.map((interest, index) => (
                            <span
                                key={index}
                                className="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm hover:bg-gray-200 transition-colors duration-300"
                            >
                                {interest}
                            </span>
                        ))}
                    </div>
                </div>

                {/* Photos */}
                <div className="px-6 py-4 border-t border-gray-100">
                    <div className="flex items-center justify-between mb-3">
                        <h2 className="text-lg font-semibold text-gray-900">Ảnh ({profile.photos.length}/6)</h2>
                        <button
                            onClick={() => setShowPhotoModal(true)}
                            className="text-[#FF5864] hover:scale-110 transition-transform duration-300"
                        >
                            <EditIcon className="w-5 h-5" />
                        </button>
                    </div>
                    <div className="grid grid-cols-3 gap-3">
                        {profile.photos
                            .filter((photo) => photo?.url)
                            .map((photo, index) => (
                                <div key={index} className="relative aspect-square overflow-hidden rounded-xl group">
                                    <img
                                        src={photo.url}
                                        alt={`Photo ${index + 1}`}
                                        crossOrigin="anonymous"
                                        className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                                        onError={(e) => {
                                            console.error(`Failed to load image: ${e.target.src}, error: ${e.type}, status: ${e.target.status || 'unknown'}`);
                                            e.target.src = "/default-avatar.jpg";
                                        }}
                                    />
                                </div>
                            ))}
                        {[...Array(6 - profile.photos.filter((photo) => photo?.url).length)].map((_, index) => (
                            <div
                                key={`empty-${index}`}
                                className="aspect-square bg-gray-100 rounded-xl flex flex-col items-center justify-center cursor-pointer hover:bg-gray-200 transition-colors duration-300"
                                onClick={() => setShowPhotoModal(true)}
                            >
                                <CameraIcon className="w-6 h-6 text-gray-400" />
                                <span className="text-xs text-gray-500 mt-1">Thêm ảnh</span>
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            {/* Modals */}
            {showBioModal && (
                <EditBioModal
                    bio={profile.bio}
                    onSave={(newBio) => {
                        setProfile((prev) => ({ ...prev, bio: newBio }));
                        setShowBioModal(false);
                    }}
                    onClose={() => setShowBioModal(false)}
                />
            )}
            {showInterestsModal && (
                <EditInterestsModal
                    interests={profile.interests}
                    onSave={(newInterests) => {
                        setProfile((prev) => ({ ...prev, interests: newInterests }));
                        setShowInterestsModal(false);
                    }}
                    onClose={() => setShowInterestsModal(false)}
                />
            )}
            {showPhotoModal && (
                <EditPhotosModal
                    photos={profile.photos}
                    onSave={(newPhotos) => {
                        setProfile((prev) => ({ ...prev, photos: newPhotos }));
                        setShowPhotoModal(false);
                    }}
                    onClose={() => setShowPhotoModal(false)}
                />
            )}
            {showProfilePhotoModal && (
                <EditProfilePhotoModal
                    currentPhoto={profile.profilePhoto}
                    onSave={(newPhotoData) => {
                        setProfile((prev) => ({
                            ...prev,
                            profilePhoto: newPhotoData.profilePhoto,
                            photos: newPhotoData.photos,
                        }));
                        setShowProfilePhotoModal(false);
                    }}
                    onClose={() => setShowProfilePhotoModal(false)}
                />
            )}
        </div>
    );
};

const EditBioModal = ({ bio, onSave, onClose }) => {
    const { auth, currentUser, refreshUser } = useAuth();
    const [newBio, setNewBio] = useState(bio);
    const [loading, setLoading] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        try {
            await axios.put(
                "http://localhost:3001/api/user/update-profile",
                {
                    user: {
                        id: currentUser.id,
                        aboutMe: newBio,
                    },
                },
                {
                    headers: {
                        Authorization: `Bearer ${auth?.access_token}`,
                    },
                }
            );
            await refreshUser();
            onSave(newBio);
            showToast.success("Cập nhật giới thiệu thành công");
        } catch (error) {
            console.error("Error updating bio:", error);
            showToast.error(`Lỗi khi cập nhật giới thiệu: ${error.response?.data?.message || error.message}`);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/60 backdrop-blur-sm animate-fade-in">
            <div className="relative w-full max-w-md p-6 bg-white rounded-2xl animate-slide-up">
                <form onSubmit={handleSubmit} className="space-y-4">
                    <h3 className="text-xl font-bold text-gray-900">Chỉnh sửa giới thiệu</h3>
                    <textarea
                        value={newBio}
                        onChange={(e) => setNewBio(e.target.value)}
                        className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent resize-none"
                        rows={4}
                        maxLength={500}
                        placeholder="Viết gì đó về bản thân..."
                    />
                    <p className="text-sm text-right text-gray-500">{newBio.length}/500</p>
                    <div className="flex gap-3">
                        <button
                            type="button"
                            onClick={onClose}
                            className="flex-1 px-4 py-2 text-gray-700 transition-colors duration-300 border border-gray-300 rounded-xl hover:bg-gray-50"
                        >
                            Hủy
                        </button>
                        <button
                            type="submit"
                            disabled={loading}
                            className="flex-1 px-4 py-2 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white rounded-xl hover:shadow-lg transition-all duration-300 disabled:opacity-70 flex items-center justify-center"
                        >
                            {loading ? <Loader2Icon className="w-5 h-5 animate-spin" /> : "Lưu"}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

const EditInterestsModal = ({ interests, onSave, onClose }) => {
    const { auth, currentUser, refreshUser } = useAuth();
    const { metadata } = useMetadata();
    const [selectedInterests, setSelectedInterests] = useState(interests);
    const [loading, setLoading] = useState(false);
    const popularInterests = metadata?.favorites?.map((f) => f.value) || [
        "#CafeTối", "#DuLịchBụi", "#Nhiếp ảnh", "#Đọc sách", "#Âm nhạc",
        "#Yoga", "#Nấu ăn", "#Thể thao", "#Phim ảnh", "#Nghệ thuật",
        "#Du lịch", "#Mua sắm",
    ];

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        try {
            // Chuyển đổi selectedInterests (chuỗi) thành mảng ID
            const favoriteIds = selectedInterests
                .map((interest) => metadata?.favorites?.find((f) => f.value === interest)?.id)
                .filter((id) => id !== undefined);

            await axios.put(
                "http://localhost:3001/api/user/update-profile",
                {
                    user: {
                        id: currentUser.id,
                        favorites: favoriteIds,
                    },
                },
                {
                    headers: {
                        Authorization: `Bearer ${auth?.access_token}`,
                    },
                }
            );
            await refreshUser();
            onSave(selectedInterests);
            showToast.success("Cập nhật sở thích thành công");
        } catch (error) {
            console.error("Error updating interests:", error);
            showToast.error(`Lỗi khi cập nhật sở thích: ${error.response?.data?.message || error.message}`);
        } finally {
            setLoading(false);
        }
    };

    const toggleInterest = (interest) => {
        setSelectedInterests((prev) =>
            prev.includes(interest)
                ? prev.filter((i) => i !== interest)
                : [...prev, interest]
        );
    };

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/60 backdrop-blur-sm animate-fade-in">
            <div className="relative w-full max-w-md p-6 bg-white rounded-2xl animate-slide-up">
                <form onSubmit={handleSubmit} className="space-y-4">
                    <h3 className="text-xl font-bold text-gray-900">Chỉnh sửa sở thích</h3>
                    <div className="flex flex-wrap gap-2">
                        {popularInterests.map((interest) => (
                            <button
                                key={interest}
                                type="button"
                                onClick={() => toggleInterest(interest)}
                                className={`px-4 py-2 rounded-full text-sm transition-all duration-300 ${
                                    selectedInterests.includes(interest)
                                        ? "bg-[#FF5864] text-white"
                                        : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                                }`}
                            >
                                {interest}
                            </button>
                        ))}
                    </div>
                    <div className="flex gap-3">
                        <button
                            type="button"
                            onClick={onClose}
                            className="flex-1 px-4 py-2 text-gray-700 transition-colors duration-300 border border-gray-300 rounded-xl hover:bg-gray-50"
                        >
                            Hủy
                        </button>
                        <button
                            type="submit"
                            disabled={loading}
                            className="flex-1 px-4 py-2 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white rounded-xl hover:shadow-lg transition-all duration-300 disabled:opacity-70 flex items-center justify-center"
                        >
                            {loading ? <Loader2Icon className="w-5 h-5 animate-spin" /> : "Lưu"}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

const EditPhotosModal = ({ photos, onSave, onClose }) => {
    const { auth, currentUser, refreshUser } = useAuth();
    const [currentPhotos, setCurrentPhotos] = useState(photos);
    const [loading, setLoading] = useState(false);

    const handlePhotoUpload = async (e) => {
        const file = e.target.files[0];
        if (file) {
            setLoading(true);
            try {
                const formData = new FormData();
                formData.append("image", file);
                formData.append("bioId", currentUser?.bioId);

                const response = await axios.post(
                    "http://localhost:3001/api/upload/single",
                    formData,
                    {
                        headers: {
                            Authorization: `Bearer ${auth?.access_token}`,
                            "Content-Type": "multipart/form-data",
                        },
                    }
                );

                const newPhoto = response.data.photo;
                setCurrentPhotos((prev) => [
                    ...prev,
                    {
                        id: newPhoto.id,
                        url: newPhoto.url.startsWith("http")
                            ? newPhoto.url
                            : `http://localhost:3001${newPhoto.url.toLowerCase()}`,
                        is_profile_pic: newPhoto.is_profile_pic,
                    },
                ]);
                await refreshUser();
                showToast.success("Tải ảnh lên thành công");
                setLoading(false);
            } catch (error) {
                console.error("Error uploading photo:", error);
                showToast.error(`Lỗi khi upload ảnh: ${error.response?.data?.message || error.message}`);
                setLoading(false);
            }
        }
    };

    const removePhoto = async (index) => {
        const photoToRemove = currentPhotos[index];
        if (!photoToRemove?.id) {
            console.warn("Photo ID is missing, cannot delete");
            return;
        }

        setLoading(true);
        try {
            await axios.delete(`http://localhost:3001/api/upload/${photoToRemove.id}`, {
                headers: {
                    Authorization: `Bearer ${auth?.access_token}`,
                },
            });
            setCurrentPhotos((prev) => prev.filter((_, i) => i !== index));
            showToast.success("Xóa ảnh thành công");
            await refreshUser();
        } catch (error) {
            console.error("Error deleting photo:", {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status,
            });
            showToast.error(`Lỗi khi xóa ảnh: ${error.response?.data?.message || error.message}`);
        } finally {
            setLoading(false);
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        try {
            if (currentPhotos.length > 0) {
                await axios.put(
                    "http://localhost:3001/api/user/update-profile",
                    {
                        user: {
                            id: currentUser.id,
                            photos: currentPhotos.map((photo) => ({
                                id: photo.id,
                                url: photo.url,
                                is_profile_pic: photo.is_profile_pic,
                            })),
                        },
                    },
                    {
                        headers: {
                            Authorization: `Bearer ${auth?.access_token}`,
                        },
                    }
                );
                await refreshUser();
                onSave(currentPhotos);
                showToast.success("Cập nhật ảnh thành công");
            } else {
                // Nếu không còn ảnh, gửi danh sách rỗng
                await axios.put(
                    "http://localhost:3001/api/user/update-profile",
                    {
                        user: {
                            id: currentUser.id,
                            photos: [],
                        },
                    },
                    {
                        headers: {
                            Authorization: `Bearer ${auth?.access_token}`,
                        },
                    }
                );
                await refreshUser();
                onSave([]);
                showToast.success("Cập nhật ảnh thành công");
            }
        } catch (error) {
            console.error("Error saving photos:", error);
            showToast.error(`Lỗi khi lưu ảnh: ${error.response?.data?.message || error.message}`);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/60 backdrop-blur-sm animate-fade-in">
            <div className="relative w-full max-w-md p-6 bg-white rounded-2xl animate-slide-up">
                <form onSubmit={handleSubmit} className="space-y-4">
                    <h3 className="text-xl font-bold text-gray-900">Chỉnh sửa ảnh</h3>
                    <div className="grid grid-cols-3 gap-3">
                        {currentPhotos.map((photo, index) => (
                            <div key={index} className="relative aspect-square group">
                                <img
                                    src={photo.url}
                                    alt={`Photo ${index + 1}`}
                                    crossOrigin="anonymous"
                                    className="w-full h-full object-cover rounded-xl"
                                    onError={(e) => {
                                        console.error(`Failed to load image: ${e.target.src}, error: ${e.type}, status: ${e.target.status || 'unknown'}`);
                                        e.target.src = "/default-avatar.jpg";
                                    }}
                                />
                                <button
                                    type="button"
                                    onClick={() => removePhoto(index)}
                                    className="absolute top-2 right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                                >
                                    <XIcon className="w-4 h-4" />
                                </button>
                                {photo.is_profile_pic && (
                                    <span className="absolute top-2 left-2 bg-[#FF5864] text-white text-xs px-2 py-1 rounded-full">
                                        Đại diện
                                    </span>
                                )}
                            </div>
                        ))}
                        {currentPhotos.length < 6 && (
                            <label className="aspect-square border-2 border-dashed border-gray-300 rounded-xl flex flex-col items-center justify-center cursor-pointer hover:bg-gray-50 transition-colors duration-300">
                                <input
                                    type="file"
                                    accept="image/*"
                                    onChange={handlePhotoUpload}
                                    className="hidden"
                                />
                                <CameraIcon className="w-8 h-8 text-gray-400" />
                                <span className="mt-2 text-sm text-gray-500">Thêm ảnh</span>
                            </label>
                        )}
                    </div>
                    <div className="flex gap-3">
                        <button
                            type="button"
                            onClick={onClose}
                            className="flex-1 px-4 py-2 text-gray-700 transition-colors duration-300 border border-gray-300 rounded-xl hover:bg-gray-50"
                        >
                            Hủy
                        </button>
                        <button
                            type="submit"
                            disabled={loading}
                            className="flex-1 px-4 py-2 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white rounded-xl hover:shadow-lg transition-all duration-300 disabled:opacity-70 flex items-center justify-center"
                        >
                            {loading ? <Loader2Icon className="w-5 h-5 animate-spin" /> : "Lưu"}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

const EditProfilePhotoModal = ({ currentPhoto, onSave, onClose }) => {
    const { auth, currentUser, refreshUser } = useAuth();
    const [loading, setLoading] = useState(false);

    const handlePhotoUpload = async (e) => {
        const file = e.target.files[0];
        if (file) {
            if (!currentUser?.bioId) {
                showToast.error("Không thể upload ảnh: Thiếu thông tin người dùng");
                setLoading(false);
                return;
            }
            if (!auth?.access_token) {
                showToast.error("Không thể upload ảnh: Vui lòng đăng nhập lại");
                setLoading(false);
                return;
            }
            setLoading(true);
            try {
                const formData = new FormData();
                formData.append("image", file);
                formData.append("bioId", currentUser.bioId);
                formData.append("isProfilePic", "true");

                const response = await axios.post(
                    "http://localhost:3001/api/upload/single",
                    formData,
                    {
                        headers: {
                            Authorization: `Bearer ${auth.access_token}`,
                            "Content-Type": "multipart/form-data",
                        },
                    }
                );

                const newPhoto = response.data.photo;
                const newPhotoUrl = newPhoto.url.startsWith("http")
                    ? newPhoto.url
                    : `http://localhost:3001${newPhoto.url.toLowerCase()}`;

                // Cập nhật state với ảnh đại diện mới và danh sách ảnh
                onSave({
                    profilePhoto: newPhotoUrl,
                    photos: [
                        ...currentUser.photos
                            .filter((photo) => photo.id !== newPhoto.id)
                            .map((photo) => ({
                                id: photo.id,
                                url: photo.url.startsWith("http") ? photo.url : `http://localhost:3001${photo.url.toLowerCase()}`,
                                is_profile_pic: false,
                            })),
                        {
                            id: newPhoto.id,
                            url: newPhotoUrl,
                            is_profile_pic: true,
                        },
                    ],
                });
                await refreshUser();
                showToast.success("Cập nhật ảnh đại diện thành công");
                setLoading(false);
            } catch (error) {
                console.error("Error uploading profile photo:", error);
                showToast.error(`Lỗi khi upload ảnh: ${error.response?.data?.message || error.message}`);
                setLoading(false);
            }
        }
    };

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/60 backdrop-blur-sm animate-fade-in">
            <div className="relative w-full max-w-md p-6 bg-white rounded-2xl animate-slide-up">
                <div className="space-y-4">
                    <h3 className="text-xl font-bold text-gray-900">Cập nhật ảnh đại diện</h3>
                    {currentPhoto && (
                        <div className="relative aspect-square">
                            <img
                                src={currentPhoto}
                                alt="Current profile photo"
                                crossOrigin="anonymous"
                                className="w-full h-full object-cover rounded-xl"
                                onError={(e) => {
                                    console.error(`Failed to load image: ${e.target.src}, error: ${e.type}, status: ${e.target.status || 'unknown'}`);
                                    e.target.src = "/default-avatar.jpg";
                                }}
                            />
                        </div>
                    )}
                    <label className="block">
                        <input
                            type="file"
                            accept="image/*"
                            onChange={handlePhotoUpload}
                            className="hidden"
                        />
                        <div className="w-full px-4 py-3 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white rounded-xl text-center cursor-pointer hover:shadow-lg transition-all duration-300 flex items-center justify-center">
                            {loading ? (
                                <Loader2Icon className="w-5 h-5 animate-spin" />
                            ) : (
                                <>
                                    <CameraIcon className="w-5 h-5 mr-2" />
                                    Chọn ảnh mới
                                </>
                            )}
                        </div>
                    </label>
                    <button
                        onClick={onClose}
                        className="w-full px-4 py-3 text-gray-700 transition-colors duration-300 border border-gray-300 rounded-xl hover:bg-gray-50"
                    >
                        Hủy
                    </button>
                </div>
            </div>
        </div>
    );
};

export default Profile;
```

### src\app\(main)\settings\page.js
```js
"use client";

import React, { useEffect, useState } from "react";
import {
    BellIcon,
    CompassIcon,
    CrownIcon,
    HeartIcon,
    LockIcon,
    LogOutIcon,
    ShieldIcon,
    UserIcon,
    CameraIcon,
    Loader2Icon,
    XIcon,
} from "lucide-react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/hooks/useAuth";

const Settings = () => {
  const { auth, currentUser, logout } = useAuth();
  console.log("auth", auth);

  const router = useRouter();
  const [showPhotoModal, setShowPhotoModal] = useState(false);
  const [profileData, setProfileData] = useState({
    name: currentUser?.display_name,
    username: currentUser?.username,
    photo: "/default-avatar.jpg",
  });

  // Hàm chuẩn hóa URL ảnh
  const normalizePhotoUrl = (photo) => {
    let url;
    // Xử lý photo là mảng (từ Prisma)
    if (Array.isArray(photo)) {
      if (photo.length > 0 && photo[0]?.url && typeof photo[0].url === 'string') {
        url = photo[0].url;
      }
    }
    // Xử lý photo là object
    else if (photo && typeof photo === 'object' && photo.url && typeof photo.url === 'string') {
      url = photo.url;
    }
    // Xử lý photo là chuỗi trực tiếp
    else if (typeof photo === 'string' && photo) {
      url = photo;
    }

    // Kiểm tra url hợp lệ
    if (!url || typeof url !== 'string') {
      console.warn("Invalid or missing photo URL", { photo, url });
      return "/default-avatar.jpg";
    }

    // Chuẩn hóa URL
    return url.startsWith("http") ? url : `http://localhost:3001${url.toLowerCase()}`;
  };

  useEffect(() => {
    if (currentUser) {
      setProfileData({
        name: currentUser?.displayName || currentUser?.display_name || "Chưa cập nhật",
        //username: currentUser?.username || "Chưa cập nhật",
        photo: normalizePhotoUrl(currentUser?.photo || currentUser?.photos?.find((p) => p.is_profile_pic)),
      });
    }
  }, [currentUser]);

  const handlePhotoChange = (newPhoto) => {
    setProfileData((prev) => ({
      ...prev,
      photo: normalizePhotoUrl(newPhoto),
    }));
  };

  const handlePhotoClick = () => {
    setShowPhotoModal(true);
  };

  const handleProfileEdit = () => {
    router.push("/profile-setup");
  };

  const handleLogout = () => {
    logout();
  };

  const settingSections = [
    {
      title: "Tài khoản",
      items: [
        {
          icon: UserIcon,
          label: "Thông tin cá nhân",
          description: "Cập nhật thông tin của bạn",
          highlight: true,
          onClick: handleProfileEdit,
        },
        {
          icon: CrownIcon,
          label: "DateViet Premium",
          description: "Xem các tính năng cao cấp",
          badge: "Mới",
          gradient: true,
          onClick: () => router.push("/premium"),
        },
      ],
    },
    {
      title: "Ứng dụng",
      items: [
        {
          icon: CompassIcon,
          label: "Tùy chọn khám phá",
          description: "Khoảng cách, độ tuổi, giới tính",
        },
        {
          icon: BellIcon,
          label: "Thông báo",
          description: "Tin nhắn, lượt thích, kết đôi",
        },
        {
          icon: LockIcon,
          label: "Quyền riêng tư",
          description: "Kiểm soát dữ liệu của bạn",
        },
      ],
    },
    {
      title: "Khác",
      items: [
        {
          icon: ShieldIcon,
          label: "An toàn & Bảo mật",
          description: "Mật khẩu, xác thực 2 lớp",
        },
        {
          icon: HeartIcon,
          label: "Giới thiệu bạn bè",
          description: "Nhận 1 tháng Premium miễn phí",
          badge: "Ưu đãi",
        },
      ],
    },
  ];

  return (
    <div className="w-full max-w-md p-4 mx-auto">
      <div className="space-y-6">
        <div className="overflow-hidden bg-white shadow-lg rounded-2xl">
          <div className="relative h-32 bg-gradient-to-r from-[#FF5864] to-[#FF655B]">
            <div className="absolute inset-0 bg-black/20" />
          </div>
          <div className="relative px-6 pb-6">
            <div className="flex items-center -mt-12">
              <div className="relative group">
                <img
                  src={profileData.photo}
                  alt="Profile"
                  className="object-cover w-24 h-24 transition-transform duration-300 border-4 border-white shadow-lg rounded-2xl group-hover:scale-105"
                  crossOrigin="anonymous"
                  onError={(e) => {
                    console.error(`Failed to load image: ${e.target.src}, error: ${e.type}, status: ${e.target.status || 'unknown'}`);
                    e.target.src = "/default-avatar.jpg";
                  }}
                />
                <button
                  onClick={handlePhotoClick}
                  className="absolute bottom-0 right-0 bg-[#FF5864] p-2 rounded-full text-white shadow-lg transition-transform duration-300 hover:scale-110"
                >
                  <CameraIcon className="w-4 h-4" />
                </button>
                <div className="absolute inset-0 flex items-center justify-center transition-opacity duration-300 opacity-0 bg-black/50 group-hover:opacity-100 rounded-2xl">
                  <span className="text-sm font-medium text-white">
                    Thay đổi ảnh
                  </span>
                </div>
              </div>
              <div className="mt-12 ml-4">
                <h2 className="text-xl font-bold text-gray-900">{profileData.name}</h2>
                <p className="text-sm text-gray-600">{profileData.username}</p>
              </div>
            </div>
          </div>
        </div>
        {settingSections.map((section, idx) => (
          <div
            key={idx}
            className="overflow-hidden bg-white shadow-lg rounded-2xl"
          >
            <div className="p-6">
              <h3 className="mb-4 text-lg font-semibold text-gray-900">{section.title}</h3>
              <div className="space-y-3">
                {section.items.map((item, index) => (
                  <button
                    key={index}
                    onClick={item.onClick}
                    className={`w-full flex items-center p-3 rounded-xl transition-all duration-300
                      ${item.gradient ? "bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white" : "hover:bg-gray-50"}`}
                  >
                    <div
                      className={`p-2 rounded-lg ${item.gradient ? "bg-white/20" : "bg-gray-100"}`}
                    >
                      <item.icon
                        className={`h-5 w-5 ${item.gradient ? "text-white" : "text-gray-600"}`}
                      />
                    </div>
                    <div className="flex-1 ml-4 text-left">
                      <p
                        className={`font-medium ${item.gradient ? "text-white" : "text-gray-900"}`}
                      >
                        {item.label}
                      </p>
                      <p
                        className={`text-sm ${item.gradient ? "text-white/80" : "text-gray-500"}`}
                      >
                        {item.description}
                      </p>
                    </div>
                    {item.badge && (
                      <span
                        className={`ml-2 px-2.5 py-0.5 rounded-full text-xs font-medium
                          ${item.gradient ? "bg-white/20 text-white" : "bg-rose-100 text-rose-600"}`}
                      >
                        {item.badge}
                      </span>
                    )}
                  </button>
                ))}
              </div>
            </div>
          </div>
        ))}
        <button
          onClick={handleLogout}
          className="flex items-center justify-center w-full p-4 font-medium text-gray-600 transition-colors duration-300 bg-white shadow-lg rounded-2xl hover:bg-gray-50"
        >
          <LogOutIcon className="w-5 h-5 mr-2" />
          Đăng xuất
        </button>
        <div className="text-sm text-center text-gray-500">
          <p>DateViet v1.0.0</p>
        </div>
      </div>
      {showPhotoModal && (
        <PhotoUploadModal
          currentPhoto={profileData.photo}
          onSave={(newPhoto) => {
            handlePhotoChange(newPhoto);
            setShowPhotoModal(false);
          }}
          onClose={() => setShowPhotoModal(false)}
        />
      )}
    </div>
  );
};

const PhotoUploadModal = ({ currentPhoto, onSave, onClose }) => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [preview, setPreview] = useState(currentPhoto);
  const [isDragging, setIsDragging] = useState(false);

  // Chuẩn hóa URL ảnh
  const normalizePhotoUrl = (photo) => {
    if (!photo || typeof photo !== 'string') {
      console.warn("Invalid or missing photo URL", { photo });
      return "/default-avatar.jpg";
    }
    return photo.startsWith("http") ? photo : `http://localhost:3001${photo.toLowerCase()}`;
  };

  const handlePhotoUpload = async (file) => {
    if (!file) return;
    if (!file.type.startsWith("image/")) {
      setError("Vui lòng chọn file ảnh");
      return;
    }
    if (file.size > 5 * 1024 * 1024) {
      setError("Kích thước ảnh không được vượt quá 5MB");
      return;
    }
    setError("");
    setLoading(true);
    try {
      const reader = new FileReader();
      reader.onloadend = async () => {
        setPreview(reader.result);
        await new Promise((resolve) => setTimeout(resolve, 1000));
        onSave(reader.result);
      };
      reader.readAsDataURL(file);
    } catch (err) {
      setError("Có lỗi xảy ra khi tải ảnh lên");
    } finally {
      setLoading(false);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragging(false);
    const file = e.dataTransfer.files[0];
    handlePhotoUpload(file);
  };

  const handleFileInput = (e) => {
    const file = e.target.files[0];
    handlePhotoUpload(file);
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
      <div
        className="absolute inset-0 bg-black/60 backdrop-blur-sm"
        onClick={onClose}
      />
      <div className="relative w-full max-w-md p-6 bg-white rounded-2xl animate-scale-up">
        <h3 className="mb-4 text-xl font-bold text-gray-900">
          Cập nhật ảnh đại diện
        </h3>
        {preview && (
          <div className="relative mb-4 overflow-hidden aspect-square rounded-xl">
            <img
              src={normalizePhotoUrl(preview)}
              alt="Preview"
              className="object-cover w-full h-full"
              crossOrigin="anonymous"
              onError={(e) => {
                console.error(`Failed to load image: ${e.target.src}, error: ${e.type}, status: ${e.target.status || 'unknown'}`);
                e.target.src = "/default-avatar.jpg";
              }}
            />
            {!loading && (
              <button
                onClick={() => setPreview(null)}
                className="absolute p-1 text-white transition-colors duration-300 bg-red-500 rounded-full top-2 right-2 hover:bg-red-600"
              >
                <XIcon className="w-4 h-4" />
              </button>
            )}
          </div>
        )}
        {!preview && (
          <label
            className={`block w-full aspect-square rounded-xl border-2 border-dashed
              ${isDragging ? "border-[#FF5864] bg-[#FF5864]/5" : "border-gray-300 hover:border-[#FF5864]"}
              transition-colors cursor-pointer bg-gray-50`}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
          >
            <input
              type="file"
              accept="image/*"
              onChange={handleFileInput}
              className="hidden"
            />
            <div className="flex flex-col items-center justify-center h-full p-6">
              <CameraIcon className="w-12 h-12 mb-4 text-gray-400" />
              <p className="text-sm text-center text-gray-600">
                Kéo thả ảnh vào đây hoặc click để chọn
              </p>
              <p className="mt-2 text-xs text-gray-500">
                Hỗ trợ: JPG, PNG (Tối đa: 5MB)
              </p>
            </div>
          </label>
        )}
        {error && <p className="mt-2 text-sm text-red-500">{error}</p>}
        <div className="flex gap-3 mt-6">
          <button
            onClick={onClose}
            className="flex-1 px-4 py-2 text-gray-700 transition-colors duration-300 border border-gray-300 rounded-xl hover:bg-gray-50"
          >
            Hủy
          </button>
          <button
            onClick={() => onSave(preview)}
            disabled={loading || !preview}
            className="flex-1 px-4 py-2 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white
              rounded-xl hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5
              disabled:opacity-70 flex items-center justify-center gap-2"
          >
            {loading ? (
              <Loader2Icon className="w-5 h-5 animate-spin" />
            ) : (
              "Lưu thay đổi"
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

export default Settings;
```

### src\app\auth\layout.js
```js
"use client";
import { AuthProvider } from "@/hooks/useAuth";

export default function AuthLayout({ children }) {
    return <AuthProvider>{children}</AuthProvider>;
}

```

### src\app\auth\_helpers.js
```js
import { getData, setData } from "@/utils/LocalStorage";
const AUTH_LOCAL_STORAGE_KEY = "token";
const getAuth = () => {
    try {
        const auth = getData(AUTH_LOCAL_STORAGE_KEY);
        if (auth) {
            return auth;
        } else {
            return undefined;
        }
    } catch (error) {
        console.error("AUTH LOCAL STORAGE PARSE ERROR", error);
    }
};

const setAuth = (auth) => {
    setData(AUTH_LOCAL_STORAGE_KEY, auth);
};

const removeAuth = () => {
    if (!localStorage) return;
    try {
        localStorage.removeItem(AUTH_LOCAL_STORAGE_KEY);
    } catch (error) {
        console.error("AUTH LOCAL STORAGE REMOVE ERROR", error);
    }
};

const setupAxios = (axios) => {
    axios.defaults.headers.Accept = "application/json";
    axios.interceptors.request.use(
        (config) => {
            const auth = getAuth();
            if (auth?.access_token) {
                config.headers.Authorization = `Bearer ${auth.access_token}`;
            }
            return config;
        },
        async (err) => await Promise.reject(err)
    );
};

export { getAuth, setAuth, removeAuth, setupAxios };

```

### src\app\auth\login\page.js
```js
"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { useAuth } from "@/hooks/useAuth";
import { showToast } from "@/lib/toast";
import { FacebookIcon, PhoneIcon, Loader2Icon } from "lucide-react";
import Link from "next/link";
import { FlameIcon, ArrowLeftIcon } from "lucide-react";
import { getData, setData } from "@/utils/LocalStorage";

export default function Login() {
    const { login } = useAuth();
    const router = useRouter();
    const searchParams = useSearchParams();
    const [formData, setFormData] = useState({
        email: "",
        password: "",
    });
    const [error, setError] = useState("");
    const [loading, setLoading] = useState(false);

    // Kiểm tra trạng thái đăng ký thành công từ localStorage
    useEffect(() => {
        const registrationSuccess = getData("registrationSuccess");
        console.log("Registration success:", registrationSuccess); // Debug
        if (registrationSuccess === true) {
            showToast.success("Đăng ký thành công! Vui lòng đăng nhập.");
            setData("registrationSuccess", null); // Xóa trạng thái sau khi hiển thị
        }
    }, []);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: value,
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError("");

        try {
            await login(formData.email, formData.password);
            showToast.success("Đăng nhập thành công!");
        } catch (error) {
            console.error("Login error:", {
                message: error.message,
                response: error.response?.data,
            }); // Debug
            let message;
            if (error.message.includes("Password is not correct")) {
                message = "Mật khẩu không đúng";
            } else if (error.message.includes("User not found")) {
                message = "Email không tồn tại";
            } else if (error.response?.status === 401) {
                message = "Thông tin đăng nhập không hợp lệ";
            } else {
                message = error.message || "Đăng nhập thất bại";
            }
            setError(message);
            showToast.error(message);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="relative flex flex-col items-center justify-center min-h-screen p-4 overflow-hidden bg-gradient-to-br from-white via-pink-50 to-rose-50">
            <div className="absolute inset-0 overflow-hidden pointer-events-none">
                <div className="absolute top-0 -right-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl" />
                <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl" />
            </div>
            <div className="relative w-full max-w-md">
                <div className="mb-12 text-center">
                    <div className="flex justify-center mb-4">
                        <div className="relative">
                            <FlameIcon className="h-16 w-16 text-transparent bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text animate-pulse" />
                            <div className="absolute inset-0 h-16 w-16 bg-[#FF5864]/20 rounded-full blur-xl animate-pulse" />
                        </div>
                    </div>
                    <h1 className="text-4xl font-bold text-transparent bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text">
                        DateViet
                    </h1>
                    <p className="mt-3 text-lg text-gray-600">
                        Đăng nhập để tiếp tục
                    </p>
                </div>
                <div className="space-y-6">
                    <form onSubmit={handleSubmit} className="space-y-4">
                        {error && <p className="text-red-500 text-center">{error}</p>}
                        <div>
                            <label className="block mb-1 text-sm font-medium text-gray-700">
                                Email
                            </label>
                            <input
                                type="email"
                                name="email"
                                required
                                value={formData.email}
                                onChange={handleChange}
                                className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                                placeholder="Nhập email của bạn"
                            />
                        </div>
                        <div>
                            <label className="block mb-1 text-sm font-medium text-gray-700">
                                Mật khẩu
                            </label>
                            <input
                                type="password"
                                name="password"
                                required
                                value={formData.password}
                                onChange={handleChange}
                                className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                                placeholder="Nhập mật khẩu"
                            />
                        </div>
                        <button
                            type="submit"
                            disabled={loading}
                            className="w-full bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white py-3 px-6 rounded-xl
                   font-medium hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5 disabled:opacity-70"
                        >
                            {loading ? (
                                <Loader2Icon className="w-5 h-5 mx-auto animate-spin" />
                            ) : (
                                "Đăng nhập"
                            )}
                        </button>
                    </form>
                    <div className="relative">
                        <div className="absolute inset-0 flex items-center">
                            <div className="w-full border-t border-gray-300"></div>
                        </div>
                        <div className="relative flex justify-center text-sm">
                            <span className="px-2 text-gray-500 bg-gradient-to-br from-white via-pink-50 to-rose-50">
                                Hoặc đăng nhập với
                            </span>
                        </div>
                    </div>
                    <div className="space-y-3">
                        <button
                            onClick={() => {}}
                            className="w-full flex items-center justify-center gap-3 bg-white py-3 px-6 rounded-xl 
                   border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300
                   hover:border-gray-300 hover:-translate-y-0.5"
                        >
                            <img
                                src="https://www.google.com/favicon.ico"
                                alt="Google"
                                className="w-5 h-5"
                            />
                            <span className="font-medium text-gray-700">
                                Tiếp tục với Google
                            </span>
                        </button>
                        <button
                            onClick={() => {}}
                            className="w-full flex items-center justify-center gap-3 bg-[#1877F2] py-3 px-6 rounded-xl 
                   shadow-sm hover:shadow-md transition-all duration-300 hover:-translate-y-0.5"
                        >
                            <FacebookIcon className="w-5 h-5 text-white" />
                            <span className="font-medium text-white">
                                Tiếp tục với Facebook
                            </span>
                        </button>
                        <button
                            onClick={() => {}}
                            className="w-full flex items-center justify-center gap-3 bg-white py-3 px-6 rounded-xl 
                   border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300
                   hover:border-gray-300 hover:-translate-y-0.5"
                        >
                            <PhoneIcon className="w-5 h-5 text-gray-600" />
                            <span className="font-medium text-gray-700">
                                Tiếp tục với số điện thoại
                            </span>
                        </button>
                    </div>
                    <div className="text-center">
                        <button
                            onClick={() => {}}
                            className="text-sm text-[#FF5864] hover:text-[#FF655B] font-medium"
                        >
                            Quên mật khẩu?
                        </button>
                    </div>
                </div>
                <div className="mt-8 text-center">
                    <p className="text-gray-600">
                        Chưa có tài khoản?
                        <button
                            className="ml-2 text-[#FF5864] font-medium hover:text-[#FF655B] transition-colors duration-300"
                            onClick={() => router.push("/auth/register")}
                        >
                            Đăng ký
                        </button>
                    </p>
                </div>
                <div className="mt-10 text-center">
                    <Link
                        href="/"
                        className="inline-flex items-center text-gray-600 transition-colors duration-300 hover:text-gray-800"
                    >
                        <ArrowLeftIcon className="w-4 h-4 mr-2" />
                        <span>Quay lại ứng dụng</span>
                    </Link>
                </div>
            </div>
        </div>
    );
}
```

### src\app\auth\otp\OTPVerification.jsx
```jsx
"use client";

import React, { useEffect, useState, useRef } from "react";
import { Loader2Icon } from "lucide-react";
import { showToast } from "@/lib/toast";
import { setData } from "@/utils/LocalStorage";
import axios from "axios";
import { useRouter } from "next/navigation";

const OTPVerification = ({ email, onVerify, onResend, onBack }) => {
    const [otp, setOtp] = useState(["", "", "", "", "", ""]);
    const [loading, setLoading] = useState(false);
    const [resendTimer, setResendTimer] = useState(60);
    const [error, setError] = useState("");
    const inputRefs = useRef([]);
    const router = useRouter();

    useEffect(() => {
        if (resendTimer > 0) {
            const timer = setTimeout(
                () => setResendTimer(resendTimer - 1),
                1000
            );
            return () => clearTimeout(timer);
        }
    }, [resendTimer]);

    const handleChange = (index, value) => {
        const newOtp = [...otp];
        newOtp[index] = value;
        setOtp(newOtp);
        setError("");
        setTimeout(() => {
            if (value && index < 5) {
                inputRefs.current[index + 1]?.focus();
            }
        }, 1);
    };

    const handleKeyDown = (index, e) => {
        if (e.key === "Backspace" && !otp[index] && index > 0) {
            inputRefs.current[index - 1]?.focus();
        }
    };

    const handlePaste = (e) => {
        e.preventDefault();
        const pastedData = e.clipboardData.getData("text").slice(0, 6);
        if (!/^\d+$/.test(pastedData)) return;
        const newOtp = [...otp];
        pastedData.split("").forEach((char, index) => {
            if (index < 6) newOtp[index] = char;
        });
        setOtp(newOtp);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        const otpString = otp.join("");
        if (otpString.length !== 6) {
            setError("Vui lòng nhập đủ 6 số");
            showToast.error("Vui lòng nhập đủ 6 số");
            return;
        }
        setLoading(true);
        setError("");
        try {
            const response = await axios.post("http://localhost:3001/api/auth/verify-otp", {
                email,
                otp: otpString,
            });
            if (response.data.statusCode === 200 && response.data.registrationSuccess) {
                showToast.success("Xác thực email thành công!");
                setData("registrationSuccess", true); // Lưu trạng thái vào localStorage
                router.push("/auth/login");
            } else {
                throw new Error(response.data.message || "Xác thực OTP thất bại");
            }
        } catch (err) {
            const message = err.response?.data?.message || "Xác thực OTP thất bại";
            setError(message);
            showToast.error(message);
        } finally {
            setLoading(false);
        }
    };

    const handleResend = async () => {
        if (resendTimer > 0) return;
        setResendTimer(60);
        try {
            await onResend();
            showToast.success("Đã gửi lại mã OTP!");
        } catch (err) {
            const message = err.message || "Gửi lại OTP thất bại";
            setError(message);
            showToast.error(message);
        }
    };

    return (
        <div className="flex flex-col min-h-screen bg-gradient-to-br from-white via-pink-50 to-rose-50 relative overflow-hidden">
            <div className="fixed inset-0 overflow-hidden pointer-events-none">
                <div className="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl animate-float" />
                <div
                    className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl animate-float"
                    style={{
                        animationDelay: "-3s",
                    }}
                />
                <div
                    className="absolute top-1/4 left-10 w-40 h-40 bg-gradient-to-r from-pink-200 to-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-float"
                    style={{
                        animationDelay: "-2s",
                    }}
                />
                <div
                    className="absolute bottom-1/4 right-10 w-40 h-40 bg-gradient-to-r from-rose-200 to-rose-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-float"
                    style={{
                        animationDelay: "-4s",
                    }}
                />
                <div className="absolute inset-0 bg-grid-pattern opacity-[0.02]" />
            </div>

            <main className="flex-grow flex items-center justify-center p-4 relative">
                <div className="space-y-6">
                    <div className="text-center">
                        <h2 className="text-2xl font-bold text-gray-900 mb-2">
                            Xác thực email
                        </h2>
                        <p className="text-gray-600">
                            Chúng tôi đã gửi mã xác thực đến
                            <br />
                            <span className="font-medium text-gray-900">
                                {email}
                            </span>
                        </p>
                    </div>
                    <form onSubmit={handleSubmit} className="space-y-6">
                        <div className="flex justify-center gap-2">
                            {otp.map((digit, index) => (
                                <input
                                    key={index}
                                    ref={(el) =>
                                        el && (inputRefs.current[index] = el)
                                    }
                                    type="text"
                                    inputMode="numeric"
                                    pattern="\d*"
                                    maxLength={1}
                                    value={digit}
                                    onChange={(e) =>
                                        handleChange(index, e.target.value)
                                    }
                                    onKeyDown={(e) => handleKeyDown(index, e)}
                                    onPaste={handlePaste}
                                    className="w-12 h-12 text-center text-2xl font-bold rounded-xl border border-gray-300
                       focus:ring-2 focus:ring-[#FF5864] focus:border-transparent
                       disabled:opacity-50"
                                    disabled={loading}
                                />
                            ))}
                        </div>
                        {error && (
                            <p className="text-center text-sm text-red-500">
                                {error}
                            </p>
                        )}
                        <button
                            type="submit"
                            disabled={loading || otp.join("").length !== 6}
                            className="w-full bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white py-3 px-6 rounded-xl
                   font-medium hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5
                   disabled:opacity-70 flex items-center justify-center"
                        >
                            {loading ? (
                                <Loader2Icon className="h-5 w-5 animate-spin" />
                            ) : (
                                "Xác thực"
                            )}
                        </button>
                    </form>
                    <div className="space-y-4">
                        <div className="text-center">
                            <button
                                onClick={handleResend}
                                disabled={resendTimer > 0 || loading}
                                className="text-[#FF5864] hover:text-[#FF655B] font-medium disabled:opacity-50"
                            >
                                {resendTimer > 0
                                    ? `Gửi lại mã sau ${resendTimer}s`
                                    : "Gửi lại mã"}
                            </button>
                        </div>
                        <button
                            onClick={onBack}
                            disabled={loading}
                            className="w-full px-4 py-3 border border-gray-300 rounded-xl text-gray-700
                   hover:bg-gray-50 transition-colors duration-300 disabled:opacity-50"
                        >
                            Quay lại
                        </button>
                    </div>
                </div>
            </main>
        </div>
    );
};

export default OTPVerification;
```

### src\app\auth\register\page.js
```js
"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";
import {
    UserIcon,
    LockIcon,
    FacebookIcon,
    Loader2Icon,
    MailIcon,
    PhoneIcon,
} from "lucide-react";
import Link from "next/link";
import { FlameIcon, ArrowLeftIcon } from "lucide-react";
import OTPVerification from "../otp/OTPVerification.jsx";
import { showToast } from "@/lib/toast";

export default function Register() {
    const router = useRouter();
    const [loading, setLoading] = useState(false);
    const [showOTP, setShowOTP] = useState(false);
    const [formData, setFormData] = useState({
        email: "khanhace6222@gmail.com",
        password: "123123123",
        confirmPassword: "123123123",
    });
    const [error, setError] = useState("");

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: value,
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError("");
        setLoading(true);

        if (formData.password !== formData.confirmPassword) {
            setError("Mật khẩu xác nhận không khớp");
            showToast.error("Mật khẩu xác nhận không khớp");
            setLoading(false);
            return;
        }

        try {
            const res = await fetch("http://localhost:3001/api/auth/register", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    email: formData.email,
                    password: formData.password,
                    confirmPassword: formData.confirmPassword,
                }),
            });
            const data = await res.json();
            if (!res.ok) {
                throw new Error(data.message || "Đăng ký thất bại");
            }
            showToast.success("Mã OTP đã được gửi đến email của bạn");
            setShowOTP(true);
        } catch (err) {
            setError(err.message);
            showToast.error(err.message);
        } finally {
            setLoading(false);
        }
    };

    const handleVerifyOTP = async (otp) => {
        try {
            const res = await fetch("http://localhost:3001/api/auth/verify-otp", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    email: formData.email,
                    otp,
                }),
            });
            const data = await res.json();
            if (!res.ok) {
                throw new Error(data.message || "Xác thực OTP thất bại");
            }
            // Không hiển thị toast ở đây, sẽ hiển thị ở login page
            router.push("/auth/login?registered=true"); // Thêm query parameter
        } catch (err) {
            showToast.error(err.message);
            throw new Error(err.message);
        }
    };

    const handleResendOTP = async () => {
        try {
            const res = await fetch("http://localhost:3001/api/auth/send-verification-otp", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    email: formData.email,
                }),
            });
            const data = await res.json();
            if (!res.ok) {
                throw new Error(data.message || "Gửi lại OTP thất bại");
            }
            showToast.success("Mã OTP mới đã được gửi");
        } catch (err) {
            showToast.error(err.message);
            throw new Error(err.message);
        }
    };

    if (showOTP) {
        return (
            <OTPVerification
                email={formData.email}
                onVerify={handleVerifyOTP}
                onResend={handleResendOTP}
                onBack={() => setShowOTP(false)}
            />
        );
    }

    return (
        <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-white via-pink-50 to-rose-50 p-4 relative overflow-hidden">
            <div className="absolute inset-0 overflow-hidden pointer-events-none">
                <div className="absolute top-0 -right-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl" />
                <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl" />
            </div>
            <div className="w-full max-w-md relative">
                <div className="mb-12 text-center">
                    <div className="flex justify-center mb-4">
                        <div className="relative">
                            <FlameIcon className="h-16 w-16 text-transparent bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text animate-pulse" />
                            <div className="absolute inset-0 h-16 w-16 bg-[#FF5864]/20 rounded-full blur-xl animate-pulse" />
                        </div>
                    </div>
                    <h1 className="text-4xl font-bold text-transparent bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text">
                        DateViet
                    </h1>
                    <p className="mt-3 text-gray-600 text-lg">
                        Tạo tài khoản mới
                    </p>
                </div>
                <div className="space-y-6">
                    <form onSubmit={handleSubmit} className="space-y-4">
                        {error && <p className="text-red-500 text-center">{error}</p>}
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Email
                            </label>
                            <input
                                type="email"
                                name="email"
                                required
                                value={formData.email}
                                onChange={handleChange}
                                className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                                placeholder="Nhập email của bạn"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Mật khẩu
                            </label>
                            <input
                                type="password"
                                name="password"
                                required
                                value={formData.password}
                                onChange={handleChange}
                                className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                                placeholder="Tạo mật khẩu"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Xác nhận mật khẩu
                            </label>
                            <input
                                type="password"
                                name="confirmPassword"
                                required
                                value={formData.confirmPassword}
                                onChange={handleChange}
                                className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                                placeholder="Nhập lại mật khẩu"
                            />
                        </div>
                        <button
                            type="submit"
                            disabled={loading}
                            className="w-full bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white py-3 px-6 rounded-xl
                   font-medium hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5 disabled:opacity-70"
                        >
                            {loading ? (
                                <Loader2Icon className="h-5 w-5 animate-spin mx-auto" />
                            ) : (
                                "Đăng ký"
                            )}
                        </button>
                    </form>
                    <div className="relative">
                        <div className="absolute inset-0 flex items-center">
                            <div className="w-full border-t border-gray-300"></div>
                        </div>
                        <div className="relative flex justify-center text-sm">
                            <span className="px-2 bg-gradient-to-br from-white via-pink-50 to-rose-50 text-gray-500">
                                Hoặc đăng ký với
                            </span>
                        </div>
                    </div>
                    <div className="space-y-3">
                        <button
                            onClick={() => {}}
                            className="w-full flex items-center justify-center gap-3 bg-white py-3 px-6 rounded-xl 
                   border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300
                   hover:border-gray-300 hover:-translate-y-0.5"
                        >
                            <img
                                src="https://www.google.com/favicon.ico"
                                alt="Google"
                                className="w-5 h-5"
                            />
                            <span className="text-gray-700 font-medium">
                                Đăng ký với Google
                            </span>
                        </button>
                        <button
                            onClick={() => {}}
                            className="w-full flex items-center justify-center gap-3 bg-[#1877F2] py-3 px-6 rounded-xl 
                   shadow-sm hover:shadow-md transition-all duration-300 hover:-translate-y-0.5"
                        >
                            <FacebookIcon className="h-5 w-5 text-white" />
                            <span className="text-white font-medium">
                                Đăng ký với Facebook
                            </span>
                        </button>
                        <button
                            onClick={() => {}}
                            className="w-full flex items-center justify-center gap-3 bg-white py-3 px-6 rounded-xl 
                   border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300
                   hover:border-gray-300 hover:-translate-y-0.5"
                        >
                            <PhoneIcon className="h-5 w-5 text-gray-600" />
                            <span className="text-gray-700 font-medium">
                                Đăng ký với số điện thoại
                            </span>
                        </button>
                    </div>
                </div>
                <div className="mt-8 text-center">
                    <p className="text-gray-600">
                        Đã có tài khoản?
                        <Link href="/auth/login" className="ml-2 text-[#FF5864] font-medium hover:text-[#FF655B] transition-colors duration-300">
                            Đăng nhập
                        </Link>
                    </p>
                </div>
                <div className="mt-10 text-center">
                    <Link
                        href="/"
                        className="inline-flex items-center text-gray-600 hover:text-gray-800 transition-colors duration-300"
                    >
                        <ArrowLeftIcon className="h-4 w-4 mr-2" />
                        <span>Quay lại ứng dụng</span>
                    </Link>
                </div>
            </div>
        </div>
    );
}
```

### src\app\components\BottomNavigation.jsx
```jsx
import React from "react";
import { useRouter } from "next/navigation";

import { FlameIcon, MessageSquareIcon, UserIcon } from "lucide-react";
const BottomNavigation = ({ activeTab }) => {
    const navigate = useRouter();
    return (
        <div className="bg-white border-t border-gray-200 flex justify-around py-3">
            <button
                onClick={() => navigate("/discover")}
                className={`flex flex-col items-center ${
                    activeTab === "discover"
                        ? "text-[#FF5864]"
                        : "text-gray-500"
                }`}
            >
                <FlameIcon size={24} />
                <span className="text-xs mt-1">Discover</span>
            </button>
            <button
                onClick={() => navigate("/chats")}
                className={`flex flex-col items-center ${
                    activeTab === "chats" ? "text-[#FF5864]" : "text-gray-500"
                }`}
            >
                <MessageSquareIcon size={24} />
                <span className="text-xs mt-1">Chats</span>
            </button>
            <button
                onClick={() => navigate("/profile")}
                className={`flex flex-col items-center ${
                    activeTab === "profile" ? "text-[#FF5864]" : "text-gray-500"
                }`}
            >
                <UserIcon size={24} />
                <span className="text-xs mt-1">Profile</span>
            </button>
        </div>
    );
};
export default BottomNavigation;

```

### src\app\components\MatchModal.jsx
```jsx
import React, { useEffect } from "react";
import { HeartIcon, MessageCircleIcon, XIcon } from "lucide-react";
import { useNavigate } from "react-router-dom";
const MatchModal = ({ user, onClose }) => {
    const navigate = useNavigate();
    // Add a small vibration effect when the match modal appears
    useEffect(() => {
        if (navigator.vibrate) {
            navigator.vibrate([100, 50, 100]);
        }
    }, []);
    const handleSendMessage = () => {
        onClose();
        navigate(`/chat/${user.id}`);
    };
    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/70">
            <div className="w-full max-w-sm bg-white rounded-xl overflow-hidden shadow-2xl animate-[heartbeat_1s_ease-in-out]">
                <div className="p-4 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-center">
                    <button
                        onClick={onClose}
                        className="absolute top-4 right-4 text-white"
                    >
                        <XIcon size={24} />
                    </button>
                    <HeartIcon size={50} className="mx-auto text-white mb-2" />
                    <h2 className="text-2xl font-bold text-white mb-1">
                        It's a Match!
                    </h2>
                    <p className="text-white/90">
                        You and {user.name} have liked each other.
                    </p>
                </div>
                <div className="flex justify-center -mt-10">
                    <div className="w-20 h-20 rounded-full border-4 border-white overflow-hidden">
                        <img
                            src={user.photos[0]}
                            alt={user.name}
                            className="w-full h-full object-cover"
                        />
                    </div>
                </div>
                <div className="p-6 text-center">
                    <h3 className="text-xl font-bold text-gray-800 mb-2">
                        {user.name}, {user.age}
                    </h3>
                    <p className="text-gray-600 mb-6 line-clamp-2">
                        {user.bio}
                    </p>
                    <div className="flex flex-col gap-3">
                        <button
                            onClick={handleSendMessage}
                            className="w-full py-3 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white rounded-lg flex items-center justify-center gap-2"
                        >
                            <MessageCircleIcon size={20} />
                            <span>Send Message</span>
                        </button>
                        <button
                            onClick={onClose}
                            className="w-full py-3 border border-gray-300 text-gray-700 rounded-lg"
                        >
                            Keep Swiping
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};
export default MatchModal;

```

### src\app\components\SwipeCard.jsx
```jsx
import React, {
    useEffect,
    useState,
    forwardRef,
    useImperativeHandle,
} from "react";
import {
    HeartIcon,
    XIcon,
    MapPinIcon,
    ChevronLeftIcon,
    ChevronRightIcon,
} from "lucide-react";
const SwipeCard = forwardRef(
    ({ profile, direction, onSwipeComplete, isBackground = false }, ref) => {
        const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);
        const [showDetails, setShowDetails] = useState(false);
        useEffect(() => {
            if (direction && !isBackground) {
                const timer = setTimeout(() => {
                    if (onSwipeComplete) onSwipeComplete();
                }, 300);
                return () => clearTimeout(timer);
            }
        }, [direction, onSwipeComplete, isBackground]);
        const nextPhoto = (e) => {
            e.stopPropagation();
            if (currentPhotoIndex < profile.photos.length - 1) {
                setCurrentPhotoIndex(currentPhotoIndex + 1);
            }
        };
        const prevPhoto = (e) => {
            e.stopPropagation();
            if (currentPhotoIndex > 0) {
                setCurrentPhotoIndex(currentPhotoIndex - 1);
            }
        };
        const toggleDetails = () => {
            if (!isBackground) {
                setShowDetails(!showDetails);
            }
        };
        const getSwipeClass = () => {
            if (!direction) return "";
            return direction === "right"
                ? "translate-x-[120%] rotate-12 transition-transform duration-300"
                : "translate-x-[-120%] -rotate-12 transition-transform duration-300";
        };
        return (
            <div
                className={`w-full max-w-sm aspect-[3/4] rounded-xl overflow-hidden shadow-xl relative 
          ${isBackground ? "scale-[0.95] opacity-70" : getSwipeClass()}`}
                onClick={toggleDetails}
            >
                {/* Photo */}
                <div className="w-full h-full relative">
                    <img
                        src={profile.photos[currentPhotoIndex]}
                        alt={profile.name}
                        className="w-full h-full object-cover"
                    />
                    {/* Photo navigation */}
                    {!isBackground && profile.photos.length > 1 && (
                        <>
                            <div
                                className="absolute top-0 left-0 w-1/3 h-full flex items-center"
                                onClick={prevPhoto}
                            >
                                {currentPhotoIndex > 0 && (
                                    <ChevronLeftIcon
                                        size={40}
                                        className="text-white drop-shadow-lg ml-2"
                                    />
                                )}
                            </div>
                            <div
                                className="absolute top-0 right-0 w-1/3 h-full flex items-center justify-end"
                                onClick={nextPhoto}
                            >
                                {currentPhotoIndex <
                                    profile.photos.length - 1 && (
                                    <ChevronRightIcon
                                        size={40}
                                        className="text-white drop-shadow-lg mr-2"
                                    />
                                )}
                            </div>
                        </>
                    )}
                    {/* Photo indicators */}
                    {!isBackground && profile.photos.length > 1 && (
                        <div className="absolute top-4 left-0 right-0 flex justify-center space-x-1">
                            {profile.photos.map((_, index) => (
                                <div
                                    key={index}
                                    className={`h-1 rounded-full ${
                                        index === currentPhotoIndex
                                            ? "w-6 bg-white"
                                            : "w-2 bg-white/50"
                                    }`}
                                />
                            ))}
                        </div>
                    )}
                    {/* Swipe indicators */}
                    {direction === "right" && !isBackground && (
                        <div className="absolute top-10 left-5 transform -rotate-12">
                            <div className="border-4 border-green-500 rounded-lg px-2 py-1">
                                <HeartIcon
                                    size={40}
                                    className="text-green-500"
                                />
                            </div>
                        </div>
                    )}
                    {direction === "left" && !isBackground && (
                        <div className="absolute top-10 right-5 transform rotate-12">
                            <div className="border-4 border-red-500 rounded-lg px-2 py-1">
                                <XIcon size={40} className="text-red-500" />
                            </div>
                        </div>
                    )}
                    {/* Match percentage */}
                    {!isBackground && (
                        <div className="absolute top-4 right-4 bg-[#FF5864] text-white px-2 py-1 rounded-full text-sm font-bold">
                            {profile.matchPercent}% Match
                        </div>
                    )}
                    {/* Basic info overlay */}
                    <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white">
                        <h2 className="text-2xl font-bold">
                            {profile.name}, {profile.age}
                        </h2>
                        <div className="flex items-center mt-1">
                            <MapPinIcon size={16} className="mr-1" />
                            <span className="text-sm">
                                {profile.distance} km away
                            </span>
                        </div>
                    </div>
                </div>
                {/* Details panel (slides up when card is tapped) */}
                {!isBackground && (
                    <div
                        className={`absolute bottom-0 left-0 right-0 bg-white rounded-t-xl p-4 transform transition-transform duration-300 
              ${showDetails ? "translate-y-0" : "translate-y-full"}`}
                        style={{
                            height: "70%",
                        }}
                    >
                        <div className="w-12 h-1 bg-gray-300 rounded-full mx-auto mb-4"></div>
                        <h2 className="text-xl font-bold text-gray-800">
                            {profile.name}, {profile.age}
                        </h2>
                        <div className="flex items-center text-gray-600 mb-4">
                            <MapPinIcon size={16} className="mr-1" />
                            <span className="text-sm">
                                {profile.distance} km away
                            </span>
                        </div>
                        <h3 className="font-semibold text-gray-800 mb-2">
                            About
                        </h3>
                        <p className="text-gray-600 mb-4">{profile.bio}</p>
                        <h3 className="font-semibold text-gray-800 mb-2">
                            Interests
                        </h3>
                        <div className="flex flex-wrap gap-2">
                            {profile.interests.map((interest) => (
                                <div
                                    key={interest}
                                    className="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm"
                                >
                                    #{interest}
                                </div>
                            ))}
                        </div>
                    </div>
                )}
            </div>
        );
    }
);
export default SwipeCard;

```

### src\app\components\UserDropdown.jsx
```jsx
import React, { useEffect, useRef } from "react";
import { useRouter } from "next/navigation";

import {
    UserIcon,
    SettingsIcon,
    HelpCircleIcon,
    LogOutIcon,
    HeartIcon,
    StarIcon,
} from "lucide-react";

const UserDropdown = ({ isOpen, onClose }) => {
    const navigate = useRouter();
    const dropdownRef = useRef(null);
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (
                dropdownRef.current &&
                !dropdownRef.current.contains(event.target)
            ) {
                onClose();
            }
        };
        if (isOpen) {
            document.addEventListener("mousedown", handleClickOutside);
        }
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, [isOpen, onClose]);
    if (!isOpen) return null;
    const menuItems = [
        {
            icon: <UserIcon size={20} />,
            label: "View Profile",
            onClick: () => navigate("/profile"),
        },
        {
            icon: <HeartIcon size={20} />,
            label: "My Matches",
            onClick: () => navigate("/matches"),
        },
        {
            icon: <StarIcon size={20} />,
            label: "Upgrade to Premium",
            onClick: () => navigate("/premium"),
        },
        {
            icon: <SettingsIcon size={20} />,
            label: "Settings",
            onClick: () => navigate("/settings"),
        },
        {
            icon: <HelpCircleIcon size={20} />,
            label: "Help & Support",
            onClick: () => navigate("/help"),
        },
    ];
    return (
        <div
            ref={dropdownRef}
            className="absolute right-2 top-14 w-64 bg-white rounded-xl shadow-lg overflow-hidden z-50 transform opacity-100 scale-100 transition-all duration-200"
        >
            <div className="p-4 bg-gradient-to-r from-[#FF5864] to-[#FF655B]">
                <div className="flex items-center space-x-3">
                    <div className="w-12 h-12 rounded-full bg-white/20 flex items-center justify-center">
                        <UserIcon size={24} className="text-white" />
                    </div>
                    <div>
                        <h3 className="text-white font-semibold">John Doe</h3>
                        <p className="text-white/80 text-sm">
                            View and edit profile
                        </p>
                    </div>
                </div>
            </div>
            <div className="py-2">
                {menuItems.map((item, index) => (
                    <button
                        key={index}
                        onClick={() => {
                            item.onClick();
                            onClose();
                        }}
                        className="w-full px-4 py-3 flex items-center space-x-3 hover:bg-gray-50 transition-colors text-gray-700"
                    >
                        <span className="text-gray-500">{item.icon}</span>
                        <span>{item.label}</span>
                    </button>
                ))}
                <div className="w-full h-px bg-gray-200 my-2"></div>
                <button
                    onClick={() => {
                        // Handle logout
                        navigate("/");
                        onClose();
                    }}
                    className="w-full px-4 py-3 flex items-center space-x-3 hover:bg-gray-50 transition-colors text-red-500"
                >
                    <LogOutIcon size={20} />
                    <span>Log Out</span>
                </button>
            </div>
        </div>
    );
};
export default UserDropdown;

```

### src\app\dashboard\page.js
```js
"use client";

import axios from "axios";
import { useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { getSocket, disconnectSocket } from "@/lib/socket";

export default function Dashboard() {
    const socket = getSocket();
    const router = useRouter();
    const [user, setUser] = useState();
    const [users, setUsers] = useState([]);
    const [usersChat, setUsersChat] = useState([]); //{receiverId, status: false}
    const [usersRequest, setUsersRequest] = useState([]); //{senderId, status: false}
    console.log(users);
    const [roomId, setRoomId] = useState("");
    // const [requestMessage, setRequestMessage] = useState("");
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        socket.on("request-chat", (message) => {
            console.log("Request chat from", message);
        });
        socket.on("receive-request-chat", (senderId) => {
            console.log("Response chat from", senderId);

            console.log(users);

            const user = users.find((user) => user.id === senderId);
            if (!user) {
                console.error("User not found:", senderId);
                return;
            }
            if (user.isReceive) return;

            user.isReceive = true;
            setUsers((prev) => [...prev]);
        });
        socket.on("receive-accept-chat", (data) => {
            const { receiverId, room } = data;
            console.log("Receive accept chat from", receiverId, room);

            const user = users.find((user) => user.id === receiverId);
            if (!user) {
                console.error("User not found:", receiverId);
                return;
            }
            if (user.isChat) return;
            user.isChat = true;
            user.room = room;
            setUsers((prev) => [...prev]);
        });
        socket.on("decline-chat", (receiver_id) => {
            alert("Declined chat from", receiver_id);
            const newUsers = usersChat.filter(
                (user) => user.id !== receiver_id
            );
            setUsersChat(newUsers);
        });
        return () => {
            socket.off("request-chat");
            socket.off("receive-request-chat");
            socket.off("decline-chat");
        };
    }, [users]);

    useEffect(() => {
        const fetchUser = async () => {
            const token = localStorage.getItem("token");

            if (!token) {
                router.push("/auth/login");
                return;
            }
            try {
                const res = await axios.get("http://localhost:3001/api/me", {
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${token}`,
                    },
                });
                const user = res.data;
                if (user.statusCode === 200) {
                    setUser(user);
                    localStorage.setItem("user", JSON.stringify(user));
                }
                const getUsersOnline = async () => {
                    const res = await axios.get(
                        "http://localhost:3001/api/users/online",
                        {
                            headers: {
                                "Content-Type": "application/json",
                                Authorization: `Bearer ${token}`,
                            },
                        }
                    );
                    if (res.data.statusCode === 200) {
                        setUsers(
                            res.data.users
                                ?.filter((item) => item.id !== user.id)
                                ?.map((item) => ({
                                    ...item,
                                    isRequest: false,
                                    isReceive: false,
                                    isChat: false,
                                    room: {},
                                }))
                        );
                    }
                };
                getUsersOnline();
                socket.emit("me", user);
                return () => {
                    socket.off("me");
                };
            } catch (error) {
                router.push("/auth/login");
            } finally {
                setLoading(false);
            }
        };

        fetchUser();
    }, []);

    // const getRoom = async (senderId, receiverId) => {};

    const handleChat = (receiverId) => {
        const user = users.find((user) => user.id === receiverId);

        router.push(`/chat/${user.room.id}`);
    };

    const handleRequest = (receiverId) => {
        const user = users.find((user) => user.id === receiverId);
        if (user?.isRequest) {
            alert("You already have a chat request with this user.");
            return;
        }
        console.log(user);

        user.isRequest = true;
        socket.emit("request-chat", receiverId);
        setUsers((prev) => [...prev]);
    };

    const handleAccept = (senderId) => {
        // TODO: Accept chat request
        console.log("Accept chat request");
        socket.emit("accept-chat", senderId);

        // router.push(`/chat/${roomId}`);
    };

    const handleDecline = (senderId) => {
        const newUser = usersRequest.filter(
            (user) => user.senderId !== senderId
        );
        setUsersRequest(newUser);
        socket.emit("decline-chat", senderId);
    };

    const logout = () => {
        socket.emit("logout");
        disconnectSocket();
        localStorage.removeItem("token");
        localStorage.removeItem("user");
        router.push("/auth/login");
    };

    // if (loading) return <p>Loading...</p>;

    return (
        <main className="max-w-4xl p-8 mx-auto">
            <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
                {/* Header Section */}
                <div className="bg-gradient-to-r from-blue-500 to-blue-600 p-6">
                    <h1 className="text-3xl font-bold text-white text-center">
                        🎯 Dashboard
                    </h1>
                    <div className="mt-4 bg-white/10 backdrop-blur-sm rounded-xl p-4 text-center">
                        <p className="text-xl text-white">
                            Welcome,{" "}
                            <span className="font-semibold">{user?.name}</span>!
                        </p>
                        <button
                            onClick={logout}
                            className="mt-4 px-6 py-2 bg-red-500 text-white rounded-lg 
                                     hover:bg-red-600 transform hover:scale-105 
                                     transition-all duration-200 font-medium"
                        >
                            Logout
                        </button>
                    </div>
                </div>

                {/* Chat Requests Section */}
                {users && users.some((u) => u.isReceive) && (
                    <div className="p-6 border-b">
                        <div className="bg-yellow-50 rounded-xl overflow-hidden">
                            <div className="bg-yellow-100 px-4 py-2">
                                <h3 className="text-yellow-800 font-medium">
                                    📬 New Chat Requests
                                </h3>
                            </div>
                            <ul className="divide-y divide-yellow-100">
                                {users
                                    .filter((u) => u.isReceive)
                                    .map((u) => (
                                        <li
                                            key={u.id}
                                            className="p-4 flex items-center justify-between"
                                        >
                                            <span className="text-gray-700">
                                                {u.display_name} wants to chat
                                                with you
                                            </span>
                                            <div className="space-x-2">
                                                <button
                                                    onClick={() =>
                                                        handleAccept(u.id)
                                                    }
                                                    className="px-4 py-1.5 bg-green-500 text-white rounded-lg
                                                             hover:bg-green-600 transition-colors"
                                                >
                                                    Accept
                                                </button>
                                                <button
                                                    onClick={() =>
                                                        handleDecline(u.id)
                                                    }
                                                    className="px-4 py-1.5 bg-gray-500 text-white rounded-lg
                                                             hover:bg-gray-600 transition-colors"
                                                >
                                                    Decline
                                                </button>
                                            </div>
                                        </li>
                                    ))}
                            </ul>
                        </div>
                    </div>
                )}

                {/* Online Users Section */}
                <div className="p-6">
                    <h2 className="text-xl font-semibold text-gray-800 mb-4">
                        🟢 Online Users
                    </h2>
                    {users.length === 0 ? (
                        <div className="text-center py-8 bg-gray-50 rounded-xl">
                            <p className="text-gray-500 italic">
                                No users online
                            </p>
                        </div>
                    ) : (
                        <ul className="divide-y divide-gray-100 bg-gray-50 rounded-xl overflow-hidden">
                            {users.map((u) => (
                                <li
                                    key={u.id}
                                    className="flex items-center justify-between p-4 hover:bg-gray-100 transition-colors"
                                >
                                    <div className="flex items-center gap-3">
                                        <span className="text-green-500 text-lg">
                                            ●
                                        </span>
                                        <span className="font-medium text-gray-700">
                                            {u.display_name}
                                        </span>
                                    </div>
                                    {u.isChat ? (
                                        <button
                                            onClick={() => handleChat(u.id)}
                                            className="px-4 py-1.5 bg-blue-500 text-white rounded-lg
                                                     hover:bg-blue-600 transition-all duration-200
                                                     transform hover:scale-105"
                                        >
                                            Chat
                                        </button>
                                    ) : (
                                        <button
                                            onClick={() => handleRequest(u.id)}
                                            className={`px-4 py-1.5 rounded-lg transition-all duration-200
                                                      transform hover:scale-105 ${
                                                          u.isRequest
                                                              ? "bg-gray-500 text-white hover:bg-gray-600"
                                                              : "bg-blue-500 text-white hover:bg-blue-600"
                                                      }`}
                                        >
                                            {u.isRequest
                                                ? "Requested"
                                                : "Request"}
                                        </button>
                                    )}
                                </li>
                            ))}
                        </ul>
                    )}
                </div>
            </div>
        </main>
    );
}

```

### src\app\profile-setup\page.js
```js
import { MetadataProvider } from "@/hooks/useMetadata";
import ProfileSetup from "./components/ProfileSetup";
import { setupAxios } from "@/app/auth/_helpers";
import axios from "axios";
import { AuthProvider } from "@/hooks/useAuth";
setupAxios(axios);
export default function ProfileSetupPage() {
    return (
        <AuthProvider>
            <MetadataProvider>
                <ProfileSetup />
            </MetadataProvider>
        </AuthProvider>
    );
}
```

### src\app\profile-setup\components\BasicInfo.js
```js
import React from "react";
import { CrownIcon } from "lucide-react";
const BasicInfo = ({ formData, setFormData }) => {
    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: value,
        }));
    };
    return (
        <div className="space-y-6">
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Tên của bạn
                </label>
                <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    placeholder="Nhập tên của bạn"
                    className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                />
            </div>
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Ngày sinh
                </label>
                <input
                    type="date"
                    name="birthday"
                    value={formData.birthday}
                    onChange={handleChange}
                    className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                />
            </div>
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Giới tính
                </label>
                <div className="grid grid-cols-3 gap-3">
                    {["Nam", "Nữ", "Khác"].map((gender) => (
                        <button
                            key={gender}
                            type="button"
                            onClick={() =>
                                handleChange({
                                    target: {
                                        name: "gender",
                                        value: gender,
                                    },
                                })
                            }
                            className={`py-3 px-4 rounded-xl border ${
                                formData.gender === gender
                                    ? "border-[#FF5864] bg-[#FF5864]/5 text-[#FF5864]"
                                    : "border-gray-300 hover:border-gray-400"
                            }`}
                        >
                            {gender}
                        </button>
                    ))}
                </div>
            </div>
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Độ Tuổi Ưa Thích
                </label>
                <div className="flex items-center justify-between mb-2">
                    <span className="text-sm text-gray-500">18</span>
                    <span className="text-sm text-gray-500">32</span>
                </div>
                <input
                    type="range"
                    min="18"
                    max="32"
                    value={formData.ageRange || 25}
                    onChange={(e) =>
                        handleChange({
                            target: {
                                name: "ageRange",
                                value: e.target.value,
                            },
                        })
                    }
                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                />
            </div>
            <div className="p-4 bg-gradient-to-r from-amber-400 to-amber-600 rounded-xl">
                <div className="flex items-center gap-3">
                    <CrownIcon className="w-6 h-6 text-white" />
                    <div>
                        <h3 className="font-semibold text-white">
                            Tinder Gold™
                        </h3>
                        <p className="text-sm text-white/80">
                            Các lựa chọn tiêu chí giúp hiển thị những người hợp
                            gu của bạn
                        </p>
                    </div>
                </div>
            </div>
        </div>
    );
};
export default BasicInfo;

```

### src\app\profile-setup\components\BioInterests.js
```js
import React, { useEffect, useState } from "react";
const BioInterests = ({ metadata, formData, setFormData }) => {
    console.log(metadata);

    const [popularInterests, setPopularInterests] = useState([]);
    console.log(popularInterests);

    useEffect(() => {
        const data = metadata.favorites.map((favorite) => ({
            value: favorite.id,
            name: favorite.value,
        }));
        setPopularInterests(data);
    }, [metadata]);
    const handleBioChange = (e) => {
        setFormData((prev) => ({
            ...prev,
            bio: e.target.value,
        }));
    };
    const toggleInterest = (interest) => {
        setFormData((prev) => ({
            ...prev,
            interests: prev.interests.includes(interest)
                ? prev.interests.filter((i) => i !== interest)
                : [...prev.interests, interest],
        }));
    };
    return (
        <div className="space-y-6">
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Giới thiệu bản thân
                </label>
                <textarea
                    value={formData.bio}
                    onChange={handleBioChange}
                    placeholder="Hãy viết vài điều về bản thân..."
                    className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] 
                   focus:border-transparent resize-none"
                    rows={4}
                    maxLength={500}
                />
                <p className="mt-2 text-sm text-right text-gray-500">
                    {formData.bio.length}/500
                </p>
            </div>
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Sở thích của bạn
                </label>
                <p className="mb-4 text-sm text-gray-500">
                    Chọn các sở thích để tìm người phù hợp với bạn
                </p>
                <div className="flex flex-wrap gap-2">
                    {popularInterests.map(({ value, name }) => (
                        <button
                            key={value}
                            onClick={() => toggleInterest(value)}
                            className={`px-4 py-2 rounded-full text-sm transition-all duration-300
                       ${
                           formData.interests.includes(value)
                               ? "bg-[#FF5864] text-white"
                               : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                       }`}
                        >
                            {name}
                        </button>
                    ))}
                </div>
            </div>
        </div>
    );
};
export default BioInterests;

```

### src\app\profile-setup\components\Location.js
```js
import React from "react";
import { MapPinIcon } from "lucide-react";
const Location = ({ formData, setFormData }) => {
    const handleLocationChange = (e) => {
        setFormData((prev) => ({
            ...prev,
            location: e.target.value,
        }));
    };
    const handleRadiusChange = (e) => {
        setFormData((prev) => ({
            ...prev,
            searchRadius: parseInt(e.target.value),
        }));
    };
    return (
        <div className="space-y-6">
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Vị trí của bạn
                </label>
                <div className="relative">
                    <MapPinIcon className="absolute w-5 h-5 text-gray-400 transform -translate-y-1/2 left-4 top-1/2" />
                    <input
                        type="text"
                        value={formData.location}
                        onChange={handleLocationChange}
                        placeholder="Nhập địa chỉ của bạn"
                        className="w-full pl-12 pr-4 py-3 rounded-xl border border-gray-300 focus:ring-2 
                     focus:ring-[#FF5864] focus:border-transparent"
                    />
                </div>
            </div>
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Bán kính tìm kiếm
                </label>
                <div className="space-y-4">
                    <input
                        type="range"
                        min="1"
                        max="100"
                        value={formData.searchRadius}
                        onChange={handleRadiusChange}
                        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer
                     [&::-webkit-slider-thumb]:appearance-none
                     [&::-webkit-slider-thumb]:h-4
                     [&::-webkit-slider-thumb]:w-4
                     [&::-webkit-slider-thumb]:rounded-full
                     [&::-webkit-slider-thumb]:bg-[#FF5864]"
                    />
                    <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-500">1 km</span>
                        <span className="text-sm font-medium text-gray-700">
                            {formData.searchRadius} km
                        </span>
                        <span className="text-sm text-gray-500">100 km</span>
                    </div>
                </div>
            </div>
            <div className="p-4 bg-gray-50 rounded-xl">
                <p className="text-sm text-gray-600">
                    DateViet sẽ sử dụng vị trí của bạn để tìm kiếm những người
                    phù hợp trong khu vực. Bạn có thể thay đổi cài đặt này sau.
                </p>
            </div>
        </div>
    );
};
export default Location;

```

### src\app\profile-setup\components\PhotoUpload.js
```js
import React from "react";
import { ImageIcon, PlusIcon } from "lucide-react";

const PhotoUpload = ({ formData, setFormData }) => {
  const handlePhotoUpload = (e) => {
    const file = e.target.files[0];

    if (!file.type.match("image.*")) {
      alert("Vui lòng chỉ chọn file hình ảnh");
      return;
    }

    if (file.size > 5 * 1024 * 1024) {
      alert("Kích thước file không được vượt quá 5MB");
      return;
    }

    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setFormData((prev) => ({
          ...prev,
          photos: [...prev.photos, reader.result],
          photoFiles: [...prev.photoFiles, file],
        }));
      };
      reader.readAsDataURL(file);
    }
  };

  const removePhoto = (index) => {
    setFormData((prev) => ({
      ...prev,
      photos: prev.photos.filter((_, i) => i !== index),
      photoFiles: prev.photoFiles.filter((_, i) => i !== index),
    }));
  };

  // Hàm chuẩn hóa URL ảnh
  const normalizePhotoUrl = (photo, photoBase64) => {
    if (!photo) {
      console.warn("Photo is missing", { photo, photoBase64 });
      return "/default-avatar.jpg";
    }
    if (photo instanceof File) {
      return URL.createObjectURL(photo);
    }
    if (typeof photo === "string") {
      return photo.startsWith("http") ? photo : `http://localhost:3001${photo.toLowerCase()}`;
    }
    return photoBase64 || "/default-avatar.jpg";
  };

  console.log(formData.photoFiles);

  return (
    <div className="space-y-6">
      <div>
        <p className="mb-4 text-sm text-gray-600">
          Thêm ít nhất 2 ảnh để tiếp tục. Chọn ảnh đẹp nhất của bạn!
        </p>
        <div className="grid lg:grid-cols-3 gap-4">
          {[...Array(6)].map((_, index) => {
            const photo = formData.photoFiles[index];
            const photoBase64 = formData.photos[index];
            console.log(photo, "photo", index);

            return (
              <div
                key={index + 1}
                className="relative overflow-hidden aspect-square rounded-xl"
              >
                {photo ? (
                  <div className="relative h-full group">
                    <img
                      src={normalizePhotoUrl(photo, photoBase64)}
                      alt={`Photo ${index + 1}`}
                      className="object-cover w-full h-full order-2"
                      crossOrigin="anonymous"
                      onError={(e) => {
                        console.error(`Failed to load image: ${e.target.src}, error: ${e.type}, status: ${e.target.status || 'unknown'}`);
                        e.target.src = "/default-avatar.jpg";
                      }}
                    />
                    <button
                      onClick={() => removePhoto(index)}
                      className="absolute inset-0 flex items-center justify-center text-white transition-opacity opacity-0 bg-black/50 group-hover:opacity-100"
                    >
                      Xóa ảnh
                    </button>
                  </div>
                ) : (
                  <label className="flex flex-col items-center justify-center w-full h-full transition-colors border-2 border-gray-300 border-dashed cursor-pointer rounded-xl hover:bg-gray-50">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handlePhotoUpload}
                      className="hidden"
                    />
                    <PlusIcon className="w-8 h-8 text-gray-400" />
                  </label>
                )}
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default PhotoUpload;
```

### src\app\profile-setup\components\Preferences.js
```js
import React, { useState, useEffect } from "react";
import {
    MoonIcon,
    GraduationCapIcon,
    HomeIcon,
    HeartIcon,
    WineIcon,
    DumbbellIcon,
    UtensilsIcon,
    GlobeIcon,
    BedIcon,
    PawPrintIcon,
    BoxIcon,
    ChevronDownIcon,
    ChevronUpIcon,
    CheckIcon,
} from "lucide-react";
const preferenceOptions = {
    "Cung hoàng đạo": [],
    "Giáo dục": [],
    "Gia đình tương lai": [],
    "Kiểu tính cách": [],
    "Về việc uống bia rượu": [
        {
            value: 1,
            name: "Có",
        },
        {
            value: 2,
            name: "Không",
        },
    ],
    "Bạn có hay hút thuốc không?": [
        {
            value: 1,
            name: "Có",
        },
        {
            value: 2,
            name: "Không",
        },
    ],
    "Tập luyện": [
        {
            value: 1,
            name: "Có",
        },
        {
            value: 2,
            name: "Không",
        },
    ],
    "Chế độ ăn uống": [],
    "Truyền thông xã hội": [],
    "Thói quen ngủ": [],
    "Thú cưng": [],
};
const PreferenceItem = ({
    icon: Icon,
    label,
    onClick,
    selected,
    expanded,
    selectedOption,
    onToggleExpand,
}) => {
    const currentSelectedOptionName = preferenceOptions[label].find(
        ({ value }) => value === selectedOption
    );
    return (
        <div className="space-y-2">
            <button
                onClick={onToggleExpand}
                className={`flex items-center justify-between w-full p-4 rounded-xl border 
            ${selected ? "border-[#FF5864] bg-[#FF5864]/5" : "border-gray-300"} 
            hover:border-gray-400 transition-colors`}
            >
                <div className="flex items-center gap-3">
                    <Icon className="w-5 h-5 text-gray-600" />
                    <div className="text-left">
                        <span className="text-gray-900">{label}</span>
                        {selectedOption && (
                            <p className="text-sm text-gray-500">
                                {currentSelectedOptionName?.name}
                            </p>
                        )}
                    </div>
                </div>
                {expanded ? (
                    <ChevronUpIcon className="w-5 h-5 text-gray-400" />
                ) : (
                    <ChevronDownIcon className="w-5 h-5 text-gray-400" />
                )}
            </button>
            {expanded && (
                <div className="p-3 ml-1 space-y-2 bg-gray-50 rounded-xl animate-scale-up">
                    {preferenceOptions[label].map(({ value, name }) => (
                        <button
                            key={value}
                            onClick={() => onClick(value)}
                            className={`flex items-center justify-between w-full p-3 rounded-lg
                 ${
                     selectedOption === value
                         ? "bg-[#FF5864] text-white"
                         : "hover:bg-gray-100"
                 }
                 transition-colors duration-200`}
                        >
                            <span>{name}</span>
                            {selectedOption === value && (
                                <CheckIcon className="w-4 h-4 text-white" />
                            )}
                        </button>
                    ))}
                </div>
            )}
        </div>
    );
};
const Preferences = ({ metadata, formData, setFormData }) => {
    useEffect(() => {
        const mappping = [
            { label: "Cung hoàng đạo", key: "zodiacs" },
            { label: "Giáo dục", key: "educations" },
            { label: "Gia đình tương lai", key: "futureFamilies" },
            {
                label: "Kiểu tính cách",
                key: "characters",
            },
            { label: "Chế độ ăn uống", key: "diets" },
            { label: "Truyền thông xã hội", key: "snus" },
            { label: "Thói quen ngủ", key: "sleeps" },
            { label: "Thú cưng", key: "pets" },
        ];
        mappping.forEach((item) => {
            preferenceOptions[item?.label] = metadata[item?.key].map(
                (item) => ({ value: item.id, name: item.value })
            );
        });
    }, [metadata]);
    const [expandedItem, setExpandedItem] = useState(null);
    const handleOptionSelect = (preference, value) => {
        setFormData((prev) => ({
            ...prev,
            preferences: {
                ...prev.preferences,
                [preference]: value,
            },
        }));
    };
    const preferences = [
        {
            icon: MoonIcon,
            label: "Cung hoàng đạo",
        },
        {
            icon: GraduationCapIcon,
            label: "Giáo dục",
        },
        {
            icon: HomeIcon,
            label: "Gia đình tương lai",
        },
        {
            icon: HeartIcon,
            label: "Kiểu tính cách",
        },
        {
            icon: WineIcon,
            label: "Về việc uống bia rượu",
        },
        {
            icon: BoxIcon,
            label: "Bạn có hay hút thuốc không?",
        },
        {
            icon: DumbbellIcon,
            label: "Tập luyện",
        },
        {
            icon: UtensilsIcon,
            label: "Chế độ ăn uống",
        },
        {
            icon: GlobeIcon,
            label: "Truyền thông xã hội",
        },
        {
            icon: BedIcon,
            label: "Thói quen ngủ",
        },
        {
            icon: PawPrintIcon,
            label: "Thú cưng",
        },
    ];

    return (
        <div className="space-y-4">
            <p className="mb-4 text-sm text-gray-500">
                Thêm chi tiết để tìm kiếm người phù hợp hơn
            </p>
            {preferences.map((pref) => {
                return (
                    <PreferenceItem
                        key={pref.label}
                        icon={pref.icon}
                        label={pref.label}
                        selected={formData.preferences?.[pref.label]}
                        expanded={expandedItem === pref.label}
                        selectedOption={formData.preferences?.[pref.label]}
                        onToggleExpand={() =>
                            setExpandedItem(
                                expandedItem === pref.label ? null : pref.label
                            )
                        }
                        onClick={(value) =>
                            handleOptionSelect(pref.label, value)
                        }
                    />
                );
            })}
        </div>
    );
};
export default Preferences;

```

### src\app\profile-setup\components\ProfileSetup.js
```js
"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import { ArrowLeftIcon, ArrowRightIcon, FlameIcon } from "lucide-react";
import Steps from "./Steps";
import BasicInfo from "./BasicInfo";
import PhotoUpload from "./PhotoUpload";
import BioInterests from "./BioInterests";
import Location from "./Location";
import Preferences from "./Preferences";
import { useMetadata } from "@/hooks/useMetadata";
import { useRouter } from "next/navigation";
import { useAuth } from "@/hooks/useAuth";

import { setupAxios } from "@/app/auth/_helpers";
import axios from "axios";
setupAxios(axios);

const genderMap = { Nam: "male", Nữ: "female", Khác: "other" };

const ProfileSetup = () => {
    const router = useRouter();
    const { auth, currentUser } = useAuth();
    const metadata = useMetadata();
    const formDataMap = {
        zodiacId: "Cung hoàng đạo",
        educationId: "Giáo dục",
        futureFamilyId: "Gia đình tương lai",
        characterId: "Kiểu tính cách",
        drink: "Về việc uống bia rượu",
        smoke: "Bạn có hay hút thuốc không?",
        train: "Tập luyện",
        dietId: "Chế độ ăn uống",
        snuId: "Truyền thông xã hội",
        sleepId: "Thói quen ngủ",
        petId: "Thú cưng",
    };
    const [currentStep, setCurrentStep] = useState(0);
    const [formData, setFormData] = useState({
        name: currentUser?.displayName || "",
        birthday: "",
        gender: currentUser?.gender
            ? Object.keys(genderMap).find(
                  (key) => genderMap[key] === currentUser.gender
              )
            : "Nam",
        ageRange: currentUser?.age || 18,
        photos: [],
        photoFiles: [],
        bio: "",
        interests: [],
        location: "",
        searchRadius: 10,
        preferences: Object.entries(formDataMap).reduce((acc, [key, value]) => {
            if (currentUser && currentUser[key] !== undefined) {
                if (key === "drink" || key === "smoke" || key === "train") {
                    acc[value] = currentUser[key] === false ? 2 : 1;
                } else {
                    acc[value] = currentUser[key];
                }
            }
            return acc;
        }, {}),
    });

    useEffect(() => {
        if (currentUser) {
            console.log("Current user:", JSON.stringify(currentUser, null, 2));
            let formattedBirthday = "";
            if (currentUser.birthday) {
                try {
                    const date = new Date(currentUser.birthday);
                    if (!isNaN(date.getTime())) {
                        formattedBirthday = date.toISOString().split("T")[0];
                    }
                } catch (error) {
                    console.error("Error formatting birthday:", error);
                }
            }
            const photoUrls = Array.isArray(currentUser?.photos)
                ? currentUser.photos.map((photo) => photo?.url || "").filter(Boolean)
                : [];
            const newFormData = {
                name: currentUser.displayName || "",
                birthday: formattedBirthday,
                gender: currentUser.gender
                    ? Object.keys(genderMap).find(
                          (key) => genderMap[key] === currentUser.gender
                      )
                    : "Nam",
                ageRange: currentUser.age || 18,
                photoFiles: photoUrls,
                photos: photoUrls,
                bio: currentUser.aboutMe || "",
                interests: Array.isArray(currentUser.favorites) ? currentUser.favorites : [],
                location: currentUser.location || "",
                searchRadius: currentUser.searchRadius || 10,
                preferences: Object.entries(formDataMap).reduce(
                    (acc, [key, value]) => {
                        if (currentUser && currentUser[key] !== undefined) {
                            if (key === "drink" || key === "smoke" || key === "train") {
                                acc[value] = currentUser[key] === false ? 2 : 1;
                            } else {
                                acc[value] = currentUser[key];
                            }
                        }
                        return acc;
                    },
                    {}
                ),
            };
            console.log("Updated formData:", JSON.stringify(newFormData, null, 2));
            setFormData(newFormData);
        }
    }, [currentUser]);

    const steps = [
        {
            title: "Thông tin cơ bản",
            component: BasicInfo,
        },
        {
            title: "Ảnh của bạn",
            component: PhotoUpload,
        },
        {
            title: "Sở thích & Tiêu chí",
            component: Preferences,
        },
        {
            title: "Giới thiệu bản thân",
            component: BioInterests,
        },
        {
            title: "Vị trí",
            component: Location,
        },
    ];

    const handleNext = () => {
        if (currentStep < steps.length - 1) {
            setCurrentStep(currentStep + 1);
        }
    };

    const handlePrevious = () => {
        if (currentStep > 0) {
            setCurrentStep(currentStep - 1);
        }
    };

    const handleComplete = async () => {
        function transformUserData(input) {
            let birthdayDate = null;
            if (input.birthday) {
                try {
                    birthdayDate = new Date(input.birthday);
                    if (isNaN(birthdayDate.getTime())) {
                        console.error("Invalid date format for birthday:", input.birthday);
                        birthdayDate = null;
                    }
                } catch (error) {
                    console.error("Error parsing birthday date:", error);
                }
            }
            const result = {
                user: {
                    id: currentUser?.id,
                    displayName: input.name || "",
                    gender: genderMap[input.gender] || "other",
                    preferredGender: genderMap[input.gender] || "other",
                    name: input.name || "",
                    age: parseInt(input.ageRange) || 18,
                    aboutMe: input.bio || "",
                    location: input.location || "",
                    birthday: birthdayDate ? birthdayDate.toISOString() : null,
                    languageId: parseInt(input.preferences["Ngôn ngữ"]) || 1,
                    religionId: parseInt(input.preferences["Tôn giáo"]) || 2,
                    careerId: parseInt(input.preferences["Nghề nghiệp"]) || 1,
                    educationId: parseInt(input.preferences["Giáo dục"]) || 1,
                    zodiacId: parseInt(input.preferences["Cung hoàng đạo"]) || 1,
                    characterId: parseInt(input.preferences["Kiểu tính cách"]) || 1,
                    communicateStyleId: parseInt(input.preferences["Phong cách giao tiếp"]) || 1,
                    loveLanguageId: parseInt(input.preferences["Ngôn ngữ tình yêu"]) || 1,
                    futureFamilyId: parseInt(input.preferences["Gia đình tương lai"]) || 1,
                    drink: input.preferences["Về việc uống bia rượu"] === 2,
                    smoke: input.preferences["Bạn có hay hút thuốc không?"] === 2,
                    train: input.preferences["Tập luyện"] === 2,
                    petId: parseInt(input.preferences["Thú cưng"]) || 1,
                    dietId: parseInt(input.preferences["Chế độ ăn uống"]) || 1,
                    sleepId: parseInt(input.preferences["Thói quen ngủ"]) || 1,
                    snuId: parseInt(input.preferences["Truyền thông xã hội"]) || 1,
                    favorites: Array.isArray(input.interests) ? input.interests : [],
                    maxRadius: input.searchRadius || 10,
                    photos: [] // Sẽ được gán sau
                },
            };
            console.log("Transformed user data:", JSON.stringify(result, null, 2));
            return result;
        }

        async function retryRequest(fn, retries = 2, delay = 1000) {
            for (let i = 0; i < retries; i++) {
                try {
                    return await fn();
                } catch (error) {
                    if (i === retries - 1) throw error;
                    console.log(`Retrying request (${i + 1}/${retries})...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
        }

        try {
            if (!currentUser?.id) {
                throw new Error("User ID is missing");
            }
            if (!currentUser?.bioId) {
                throw new Error("Bio ID is missing");
            }
            if (!auth?.access_token) {
                throw new Error("Access token is missing");
            }

            const result = transformUserData(formData);
            const photos = Array.isArray(formData?.photoFiles) ? formData.photoFiles : [];
            console.log("Photos to process:", photos);

            if (photos.length > 0) {
                const formDataUpload = new FormData();
                formDataUpload.append("bioId", currentUser.bioId);

                // Lấy danh sách ảnh hiện có từ currentUser.photos
                const existingPhotos = Array.isArray(currentUser?.photos)
                    ? currentUser.photos.map((photo) => ({
                          id: photo.id,
                          url: photo.url,
                          is_profile_pic: photo.is_profile_pic,
                      }))
                    : [];
                const newPhotos = [];

                for (let i = 0; i < photos.length; i++) {
                    const photo = photos[i];
                    if (typeof photo === "string") {
                        // Tìm photo tương ứng trong existingPhotos
                        const existingPhoto = existingPhotos.find(p => p.url === photo);
                        if (existingPhoto) {
                            existingPhotos.push(existingPhoto);
                        } else {
                            existingPhotos.push({ url: photo, is_profile_pic: i === 0 });
                        }
                    } else if (photo instanceof File) {
                        newPhotos.push(photo);
                        formDataUpload.append("images", photo);
                    }
                }

                console.log("Existing photos:", existingPhotos);
                console.log("New photos to upload:", newPhotos.length);

                if (newPhotos.length > 0) {
                    console.log("Uploading photos...");
                    try {
                        const postPhotos = await retryRequest(() =>
                            axios.post(
                                "http://localhost:3001/api/upload/multiple",
                                formDataUpload,
                                {
                                    headers: {
                                        Authorization: `Bearer ${auth.access_token}`,
                                        "Content-Type": "multipart/form-data",
                                    },
                                }
                            )
                        );
                        console.log("Upload response:", JSON.stringify(postPhotos.data, null, 2));
                        result.user.photos = [
                            ...postPhotos.data.photos.map((photo) => ({
                                id: photo.id,
                                url: photo.url,
                                is_profile_pic: photo.is_profile_pic || false,
                            })),
                            ...existingPhotos.filter(p => !newPhotos.some(np => np.url === p.url)),
                        ];
                    } catch (uploadError) {
                        console.error("Photo upload error:", {
                            message: uploadError.message,
                            response: uploadError.response?.data,
                            status: uploadError.response?.status,
                        });
                        alert(`Lỗi khi upload ảnh: ${uploadError.response?.data?.message || uploadError.message}`);
                        throw uploadError;
                    }
                } else {
                    result.user.photos = existingPhotos;
                }
            }

            console.log("Profile update request:", JSON.stringify(result, null, 2));
            try {
                const res = await retryRequest(() =>
                    axios.put(
                        "http://localhost:3001/api/user/update-profile",
                        result,
                        {
                            headers: {
                                Authorization: `Bearer ${auth.access_token}`,
                            },
                        }
                    )
                );
                console.log("Profile update response:", JSON.stringify(res.data, null, 2));

                if (res?.data?.statusCode === 200) {
                    router.push("/");
                } else {
                    console.error("Unexpected response:", res.data);
                    alert("Cập nhật hồ sơ thất bại: Phản hồi không mong muốn từ server");
                    throw new Error("Unexpected response from server");
                }
            } catch (updateError) {
                console.error("Profile update error:", {
                    message: updateError.message,
                    response: updateError.response?.data,
                    status: updateError.response?.status,
                });
                alert(`Lỗi khi cập nhật hồ sơ: ${updateError.response?.data?.message || updateError.message}`);
                throw updateError;
            }
        } catch (error) {
            console.error("Error in handleComplete:", {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status,
                stack: error.stack,
            });
            alert(`Lỗi hệ thống: ${error.response?.data?.message || error.message}`);
            throw error;
        }
    };

    const CurrentStepComponent = steps[currentStep].component;

    return (
        <div className="flex flex-col min-h-screen bg-gradient-to-br from-white via-pink-50 to-rose-50">
            <header className="sticky top-0 z-10 shadow-sm bg-white/80 backdrop-blur-md">
                <div className="container flex items-center justify-between px-4 py-3 mx-auto">
                    <div className="flex items-center">
                        {currentStep > 0 ? (
                            <button
                                onClick={handlePrevious}
                                className="p-2 transition-colors rounded-full hover:bg-gray-100"
                            >
                                <ArrowLeftIcon className="w-6 h-6 text-gray-600" />
                            </button>
                        ) : (
                            <Link href="/" className="flex items-center gap-2">
                                <FlameIcon className="h-6 w-6 text-[#FF5864]" />
                                <span className="font-bold text-transparent bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text">
                                    DateViet
                                </span>
                            </Link>
                        )}
                    </div>
                    <Steps currentStep={currentStep} totalSteps={steps.length} />
                    <div className="w-10" />
                </div>
            </header>
            <main className="flex-grow container mx-auto max-w-[700px] px-4 py-8">
                <div className="max-w-2xl mx-auto">
                    <h1 className="mb-6 text-2xl font-bold text-gray-900">
                        {steps[currentStep].title}
                    </h1>
                    <div className="p-6 bg-white shadow-lg rounded-2xl">
                        <CurrentStepComponent
                            metadata={metadata?.metadata}
                            formData={formData}
                            setFormData={setFormData}
                        />
                    </div>
                </div>
            </main>
            <footer className="sticky bottom-0 border-t border-gray-200 bg-white/80 backdrop-blur-md">
                <div className="container px-4 py-4 mx-auto">
                    <div className="max-w-2xl mx-auto">
                        {currentStep === steps.length - 1 ? (
                            <button
                                onClick={handleComplete}
                                className="w-full bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white py-4 px-6 rounded-xl font-medium hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5"
                            >
                                Hoàn tất
                            </button>
                        ) : (
                            <button
                                onClick={handleNext}
                                className="w-full bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white py-4 px-6 rounded-xl font-medium hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5 flex items-center justify-center gap-2"
                            >
                                Tiếp theo
                                <ArrowRightIcon className="w-5 h-5" />
                            </button>
                        )}
                    </div>
                </div>
            </footer>
        </div>
    );
};

export default ProfileSetup;
```

### src\app\profile-setup\components\Steps.js
```js
import React from "react";

const Steps = ({ currentStep, totalSteps }) => {
    return (
        <div className="flex items-center gap-2">
            {Array.from({
                length: totalSteps,
            }).map((_, index) => (
                <div
                    key={index}
                    className={`h-1.5 rounded-full transition-all duration-300 ${
                        index === currentStep
                            ? "w-6 bg-[#FF5864]"
                            : index < currentStep
                            ? "w-6 bg-[#FF5864]/60"
                            : "w-6 bg-gray-200"
                    }`}
                />
            ))}
        </div>
    );
};
export default Steps;

```

### src\app\report\page.js
```js
"use client";

import { useSearchParams } from "next/navigation";
import { useState } from "react";

export default function ReportPage() {
  const searchParams = useSearchParams();
  const reported_user = Number(searchParams.get("uid")) || null;

  const [reason, setReason] = useState("spam");
  const [details, setDetails] = useState("");
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!reported_user) {
      setMessage("Thiếu reported_user trên URL (?uid=...)");
      return;
    }

    setLoading(true);
    try {
      const res = await fetch("http://localhost:5000/api/reports", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          reason,
          details,
          reported_by: 1, // ⚠️ Tạm hardcode, bạn có thể lấy từ session/token sau
          reported_user,
        }),
      });

      const data = await res.json();
      if (res.ok) {
        setMessage(" Gửi báo cáo thành công!");
      } else {
        setMessage(` Lỗi: ${data.error}`);
      }
    } catch (err) {
      setMessage(" Lỗi kết nối server");
    } finally {
      setLoading(false);
    }
  };

  return (
    <main className="max-w-xl mx-auto p-6">
      <h1 className="text-xl font-bold mb-4"> Báo cáo người dùng ID {reported_user}</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <fieldset className="space-y-2">
          <legend className="font-semibold">Chọn lý do:</legend>
          {["spam", "abuse", "fake_profile", "inappropriate", "other"].map((r) => (
            <label key={r} className="block">
              <input
                type="radio"
                name="reason"
                value={r}
                checked={reason === r}
                onChange={(e) => setReason(e.target.value)}
              />{" "}
              {r === "other" ? "Khác" : r}
            </label>
          ))}
        </fieldset>

        {reason === "other" && (
          <textarea
            placeholder="Nhập lý do chi tiết..."
            className="w-full border rounded p-2"
            value={details}
            onChange={(e) => setDetails(e.target.value)}
            required
          />
        )}

        {reason !== "other" && (
          <input
            type="hidden"
            value={reason}
            onChange={(e) => setReason(e.target.value)}
          />
        )}

        <button
          type="submit"
          className="bg-red-500 text-white px-4 py-2 rounded disabled:opacity-50"
          disabled={loading}
        >
          {loading ? "Đang gửi..." : "Gửi báo cáo"}
        </button>
      </form>

      {message && <p className="mt-4 font-medium">{message}</p>}
    </main>
  );
}

```

### src\components\ChatWindow.jsx
```jsx
// src/components/ChatWindow.jsx

"use client";

import { useEffect, useRef, useState } from "react";
import { useRouter } from "next/navigation";
import axios from "axios";
import { getSocket } from "@/lib/socket";

export default function ChatWindow({ matchId, user }) {
    console.log(user);

    const router = useRouter();
    const [match, setMatch] = useState();
    console.log(match);

    const [messages, setMessages] = useState([]);
    const [message, setMessage] = useState("");
    const messagesEndRef = useRef(null);
    const socket = getSocket();

    useEffect(() => {
        socket.on("receive-message", (message) => {
            console.log(message);
            setMessages((prevMessages) => [...prevMessages, message]);
        });
        return () => {
            socket.off("receive-message");
        };
    }, []);

    useEffect(() => {
        socket.emit("me", user);
        return () => {
            socket.off("me");
        };
    }, [user]);

    useEffect(() => {
        const getMatch = async () => {
            const token = localStorage.getItem("token");

            if (!token) {
                router.push("/auth/login");
                return;
            }
            try {
                const res = await axios.get(
                    `http://localhost:3001/api/rooms/${matchId}`,
                    {
                        headers: {
                            "Content-Type": "application/json",
                            Authorization: `Bearer ${token}`,
                        },
                    }
                );
                setMatch(res.data.room);
            } catch (err) {
                if (err.response.status === 403) {
                    router.push("/auth/login");
                    return;
                }
                console.error("Failed to load match", err);
            }
        };
        getMatch();
        // Fetch message history
        const fetchMessages = async () => {
            if (!matchId) return;
            try {
                const token = localStorage.getItem("token");
                if (!token) {
                    router.push("/auth/login");
                    return;
                }
                const res = await axios(
                    `http://localhost:3001/api/messages?match_id=${matchId}`
                );
                setMessages(res.data);
            } catch (err) {
                console.error("Failed to load messages", err);
                // router.push("/auth/login");
            }
        };
        fetchMessages();
    }, [matchId]);

    useEffect(() => {
        const handleReceive = (message) => {
            if (message.match_id === matchId) {
                setMessages((prev) => [...prev, message]);
            }
        };

        socket.on("receiveMessage", handleReceive);
        return () => {
            socket.off("receiveMessage", handleReceive);
        };
    }, [matchId, socket]);

    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, [messages]);

    const handleSend = () => {
        if (!message.trim()) return;
        const data = {
            sender_id: user.id,
            receiver_id:
                match?.user_2_id === user.id
                    ? match?.user_1_id
                    : match?.user_2_id,
            match_id: matchId,
            content: message,
        };
        console.log(data);

        socket.emit("send-message", data);
        setMessage("");
    };

    return (
        <div className="w-full max-w-4xl bg-white rounded-xl shadow-lg overflow-hidden">
            {/* Chat Header */}
            <div className="bg-gradient-to-r from-blue-500 to-blue-600 p-4">
                <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
                            👤
                        </div>
                        <div className="text-white">
                            <p className="font-medium">
                                {match?.user_match_1?.id === user?.id
                                    ? match?.user_match_2?.display_name
                                    : match?.user_match_1?.display_name}
                            </p>
                            {/* <p className="text-xs text-white/70">
                                Room ID: {matchId}
                            </p> */}
                        </div>
                    </div>
                    <div className="flex items-center space-x-2">
                        <span className="inline-block w-2 h-2 bg-green-400 rounded-full"></span>
                        <span className="text-sm text-white/90">Online</span>
                    </div>
                </div>
            </div>

            {/* Messages Container */}
            <div className="flex-1 h-[600px] overflow-y-auto p-4 bg-gray-50">
                {messages.map((msg) => (
                    <div key={msg.id} className="mb-4">
                        {/* Message Bubble */}
                        <div
                            className={`flex flex-col ${
                                msg.sender?.id === user.id
                                    ? "items-end"
                                    : "items-start"
                            }`}
                        >
                            {/* User Name */}
                            {/* <span className="text-xs text-gray-500 mb-1 px-2">
                                {msg.sender?.id !== user.id
                                    ? msg.sender?.display_name
                                    : ""}
                            </span> */}

                            {/* Message Content */}
                            <div
                                className={`p-3 rounded-xl max-w-[70%] break-words ${
                                    msg.sender?.id === user.id
                                        ? "bg-blue-500 text-white rounded-tr-none"
                                        : "bg-gray-200 text-gray-800 rounded-tl-none"
                                }`}
                            >
                                <p className="text-sm whitespace-pre-wrap">
                                    {msg.content}
                                </p>
                            </div>

                            {/* Timestamp */}
                            <span className="text-xs text-gray-400 mt-1 px-2">
                                {new Date(msg.timestamp).toLocaleTimeString()}
                            </span>
                        </div>
                    </div>
                ))}
                <div ref={messagesEndRef} />
            </div>

            {/* Message Input */}
            <div className="p-4 bg-white border-t">
                <div className="flex gap-2">
                    <input
                        type="text"
                        placeholder="Type your message..."
                        value={message}
                        onChange={(e) => setMessage(e.target.value)}
                        onKeyDown={(e) => e.key === "Enter" && handleSend()}
                        className="flex-1 px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                    />
                    <button
                        onClick={handleSend}
                        disabled={!message.trim()}
                        className="px-6 py-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 
                                 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed
                                 flex items-center justify-center"
                    >
                        <span>Send</span>
                    </button>
                </div>
            </div>
        </div>
    );
}

```

### src\components\Loading.jsx
```jsx
"use client";

import React from "react";

function Loading({ fullScreen = false }) {
    return (
        <div
            className={`flex flex-col items-center justify-center ${
                fullScreen
                    ? "fixed inset-0 z-50 bg-white/80 backdrop-blur-sm"
                    : "min-h-[200px] w-full"
            }`}
        >
            <div className="relative">
                <div className="w-16 h-16 rounded-full border-4 border-t-transparent border-[#FF5864] animate-spin"></div>
            </div>
            <p className="mt-4 text-lg font-semibold bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text text-transparent animate-pulse">
                Đang tải...
            </p>
        </div>
    );
}

export default Loading;

```

### src\components\cards\ProfileCard.js
```js

"use client";

import React, { useState } from "react";
import { HeartIcon, XIcon, StarIcon } from "lucide-react";

const ProfileCard = ({ profile, onHandleMatch, onHandleNext, onSelectProfile }) => {
    const [currentPhoto, setCurrentPhoto] = useState(0);
    const [isLiked, setIsLiked] = useState(false);
    const [isNoped, setIsNoped] = useState(false);
    const [exitDirection, setExitDirection] = useState(null);

    const resetCardState = () => {
        setIsLiked(false);
        setIsNoped(false);
        setExitDirection(null);
    };

    const handleLike = () => {
        setIsLiked(true);
        onHandleMatch(profile.id, resetCardState);
    };

    const handleNope = () => {
        setIsNoped(true);
        setTimeout(() => {
            setIsNoped(false);
            setExitDirection(null);
            onHandleNext();
        }, 500);
    };

    const handleCardClick = (e) => {
        // Ngăn click vào nút Nope/Like kích hoạt detail
        if (e.target.closest("button")) return;
        console.log("Opening profile detail for user:", profile.id);
        onSelectProfile(profile);
    };

    return (
        <div
            className={`relative w-full max-w-sm rounded-3xl overflow-hidden shadow-2xl bg-white/90 backdrop-blur-sm 
                        will-change-[transform]
                        transform-gpu duration-500 ease-out
                        hover:shadow-[0_20px_50px_rgba(255,88,100,0.2)]
                        ${!exitDirection ? "hover:translate-y-[8px]" : ""}
                        cursor-pointer`}
            onClick={handleCardClick}
        >
            <div className="relative aspect-[3/4] bg-gray-200 group">
                <div
                    className="absolute inset-0 transition-transform duration-200 ease-out will-change-transform"
                    style={{
                        transform: "translate3d(0,0,0)",
                    }}
                >
                    <img
                        src={profile?.photos?.[currentPhoto]?.url}
                        alt={`${profile.name}'s photo`}
                        className="w-full h-full object-cover"
                        loading="eager"
                        style={{
                            transform: "translate3d(0,0,0)",
                        }}
                    />
                </div>
                <div className="absolute top-4 left-0 right-0 flex justify-center gap-2 px-4 z-20">
                    <div className="glass px-3 py-1.5 rounded-full flex gap-2">
                        {profile?.photos?.map((_, index) => (
                            <button
                                key={index}
                                onClick={(e) => {
                                    e.stopPropagation();
                                    setCurrentPhoto(index);
                                }}
                                className={`transform-gpu transition-all duration-200 ease-out
                                    ${index === currentPhoto ? "w-6 h-2 bg-white rounded-full" : "w-2 h-2 bg-white/50 rounded-full hover:bg-white/80"}`}
                            />
                        ))}
                    </div>
                </div>
                <div className="absolute bottom-0 left-0 right-0 glass-dark p-6 transform-gpu transition-transform duration-200 ease-out">
                    <div className="space-y-4">
                        <div className="flex items-center justify-between">
                            <h2 className="text-3xl font-bold text-white tracking-tight">
                                {profile.name}, {profile.age}
                            </h2>
                        </div>
                        <p className="text-sm text-white/90 flex items-center">
                            {profile.distance || "N/A"}
                        </p>
                        <div className="flex flex-wrap gap-2">
                            {profile.tags?.map((tag, index) => (
                                <span
                                    key={index}
                                    className="glass px-3 py-1 rounded-full text-white text-sm
                                        transform-gpu transition-all duration-200 ease-out
                                        hover:bg-white/30 hover:translate-y-[-2px]
                                        cursor-pointer"
                                >
                                    {tag}
                                </span>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
            <div className="p-6">
                <p className="text-gray-700 leading-relaxed">{profile.bio}</p>
            </div>
            <div className="flex justify-center gap-6 p-6">
                <button
                    onClick={(e) => {
                        e.stopPropagation();
                        handleNope();
                    }}
                    className="w-14 h-14 flex items-center justify-center rounded-full bg-white
                        will-change-transform
                        shadow-lg hover:shadow-xl transition-all duration-200 ease-out
                        hover:border-red-400 hover:-translate-y-1 group
                        relative before:absolute before:inset-0 before:rounded-full before:border-2
                        before:border-gray-300 before:transition-all before:duration-200
                        hover:before:border-red-400 hover:before:scale-110"
                >
                    <XIcon className="h-8 w-8 text-gray-400 group-hover:text-red-400 transition-colors duration-200" />
                </button>
                <button
                    onClick={(e) => {
                        e.stopPropagation();
                        handleLike();
                    }}
                    className="w-14 h-14 flex items-center justify-center rounded-full
                        will-change-transform
                        shadow-lg hover:shadow-xl transition-all duration-200 ease-out
                        hover:-translate-y-1 hover:scale-105 relative overflow-hidden
                        bg-gradient-to-r from-[#FF5864] to-[#FF655B]"
                >
                    <div className="absolute inset-0 bg-gradient-to-r from-[#FF655B] to-[#FF5864] transition-opacity duration-200 opacity-0 hover:opacity-100" />
                    <HeartIcon className="h-8 w-8 text-white relative z-10" />
                </button>
            </div>
            {isLiked && (
                <div className="absolute inset-0 z-50 glass-dark flex items-center justify-center">
                    <HeartIcon className="w-32 h-32 text-[#FF5864] animate-bounce" />
                    <div className="absolute top-8 right-8 glass px-6 py-2 rounded-full">
                        <span className="text-xl font-bold bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text text-transparent">
                            Loading...
                        </span>
                    </div>
                </div>
            )}
            {isNoped && (
                <div className="absolute inset-0 z-50 glass-dark flex items-center justify-center">
                    <XIcon className="w-32 h-32 text-red-500 animate-bounce" />
                    <div className="absolute top-8 left-8 glass px-6 py-2 rounded-full">
                        <span className="text-xl font-bold bg-gradient-to-r from-red-500 to-red-600 bg-clip-text text-transparent">
                            Loading...
                        </span>
                    </div>
                </div>
            )}
        </div>
    );
};

export default ProfileCard;

```

### src\components\cards\ProfileDetail.js
```js
import React, { useState } from "react";
import Image from "next/image";
import { useMetadata } from "@/hooks/useMetadata";
import { ArrowLeftIcon } from "lucide-react";

const ProfileDetail = ({ profile: initialProfile, onBack }) => {
    const { metadata, isLoading: metadataLoading } = useMetadata();
    const [currentPhoto, setCurrentPhoto] = useState(0);
    const [imageErrors, setImageErrors] = useState({});

    // Hàm chuẩn hóa URL ảnh
    const normalizePhotoUrl = (url) => {
        if (!url) {
            console.warn("Photo URL is empty, using default avatar");
            return "/default-avatar.jpg";
        }
        if (url.startsWith("http")) {
            return url; // Giữ nguyên URL tuyệt đối
        }
        // Loại bỏ /uploads lặp lại và chuẩn hóa đường dẫn
        let cleanUrl = url.replace(/^\/*uploads\/*/i, "");
        cleanUrl = cleanUrl.startsWith("/") ? cleanUrl : `/${cleanUrl}`;
        const finalUrl = `http://localhost:3001/uploads${cleanUrl.toLowerCase()}`;
        console.debug(`Normalized photo URL: ${finalUrl}`);
        return finalUrl;
    };

    // Kiểm tra xem URL có phải từ localhost:3001 không
    const isLocalImage = (url) => {
        return url && url.startsWith("http://localhost:3001");
    };

    // Chuẩn hóa profile để đảm bảo URL ảnh đúng
    const profile = {
        ...initialProfile,
        photos: Array.isArray(initialProfile.photos)
            ? initialProfile.photos.map((photo) => ({
                  ...photo,
                  url: normalizePhotoUrl(photo.url),
              }))
            : [],
    };

    console.log("Profile data:", JSON.stringify(profile, null, 2));
    console.log("Metadata:", JSON.stringify(metadata, null, 2));

    const getMetadataName = (id, type) => {
        if (metadataLoading) return "Đang tải...";
        if (!metadata || !id) {
            console.warn(`Missing metadata or ID for type: ${type}, id: ${id}`);
            return id ? `ID: ${id}` : "Chưa cập nhật";
        }
        const item = metadata[type]?.find((m) => m.id === id);
        if (!item) {
            console.warn(`No matching item for type: ${type}, id: ${id}`);
            return id ? `ID: ${id}` : "Chưa cập nhật";
        }
        return item.name || item.value || "Chưa cập nhật";
    };

    const profilePhoto = profile.photos?.length > 0
        ? normalizePhotoUrl(
              profile.photos.find((photo) => photo.is_profile_pic)?.url ||
              profile.photos[currentPhoto]?.url
          )
        : "/default-avatar.jpg";

    const handleImageError = (photoId) => {
        console.error(`Failed to load image for photo ID: ${photoId}`);
        setImageErrors((prev) => ({ ...prev, [photoId]: true }));
    };

    if (metadataLoading) {
        return (
            <div className="flex flex-col items-center justify-center h-screen">
                <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-[#FF5864]"></div>
                <p className="mt-4 text-gray-600">Đang tải dữ liệu...</p>
            </div>
        );
    }

    return (
        <div className="w-full max-w-md mx-auto bg-white rounded-3xl shadow-lg overflow-hidden">
            <div className="relative">
                <button
                    onClick={onBack}
                    className="absolute top-4 left-4 p-2 bg-white rounded-full shadow-md hover:bg-gray-100 transition-all duration-200"
                >
                    <ArrowLeftIcon className="w-5 h-5 text-gray-800" />
                </button>
                {isLocalImage(profilePhoto) && !imageErrors["profile"] ? (
                    <Image
                        src={profilePhoto}
                        alt={`${profile.name}'s profile`}
                        width={512}
                        height={320}
                        className="w-full h-80 object-cover"
                        onError={() => handleImageError("profile")}
                        placeholder="blur"
                        blurDataURL="/default-avatar.jpg"
                    />
                ) : (
                    <img
                        src={imageErrors["profile"] ? "/default-avatar.jpg" : profilePhoto}
                        alt={`${profile.name}'s profile`}
                        className="w-full h-80 object-cover"
                        onError={() => handleImageError("profile")}
                    />
                )}
                <div className="absolute bottom-2 left-1/2 transform -translate-x-1/2 flex gap-2">
                    {profile?.photos?.map((photo, index) => (
                        <button
                            key={photo.id}
                            onClick={() => setCurrentPhoto(index)}
                            className={`transition-all duration-200 ease-out ${
                                index === currentPhoto
                                    ? "w-6 h-2 bg-white rounded-full"
                                    : "w-2 h-2 bg-white/50 rounded-full hover:bg-white/80"
                            }`}
                        />
                    ))}
                </div>
            </div>
            <div className="p-6 space-y-6">
                <div>
                    <h2 className="text-2xl font-bold text-gray-800">
                        {profile.name}, {profile.age}
                    </h2>
                    <p className="text-gray-600">{profile.location || "Chưa cập nhật"}</p>
                    <div className="flex flex-wrap gap-2 mt-2">
                        {profile.favorites?.map((favId, index) => (
                            <span
                                key={index}
                                className="px-2 py-1 bg-gray-100 text-gray-700 rounded-full text-sm"
                            >
                                {getMetadataName(favId, "favorites")}
                            </span>
                        ))}
                    </div>
                </div>
                <div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-2">Giới thiệu</h3>
                    <p className="text-gray-600">{profile.aboutMe || "Chưa có mô tả"}</p>
                    <div className="grid grid-cols-2 gap-4 mt-4">
                        <div>
                            <span className="text-sm text-gray-500">Giới tính:</span>
                            <p className="text-gray-800">{profile.gender || "Chưa cập nhật"}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Tìm kiếm:</span>
                            <p className="text-gray-800">{getMetadataName(profile.searchingFor, "searchingFor")}</p>
                        </div>
                    </div>
                </div>
                <div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-2">Thông tin cơ bản</h3>
                    <div className="grid grid-cols-2 gap-4">
                        <div>
                            <span className="text-sm text-gray-500">Chiều cao:</span>
                            <p className="text-gray-800">{profile.height ? `${profile.height} cm` : "Chưa cập nhật"}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Ngôn ngữ:</span>
                            <p className="text-gray-800">{getMetadataName(profile.languageId, "languages")}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Tôn giáo:</span>
                            <p className="text-gray-800">{getMetadataName(profile.religionId, "religions")}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Nghề nghiệp:</span>
                            <p className="text-gray-800">{getMetadataName(profile.careerId, "careers")}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Học vấn:</span>
                            <p className="text-gray-800">{getMetadataName(profile.educationId, "educations")}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Cung hoàng đạo:</span>
                            <p className="text-gray-800">{getMetadataName(profile.zodiacId, "zodiacs")}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Tính cách:</span>
                            <p className="text-gray-800">{getMetadataName(profile.characterId, "characters")}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Phong cách giao tiếp:</span>
                            <p className="text-gray-800">{getMetadataName(profile.communicateStyleId, "communicateStyles")}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Ngôn ngữ yêu thương:</span>
                            <p className="text-gray-800">{getMetadataName(profile.loveLanguageId, "loveLanguages")}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Kế hoạch gia đình:</span>
                            <p className="text-gray-800">{getMetadataName(profile.futureFamilyId, "futureFamilies")}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Xu hướng tình dục:</span>
                            <p className="text-gray-800">{getMetadataName(profile.sexualOrientationId, "sexualOrientations")}</p>
                        </div>
                    </div>
                </div>
                <div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-2">Lối sống</h3>
                    <div className="grid grid-cols-2 gap-4">
                        <div>
                            <span className="text-sm text-gray-500">Uống rượu:</span>
                            <p className="text-gray-800">{profile.drink ? "Có" : profile.drink === false ? "Không" : "Chưa cập nhật"}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Hút thuốc:</span>
                            <p className="text-gray-800">{profile.smoke ? "Có" : profile.smoke === false ? "Không" : "Chưa cập nhật"}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Tập luyện:</span>
                            <p className="text-gray-800">{profile.train ? "Có" : profile.train === false ? "Không" : "Chưa cập nhật"}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Thú cưng:</span>
                            <p className="text-gray-800">{getMetadataName(profile.petId, "pets")}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Chế độ ăn:</span>
                            <p className="text-gray-800">{getMetadataName(profile.dietId, "diets")}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Thói quen ngủ:</span>
                            <p className="text-gray-800">{getMetadataName(profile.sleepId, "sleeps")}</p>
                        </div>
                        <div>
                            <span className="text-sm text-gray-500">Mạng xã hội:</span>
                            <p className="text-gray-800">{getMetadataName(profile.snuId, "snus")}</p>
                        </div>
                    </div>
                </div>
                <div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-2">Sở thích</h3>
                    {profile.favorites?.length > 0 ? (
                        <div className="flex flex-wrap gap-2">
                            {profile.favorites.map((favId, idx) => (
                                <span
                                    key={idx}
                                    className="px-2 py-1 bg-gray-100 text-gray-700 rounded-full text-sm"
                                >
                                    {getMetadataName(favId, "favorites")}
                                </span>
                            ))}
                        </div>
                    ) : (
                        <p className="text-gray-600">Chưa có sở thích nào được liệt kê</p>
                    )}
                </div>
                <div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-2">Ảnh</h3>
                    <div className="grid grid-cols-3 gap-2">
                        {profile.photos?.length > 0 ? (
                            profile.photos.map((photo, idx) => (
                                isLocalImage(photo.url) && !imageErrors[photo.id] ? (
                                    <Image
                                        key={photo.id}
                                        src={photo.url}
                                        alt={`Photo ${idx + 1}`}
                                        width={96}
                                        height={96}
                                        className="w-full h-24 object-cover rounded-lg"
                                        onError={() => handleImageError(photo.id)}
                                        placeholder="blur"
                                        blurDataURL="/default-avatar.jpg"
                                    />
                                ) : (
                                    <img
                                        key={photo.id}
                                        src={imageErrors[photo.id] ? "/default-avatar.jpg" : photo.url}
                                        alt={`Photo ${idx + 1}`}
                                        className="w-full h-24 object-cover rounded-lg"
                                        onError={() => handleImageError(photo.id)}
                                    />
                                )
                            ))
                        ) : (
                            <p className="text-gray-600">Chưa có ảnh nào</p>
                        )}
                    </div>
                </div>
                <div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-2">Mục tiêu mối quan hệ</h3>
                    <p className="text-gray-600">{getMetadataName(profile.searchingFor, "searchingFor")}</p>
                </div>
            </div>
        </div>
    );
};

export default ProfileDetail;
```

### src\components\layout\AppLayout.js
```js
import Footer from "@/ui/Footer";
import Header from "@/ui/Header";
import React from "react";

const AppLayout = ({ children }) => {
    return (
        <div className="flex flex-col min-h-screen bg-gradient-to-br from-white via-pink-50 to-rose-50 relative overflow-hidden">
            <div className="fixed inset-0 overflow-hidden pointer-events-none">
                <div className="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl animate-float" />
                <div
                    className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl animate-float"
                    style={{
                        animationDelay: "-3s",
                    }}
                />
                <div
                    className="absolute top-1/4 left-10 w-40 h-40 bg-gradient-to-r from-pink-200 to-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-float"
                    style={{
                        animationDelay: "-2s",
                    }}
                />
                <div
                    className="absolute bottom-1/4 right-10 w-40 h-40 bg-gradient-to-r from-rose-200 to-rose-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-float"
                    style={{
                        animationDelay: "-4s",
                    }}
                />
                <div className="absolute inset-0 bg-grid-pattern opacity-[0.02]" />
            </div>
            <Header />
            <main className="flex-grow flex items-center justify-center p-4 relative">
                {children}
            </main>
            <Footer />
        </div>
    );
};
export default AppLayout;

```

### src\context\ProfileContext.js
```js
"use client";

import axios from "axios";
import { createContext, useState, useContext, useEffect } from "react";

const ProfileContext = createContext(null);

export function ProfileProvider({ children }) {
    const [profileSetupData, setProfileSetupData] = useState();
    console.log("Profile setup data:", profileSetupData);

    useEffect(() => {
        console.warn("Skipping /api/profile-setup call as it does not exist");
        // const fetchProfileSetupData = async () => {
        //     try {
        //         console.log("Calling /api/profile-setup...");
        //         const response = await axios.get("http://localhost:3001/api/profile-setup");
        //         console.log("Profile setup response:", JSON.stringify(response.data, null, 2));
        //         setProfileSetupData(response.data.data);
        //     } catch (error) {
        //         console.error("Error fetching profile data:", {
        //             message: error.message,
        //             status: error.response?.status,
        //             data: error.response?.data ? JSON.stringify(error.response.data) : null,
        //             headers: error.response?.headers,
        //         });
        //     }
        // };
        // fetchProfileSetupData();
    }, []);

    return (
        <ProfileContext.Provider
            value={{ profileSetupData, setProfileSetupData }}
        >
            {children}
        </ProfileContext.Provider>
    );
}

export function useProfile() {
    return useContext(ProfileContext);
}
```

### src\hooks\useAuth.js
```js
"use client";

import axios from "axios";
import { createContext, useState, useContext, useEffect } from "react";
import { setupAxios } from "@/app/auth/_helpers";
import { useRouter } from "next/navigation";
import * as authHelper from "./_helper";

setupAxios(axios);
const AuthContext = createContext(null);

const LOGIN_URL = "http://localhost:3001/api/auth/login";
const GET_USER_URL = "http://localhost:3001/api/user/me";

export function AuthProvider({ children }) {
  const router = useRouter();
  const [auth, setAuth] = useState(authHelper.getAuth());
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);

  const verify = async (accessToken, shouldRedirect = false) => {
    console.log("Verifying token:", accessToken ? accessToken.slice(0, 20) + "..." : "missing");
    if (!accessToken) {
      console.warn("No access token available");
      saveAuth(undefined);
      setCurrentUser(null);
      setLoading(false);
      if (shouldRedirect) {
        router.push("/auth/login");
      }
      return;
    }
    try {
      setLoading(true);
      const { data: user } = await getUser(accessToken);
      console.log("User data:", JSON.stringify(user, null, 2));
      setCurrentUser(user.user);
      if (!user?.user) {
        console.error("User not found");
        saveAuth(undefined);
        setCurrentUser(null);
        router.push("/auth/login");
        return;
      }
      if (!user?.user?.isFullInformation) {
        console.log("User has incomplete profile, redirecting to profile-setup");
        router.push("/profile-setup");
        return;
      }
      if (shouldRedirect) {
        console.log("Redirecting to home");
        router.push("/");
      }
    } catch (error) {
      console.error("Error verifying user:", {
        message: error.message,
        response: error.response?.data,
      });
      saveAuth(undefined);
      setCurrentUser(null);
      if (error.response?.status === 404) {
        console.error("Endpoint /api/user/me not found. Check backend configuration.");
      }
      router.push("/auth/login");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const authData = authHelper.getAuth();
    console.log("Initial auth data:", authData);
    if (authData?.access_token) {
      verify(authData.access_token, false);
    } else {
      console.warn("No auth data found in localStorage");
      setLoading(false);
      router.push("/auth/login");
    }
  }, [router]);

  const saveAuth = (auth) => {
    console.log("Saving auth:", auth);
    if (auth) {
      authHelper.setAuth(auth);
      setAuth(auth);
    } else {
      authHelper.removeAuth();
      setAuth(null);
    }
  };

  const login = async (email, password) => {
    try {
        const { data: auth } = await axios.post(LOGIN_URL, {
            email,
            password,
        });
        const authData = {
            access_token: auth.token,
            token_type: "Token",
        };
        saveAuth(authData);
        await verify(auth.token, true);
        return true;
    } catch (error) {
        console.error("Login error:", {
            message: error.message,
            response: error.response?.data,
        });
        throw new Error(error.response?.data?.message || "Đăng nhập thất bại");
    }
};

  const getUser = async (accessToken) => {
    try {
      return await axios.get(GET_USER_URL, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      });
    } catch (error) {
      console.error("Get user error:", {
        message: error.message,
        response: error.response?.data,
      });
      throw error;
    }
  };

  const refreshUser = async () => {
    try {
      if (!auth?.access_token) {
        throw new Error("No access token available");
      }
      const { data: user } = await getUser(auth.access_token);
      setCurrentUser(user.user);
      console.log("User refreshed:", JSON.stringify(user.user, null, 2));
    } catch (error) {
      console.error("Error refreshing user:", {
        message: error.message,
        response: error.response?.data,
      });
      saveAuth(undefined);
      setCurrentUser(null);
      router.push("/auth/login");
    }
  };

  const logout = () => {
    console.log("Logging out");
    saveAuth(undefined);
    setCurrentUser(null);
    router.push("/auth/login");
  };

  return (
    <AuthContext.Provider value={{ auth, currentUser, loading, login, refreshUser, logout }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within a AuthProvider");
  }
  return context;
}
```

### src\hooks\useMetadata.js
```js
"use client";

import axios from "axios";
import { createContext, useState, useContext, useEffect, useMemo } from "react";
import { setupAxios } from "@/app/auth/_helpers";
import { useAuth } from "@/hooks/useAuth";

setupAxios(axios);
const MetadataContext = createContext(null);

export function MetadataProvider({ children }) {
    const { auth } = useAuth();
    const [metadata, setMetadata] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    const fetchMetadata = async (retries = 2, delay = 1000) => {
        setIsLoading(true);
        setError(null);
        try {
            const token = auth?.access_token;
            console.log("Fetching metadata with token:", token ? token.slice(0, 20) + "..." : "No token");
            const res = await axios.get("http://localhost:3001/api/metadata", {
                headers: token ? { Authorization: `Bearer ${token}` } : {},
            });
            console.log("Metadata response:", JSON.stringify(res.data, null, 2));
            setMetadata(res.data.metadata);
        } catch (err) {
            console.error("Failed to fetch metadata:", {
                message: err.message,
                response: err.response?.data,
                status: err.response?.status,
            });
            setError(err.message || "Failed to load metadata");
        } finally {
            setIsLoading(false); // Đảm bảo isLoading là false
        }
    };

    useEffect(() => {
        let isMounted = true;
        const loadMetadata = async () => {
            if (isMounted && auth?.access_token) {
                await fetchMetadata();
            } else if (isMounted) {
                setIsLoading(false);
            }
        };
        loadMetadata();
        return () => { isMounted = false; }; // Cleanup
    }, [auth?.access_token]);

    const value = useMemo(
        () => ({
            metadata,
            isLoading,
            error,
        }),
        [metadata, isLoading, error]
    );

    return (
        <MetadataContext.Provider value={value}>
            {children}
        </MetadataContext.Provider>
    );
}

export function useMetadata() {
    const context = useContext(MetadataContext);
    if (!context) {
        throw new Error("useMetadata must be used within a MetadataProvider");
    }
    return context;
}
```

### src\hooks\useRecommendations.js
```js
'use client';

import { useState, useEffect } from 'react';
import axios from 'axios';
import { useAuth } from './useAuth';

export function useRecommendations() {
  const { auth } = useAuth();
  const [recommendations, setRecommendations] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchRecommendations = async () => {
      setIsLoading(true);
      try {
        const response = await axios.get('http://localhost:3001/api/recommendations', {
          headers: {
            Authorization: `Bearer ${auth?.access_token}`,
          },
        });
        setRecommendations(response.data.data);
      } catch (err) {
        setError(err);
      } finally {
        setIsLoading(false);
      }
    };
    if (auth?.access_token) {
      fetchRecommendations();
    }
  }, [auth]);

  return { recommendations, isLoading, error };
}
```

### src\hooks\useSocket.js
```js
"use client";

import React, { createContext, useContext, useEffect, useState } from "react";
import { io } from "socket.io-client";
import { useAuth } from "@/hooks/useAuth";

const SocketContext = createContext();

export const SocketProvider = ({ children }) => {
    const [socket, setSocket] = useState(null);
    const { currentUser } = useAuth();

    useEffect(() => {
        if (!currentUser) return;
        const newSocket = io("http://localhost:3001", {
            autoConnect: false,
            reconnection: true,
        });

        newSocket.connect();

        newSocket.emit("me", currentUser);

        setSocket(newSocket);

        return () => newSocket.close();
    }, [currentUser]);

    return (
        <SocketContext.Provider value={socket}>
            {children}
        </SocketContext.Provider>
    );
};

export const useSocket = () => {
    const context = useContext(SocketContext);
    // if (!context) {
    //     throw new Error("useSocket must be used within a SocketProvider");
    // }
    return context;
};

```

### src\hooks\_helper.js
```js
import { getData, setData } from "@/utils/LocalStorage";

export const getAuth = () => {
    try {
        const auth = getData("AUTH_LOCAL_STORAGE_KEY");
        return auth || undefined; // Trả về undefined nếu auth là null
    } catch (error) {
        console.error("AUTH LOCAL STORAGE PARSE ERROR", error);
        return undefined;
    }
};

export const setAuth = (auth) => {
    setData("AUTH_LOCAL_STORAGE_KEY", auth);
};

export const removeAuth = () => {
    if (typeof window !== "undefined" && window.localStorage) {
        try {
            localStorage.removeItem("AUTH_LOCAL_STORAGE_KEY");
        } catch (error) {
            console.error("AUTH LOCAL STORAGE REMOVE ERROR", error);
        }
    }
};
```

### src\redux\store.js
```js
import { configureStore } from "@reduxjs/toolkit";
import authReducer from "./features/authSlice";

export const store = configureStore({
    reducer: {
        auth: authReducer,
    },
});

```

### src\redux\feature\authSlice.js
```js
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

const initialState = {
    user: null,
    token: null,
    loading: false,
    error: null,
};

export const loginUser = createAsyncThunk(
    "auth/login",
    async (credentials, { rejectWithValue }) => {
        try {
            const response = await fetch(
                "http://localhost:3001/api/auth/login",
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(credentials),
                }
            );

            const data = await response.json();
            if (!response.ok) throw new Error(data.message);

            return data;
        } catch (error) {
            return rejectWithValue(error.message);
        }
    }
);

export const registerUser = createAsyncThunk(
    "auth/register",
    async (userData, { rejectWithValue }) => {
        try {
            const response = await fetch(
                "http://localhost:3001/api/auth/register",
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(userData),
                }
            );

            const data = await response.json();
            if (!response.ok) throw new Error(data.message);

            return data;
        } catch (error) {
            return rejectWithValue(error.message);
        }
    }
);

const authSlice = createSlice({
    name: "auth",
    initialState,
    reducers: {
        logout: (state) => {
            state.user = null;
            state.token = null;
            localStorage.removeItem("token");
        },
        setCredentials: (state, action) => {
            const { user, token } = action.payload;
            state.user = user;
            state.token = token;
        },
    },
    extraReducers: (builder) => {
        builder
            .addCase(loginUser.pending, (state) => {
                state.loading = true;
                state.error = null;
            })
            .addCase(loginUser.fulfilled, (state, action) => {
                state.loading = false;
                state.user = action.payload.user;
                state.token = action.payload.token;
                localStorage.setItem("token", action.payload.token);
            })
            .addCase(loginUser.rejected, (state, action) => {
                state.loading = false;
                state.error = action.payload;
            })
            .addCase(registerUser.pending, (state) => {
                state.loading = true;
                state.error = null;
            })
            .addCase(registerUser.fulfilled, (state, action) => {
                state.loading = false;
                state.user = action.payload.user;
                state.token = action.payload.token;
                localStorage.setItem("token", action.payload.token);
            })
            .addCase(registerUser.rejected, (state, action) => {
                state.loading = false;
                state.error = action.payload;
            });
    },
});

export const { logout, setCredentials } = authSlice.actions;
export default authSlice.reducer;

```

### src\ui\FilterModal.js
```js
import React, { useState } from "react";
import { XIcon, SlidersIcon, CheckIcon, TrashIcon } from "lucide-react";

const FilterModal = ({ metadata, filtersData, isOpen, onHandleFilter, onClose }) => {
  const [filters, setFilters] = useState(filtersData || {});
  console.log("FilterModal filters:", filters);

  // Các trường chọn một giá trị, nhưng vẫn gửi dưới dạng mảng
  const singleSelectSections = [
    { id: "searchingForIds", label: "Đang tìm kiếm", options: metadata?.searchingFor },
    { id: "zodiacIds", label: "Cung hoàng đạo", options: metadata?.zodiacs },
    { id: "educationIds", label: "Trình độ học vấn", options: metadata?.educations },
    { id: "dietIds", label: "Chế độ ăn", options: metadata?.diets },
    { id: "sleepIds", label: "Thói quen ngủ", options: metadata?.sleeps },
    { id: "snuIds", label: "Thói quen MXH", options: metadata?.snus },
    { id: "futureFamilyIds", label: "Gia đình tương lai", options: metadata?.futureFamilies },
    { id: "sexualOrientationIds", label: "Xu hướng tính dục", options: metadata?.sexualOrientations },
  ];

  // Các trường chọn nhiều giá trị
  const multiSelectSections = [
    { id: "favoriteIds", label: "Sở thích", multiSelect: true, options: metadata?.favorites },
    { id: "characterIds", label: "Tính cách", multiSelect: true, options: metadata?.characters },
    { id: "communicateStyleIds", label: "Phong cách giao tiếp", multiSelect: true, options: metadata?.communicateStyles },
    { id: "loveLanguageIds", label: "Ngôn ngữ tình yêu", multiSelect: true, options: metadata?.loveLanguages },
    { id: "petIds", label: "Thú cưng", multiSelect: true, options: metadata?.pets },
    { id: "languageIds", label: "Ngôn ngữ", multiSelect: true, options: metadata?.languages },
  ];

  // Các trường khác (loại bỏ search)
  const otherSections = [
    {
      id: "gender",
      label: "Giới tính",
      type: "select",
      options: [
        { value: "male", label: "Nam" },
        { value: "female", label: "Nữ" },
        { value: "other", label: "Khác" },
      ],
    },
    { id: "ageMin", label: "Tuổi tối thiểu", type: "number", min: 18, max: 100 },
    { id: "ageMax", label: "Tuổi tối đa", type: "number", min: 18, max: 100 },
  ];

  const handleFilterChange = (filterId, value) => {
    setFilters((prev) => ({
      ...prev,
      [filterId]: filterId.includes("Ids") ? (Array.isArray(value) ? value : [value]) : value,
    }));
  };

  const handleOptionClick = (sectionId, value, multiSelect) => {
    if (multiSelect) {
      const currentValues = Array.isArray(filters[sectionId]) ? filters[sectionId] : [];
      const newValues = currentValues.includes(value)
        ? currentValues.filter((v) => v !== value)
        : [...currentValues, value];
      handleFilterChange(sectionId, newValues);
    } else {
      // Luôn lưu dưới dạng mảng cho single select
      handleFilterChange(sectionId, [value]);
    }
  };

  const isSelected = (sectionId, value) => {
    const filterValue = filters[sectionId];
    return Array.isArray(filterValue) ? filterValue.includes(value) : false;
  };

  const handleResetFilters = () => {
    setFilters({});
  };

  const handleApply = () => {
    // Validate filters
    const validatedFilters = {};
    Object.entries(filters).forEach(([key, value]) => {
      if (key.includes("Ids")) {
        if (Array.isArray(value) && value.length > 0) {
          validatedFilters[key] = value.map(Number).filter((v) => !isNaN(v));
        } else if (value && value !== "") {
          validatedFilters[key] = [Number(value)].filter((v) => !isNaN(v));
        }
      } else if (value && value !== "") {
        validatedFilters[key] = value;
      }
    });
    console.log("Applying validated filters:", validatedFilters);
    onHandleFilter(validatedFilters);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl max-w-md w-full max-h-[80vh] overflow-y-auto shadow-2xl">
        <div className="sticky top-0 bg-white p-4 flex justify-between items-center border-b border-gray-200">
          <div className="flex items-center gap-2">
            <SlidersIcon className="w-5 h-5 text-[#FF5864]" />
            <h2 className="text-lg font-semibold text-gray-800">Bộ lọc</h2>
          </div>
          <button onClick={onClose} className="p-2 rounded-full hover:bg-gray-100">
            <XIcon className="w-5 h-5 text-gray-600" />
          </button>
        </div>

        <div className="p-4 space-y-6">
          {/* Single Select */}
          {singleSelectSections.map((section) => (
            <div key={section.id}>
              <h3 className="text-sm font-medium text-gray-700 mb-2">{section.label}</h3>
              <div className="flex flex-wrap gap-2">
                {section.options?.map((option) => (
                  <button
                    key={option.id}
                    onClick={() => handleOptionClick(section.id, option.id, false)}
                    className={`px-4 py-2 rounded-full text-sm transition-all duration-300
                      ${isSelected(section.id, option.id)
                        ? "bg-[#FF5864] text-white"
                        : "bg-gray-100 text-gray-700 hover:bg-gray-200"}`}
                  >
                    {option.name || option.value}
                    {isSelected(section.id, option.id) && (
                      <CheckIcon className="inline-block w-4 h-4 ml-1" />
                    )}
                  </button>
                ))}
              </div>
            </div>
          ))}

          {/* Multi Select */}
          {multiSelectSections.map((section) => (
            <div key={section.id}>
              <h3 className="text-sm font-medium text-gray-700 mb-2">{section.label}</h3>
              <div className="flex flex-wrap gap-2">
                {section.options?.map((option) => (
                  <button
                    key={option.id}
                    onClick={() => handleOptionClick(section.id, option.id, true)}
                    className={`px-4 py-2 rounded-full text-sm transition-all duration-300
                      ${isSelected(section.id, option.id)
                        ? "bg-[#FF5864] text-white"
                        : "bg-gray-100 text-gray-700 hover:bg-gray-200"}`}
                  >
                    {option.name || option.value}
                    {isSelected(section.id, option.id) && (
                      <CheckIcon className="inline-block w-4 h-4 ml-1" />
                    )}
                  </button>
                ))}
              </div>
            </div>
          ))}

          {/* Other Filters */}
          {otherSections.map((section) => (
            <div key={section.id}>
              <h3 className="text-sm font-medium text-gray-700 mb-2">{section.label}</h3>
              {section.type === "select" ? (
                <select
                  value={filters[section.id] || ""}
                  onChange={(e) => handleFilterChange(section.id, e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-[#FF5864]"
                >
                  <option value="">Chọn {section.label.toLowerCase()}</option>
                  {section.options.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              ) : (
                <input
                  type={section.type}
                  value={filters[section.id] || ""}
                  onChange={(e) => handleFilterChange(section.id, e.target.value)}
                  placeholder={`Nhập ${section.label.toLowerCase()}...`}
                  min={section.min}
                  max={section.max}
                  className="w-full px-4 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-[#FF5864]"
                />
              )}
            </div>
          ))}
        </div>

        <div className="sticky bottom-0 bg-white p-4 border-t border-gray-200 flex gap-2">
          <button
            onClick={handleResetFilters}
            className="flex-1 bg-gray-200 text-gray-700 py-3 rounded-xl hover:bg-gray-300 transition-all"
          >
            <TrashIcon className="inline-block w-4 h-4 mr-1" />
            Xóa bộ lọc
          </button>
          <button
            onClick={handleApply}
            className="flex-1 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white py-3 rounded-xl hover:shadow-lg transition-all"
          >
            Áp dụng ({Object.keys(filters).length})
          </button>
        </div>
      </div>
    </div>
  );
};

export default FilterModal;
```

### src\ui\Footer.js
```js
"use client";
import React from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { HomeIcon, UserIcon, HeartIcon, BellIcon } from "lucide-react";
const Footer = () => {
    const pathname = usePathname();
    const isActive = (path) => pathname === path;
    const navItems = [
        {
            icon: HomeIcon,
            path: "/",
            label: "Home",
        },
        {
            icon: HeartIcon,
            path: "/matches",
            label: "Matches",
        },
        {
            icon: UserIcon,
            path: "/profile",
            label: "Profile",
        },
        {
            icon: BellIcon,
            path: "/notifications",
            label: "Thông báo",
        },
    ];
    return (
        <footer className="sticky bottom-0 z-10 bg-white/80 backdrop-blur-md border-t border-gray-200">
            <div className="container mx-auto px-4">
                <nav className="flex justify-around">
                    {navItems.map((item) => {
                        const Icon = item.icon;
                        const active = isActive(item.path);
                        return (
                            <Link
                                key={item.path}
                                href={item.path}
                                className={`flex flex-col items-center py-3 px-4 transition-all duration-300
                          hover:bg-gray-50/50 rounded-lg -mt-px ${
                              active
                                  ? "text-transparent bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text translate-y-[-2px]"
                                  : "text-gray-500"
                          }`}
                            >
                                <Icon
                                    className={`h-6 w-6 transition-transform duration-300 ${
                                        active
                                            ? "stroke-[#FF5864] scale-110"
                                            : "stroke-current hover:scale-105"
                                    }`}
                                />
                                <span
                                    className={`text-xs mt-1 font-medium ${
                                        active ? "opacity-100" : "opacity-80"
                                    }`}
                                >
                                    {item.label}
                                </span>
                            </Link>
                        );
                    })}
                </nav>
            </div>
        </footer>
    );
};
export default Footer;

```

### src\ui\Header.js
```js
"use client";
import React, { useEffect, useRef, useState } from "react";
import Link from "next/link";
import { FlameIcon, SettingsIcon, BellIcon } from "lucide-react";

import NotificationDropdown from "./NotificationDropdown";
const Header = () => {
    const [showNotifications, setShowNotifications] = useState(false);
    const notificationRef = useRef(null);
    const unreadCount = 3;
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (
                notificationRef.current &&
                !notificationRef.current.contains(event.target)
            ) {
                setShowNotifications(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () =>
            document.removeEventListener("mousedown", handleClickOutside);
    }, []);

    return (
        <header className="sticky top-0 z-10 shadow-sm bg-white/80 backdrop-blur-md">
            <div className="container flex items-center justify-between px-4 py-3 mx-auto">
                <Link
                    href="/"
                    className="flex items-center transition-transform duration-300 group hover:scale-105"
                >
                    <FlameIcon className="h-6 w-6 text-[#FF5864]" />
                    <span className="ml-2 text-2xl font-bold text-transparent bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text">
                        DateViet
                    </span>
                </Link>
                <div className="flex items-center gap-2">
                    <div className="relative" ref={notificationRef}>
                        <button
                            onClick={() =>
                                setShowNotifications(!showNotifications)
                            }
                            className="p-2.5 rounded-full hover:bg-gray-100/80 transition-all duration-300
                     hover:shadow-md active:scale-95 relative"
                        >
                            <BellIcon className="w-6 h-6 text-gray-600" />
                            {/* {unreadCount > 0 && (
                                <span
                                    className="absolute -top-1 -right-1 w-5 h-5 bg-[#FF5864] text-white text-xs
                             rounded-full flex items-center justify-center animate-pulse"
                                >
                                    {unreadCount}
                                </span>
                            )} */}
                        </button>
                        {showNotifications && (
                            <NotificationDropdown
                                onClose={() => setShowNotifications(false)}
                            />
                        )}
                    </div>
                    <Link
                        href="/settings"
                        className="p-2.5 rounded-full hover:bg-gray-100/80 transition-all duration-300
                   hover:shadow-md active:scale-95"
                    >
                        <SettingsIcon className="w-6 h-6 text-gray-600" />
                    </Link>
                </div>
            </div>
        </header>
    );
};
export default Header;

```

### src\ui\MatchModal.js
```js
import React from "react";
import { HeartIcon, MessageCircleIcon, XIcon } from "lucide-react";
import Link from "next/link";

const MatchModal = ({ me, profile, onClose }) => {
    console.log(me);

    const meAvatar = me.photos.find((photo) => photo?.is_profile_pic);
    const youAvatar = profile.photos.find((photo) => photo?.is_profile_pic);

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
            <div
                className="absolute inset-0 bg-black/60 backdrop-blur-md"
                onClick={onClose}
            />
            <div className="relative w-full max-w-lg animate-scale-up">
                <div className="relative bg-gradient-to-br from-[#FF5864] to-[#FF655B] rounded-3xl overflow-hidden">
                    <div className="absolute inset-0">
                        <div className="absolute top-0 left-0 w-full h-full bg-grid-pattern opacity-10" />
                        <div className="absolute w-40 h-40 rounded-full -top-20 -right-20 bg-white/20 blur-3xl animate-float" />
                        <div
                            className="absolute w-40 h-40 rounded-full -bottom-20 -left-20 bg-white/20 blur-3xl animate-float"
                            style={{
                                animationDelay: "-2s",
                            }}
                        />
                    </div>
                    <div className="relative p-8 text-center">
                        <button
                            onClick={onClose}
                            className="absolute p-2 transition-colors duration-300 rounded-full top-4 right-4 bg-white/10 hover:bg-white/20"
                        >
                            <XIcon className="w-6 h-6 text-white" />
                        </button>
                        <div className="mb-8">
                            <div className="flex justify-center mb-6">
                                <div className="relative">
                                    <HeartIcon className="w-24 h-24 text-white animate-bounce" />
                                    <div className="absolute inset-0 rounded-full bg-white/20 blur-xl animate-pulse" />
                                </div>
                            </div>
                            <h2 className="mb-2 text-4xl font-bold text-white">
                                It's a Match!
                            </h2>
                            <p className="text-lg text-white/90">
                                Bạn và {profile.name} đã thích nhau
                            </p>
                        </div>
                        <div className="flex items-center justify-center gap-8 mb-10">
                            <div className="relative group">
                                <div className="absolute transition duration-1000 rounded-full opacity-75 -inset-1 bg-gradient-to-r from-pink-600 to-purple-600 blur group-hover:opacity-100 group-hover:duration-200 animate-rotate" />
                                <div className="relative overflow-hidden border-4 border-white rounded-full w-28 h-28">
                                    <img
                                        src={
                                            meAvatar?.url?.[0] === "/"
                                                ? `http://localhost:3001${meAvatar?.url}`
                                                : "https://cdn.kona-blue.com/upload/kona-blue_com/post/images/2024/09/19/465/avatar-trang-1.jpg"
                                        }
                                        alt="Your profile"
                                        className="object-cover w-full h-full"
                                    />
                                </div>
                            </div>
                            <div className="relative z-10">
                                <HeartIcon className="w-10 h-10 text-white animate-pulse" />
                            </div>
                            <div className="relative group">
                                <div className="absolute transition duration-1000 rounded-full opacity-75 -inset-1 bg-gradient-to-r from-pink-600 to-purple-600 blur group-hover:opacity-100 group-hover:duration-200 animate-rotate" />
                                <div className="relative overflow-hidden border-4 border-white rounded-full w-28 h-28">
                                    <img
                                        src={
                                            youAvatar?.url?.[0] === "/"
                                                ? `http://localhost:3001${youAvatar?.url}`
                                                : "https://cdn.kona-blue.com/upload/kona-blue_com/post/images/2024/09/19/465/avatar-trang-1.jpg"
                                        }
                                        alt={profile?.name}
                                        className="object-cover w-full h-full"
                                    />
                                </div>
                            </div>
                        </div>
                        <div className="space-y-4">
                            <Link
                                href="/matches"
                                className="block w-full px-6 py-4 font-medium text-white transition-all duration-300 transform bg-white/10 backdrop-blur-md rounded-xl hover:bg-white/20 hover:-translate-y-1"
                            >
                                <span className="flex items-center justify-center gap-2">
                                    <MessageCircleIcon className="w-5 h-5" />
                                    Gửi lời chào
                                </span>
                            </Link>
                            <button
                                onClick={onClose}
                                className="block w-full bg-white text-[#FF5864] py-4 px-6 rounded-xl font-medium
                         hover:bg-gray-50 transition-all duration-300 transform hover:-translate-y-1"
                            >
                                Tiếp tục tìm kiếm
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};
export default MatchModal;

```

### src\ui\NotificationDropdown.js
```js
"use client";
import React, { useEffect, useState } from "react";
import { HeartIcon, MessageCircleIcon, StarIcon } from "lucide-react";
import Link from "next/link";
import { useAuth } from "@/hooks/useAuth";
import { getRelativeTime } from "@/utils/Time";

const getNotificationContent = (notification) => {
  // Chuẩn hóa URL ảnh
  const normalizePhotoUrl = (photo) => {
    let url;
    // Xử lý photo là mảng (từ Prisma)
    if (Array.isArray(photo)) {
      if (photo.length > 0 && photo[0]?.url && typeof photo[0].url === 'string') {
        url = photo[0].url;
      }
    }
    // Xử lý photo là object
    else if (photo && typeof photo === 'object' && photo.url && typeof photo.url === 'string') {
      url = photo.url;
    }
    // Fallback nếu photo là chuỗi trực tiếp
    else if (typeof photo === 'string' && photo) {
      url = photo;
    }

    // Kiểm tra url hợp lệ
    if (!url || typeof url !== 'string') {
      console.warn("Invalid or missing photo URL", { photo, url });
      return "/default-avatar.jpg";
    }

    // Chuẩn hóa URL
    return url.startsWith("http") ? url : `http://localhost:3001${url.toLowerCase()}`;
  };

  const photoUrl = normalizePhotoUrl(notification?.user?.photo);

  switch (notification.type) {
    case "NEW_MATCH":
      return {
        icon: <HeartIcon className="h-5 w-5 text-[#FF5864]" />,
        text: `Bạn và ${notification.user.name} đã ghép đôi!`,
        link: "/matches",
        photo: photoUrl,
      };
    case "LIKED":
      return {
        icon: <HeartIcon className="h-5 w-5 text-[#FF5864]" />,
        text: `${notification.user.name} đã thích bạn`,
        link: "/matches",
        type: "like",
        photo: photoUrl,
      };
    default:
      return null;
  }
};

const NotificationDropdown = ({ onClose }) => {
  const auth = useAuth();
  const [notifications, setNotifications] = useState([]);

  const fetchNotifications = async () => {
    try {
      const res = await fetch("http://localhost:3001/api/notifications", {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${auth?.auth?.access_token}`,
        },
      });
      const data = await res.json();
      console.log(data);
      setNotifications(data?.data || []);
    } catch (error) {}
  };

  useEffect(() => {
    fetchNotifications();
  }, []);

  return (
    <div className="absolute right-0 mt-2 overflow-hidden bg-white shadow-lg w-80 rounded-2xl animate-scale-up">
      <div className="p-4 border-b border-gray-100">
        <div className="flex items-center justify-between">
          <h3 className="font-semibold text-gray-900">Thông báo</h3>
          <Link
            href="/notifications"
            className="text-sm text-[#FF5864] hover:text-[#FF655B] font-medium"
          >
            Xem tất cả
          </Link>
        </div>
      </div>
      <div className="divide-y divide-gray-100 max-h-[400px] overflow-y-auto">
        {notifications?.map((notification) => {
          const content = getNotificationContent(notification);
          return (
            <Link
              key={notification?.id}
              href={content?.link}
              onClick={onClose}
              className={`flex items-center gap-4 p-4 hover:bg-gray-50 transition-colors
                ${!notification?.read ? "bg-pink-50/50" : ""}`}
            >
              <div className="relative">
                <img
                  src={content?.photo}
                  alt={notification?.user?.name}
                  className="object-cover w-10 h-10 rounded-full"
                  crossOrigin="anonymous"
                  onError={(e) => {
                    console.error(`Failed to load image: ${e.target.src}, error: ${e.type}, status: ${e.target.status || 'unknown'}`);
                    e.target.src = "/default-avatar.jpg";
                  }}
                />
                <div className="absolute p-1 bg-white rounded-full -bottom-1 -right-1">
                  {content?.icon}
                </div>
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm text-gray-900">{content?.text}</p>
                <p className="text-xs text-gray-500 mt-0.5">
                  {getRelativeTime(notification?.time)}
                </p>
              </div>
              {!notification?.read && (
                <div className="w-2 h-2 bg-[#FF5864] rounded-full" />
              )}
            </Link>
          );
        })}
      </div>
      {notifications?.length === 0 && (
        <div className="py-8 text-center text-gray-500">
          <p>Không có thông báo mới</p>
        </div>
      )}
    </div>
  );
};

export default NotificationDropdown;
```

### src\utils\ImageUtils.js
```js
export const normalizePhotoUrl = (url) => {
  if (!url) {
    console.warn("Photo URL is empty, using default avatar");
    return "/default-avatar.jpg";
  }
  if (url.startsWith("http")) {
    return url;
  }
  let cleanUrl = url.replace(/^\/*uploads\/*/i, "");
  cleanUrl = cleanUrl.startsWith("/") ? cleanUrl : `/${cleanUrl}`;
  const finalUrl = `http://localhost:3001/uploads${cleanUrl.toLowerCase()}`;
  console.debug(`Normalized photo URL: ${finalUrl}`);
  return finalUrl;
};

export const handleImageError = (e, defaultSrc = "/default-avatar.jpg") => {
  console.error(`Failed to load image: ${e.target.src}, error: ${e.type}, status: ${e.target.status || "unknown"}`);
  e.target.src = defaultSrc;
};
```

### src\utils\LocalStorage.js
```js
const getData = (key) => {
    // Kiểm tra xem localStorage có tồn tại không
    if (typeof window !== "undefined" && window.localStorage) {
        try {
            const data = localStorage.getItem(key);
            if (data) {
                return JSON.parse(data);
            }
        } catch (error) {
            console.error("Read from local storage:", error);
        }
    }
    return null; // Trả về null nếu localStorage không khả dụng
};

const setData = (key, value) => {
    // Kiểm tra xem localStorage có tồn tại không
    if (typeof window !== "undefined" && window.localStorage) {
        try {
            localStorage.setItem(key, JSON.stringify(value));
        } catch (error) {
            console.error("Save to local storage:", error);
        }
    }
};

export { getData, setData };
```

### src\utils\Time.js
```js

export const getRelativeTime = (date) => {
  const now = new Date();
  const timeDiff = now - new Date(date);
  const seconds = Math.floor(timeDiff / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);

  if (seconds < 60) {
    return `Vừa xong`;
  } else if (minutes < 60) {
    return `${minutes} phút trước`;
  } else if (hours < 24) {
    return `${hours} giờ trước`;
  } else if (days < 7) {
    return `${days} ngày trước`;
  } else {
    return new Date(date).toLocaleDateString('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
    });
  }
};
```
