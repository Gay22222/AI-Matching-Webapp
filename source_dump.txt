# ==================================================
# Path: D:\Semi_final_Matching
# Detected tech: docker, javascript, python, react, typescript
# ==================================================

## DIRECTORY STRUCTURE
```
Semi_final_Matching/
├── .git/
├── apps/
│   ├── backend/
│   │   ├── node_modules/
│   │   ├── src/
│   │   │   ├── config/
│   │   │   │   └── .env
│   │   │   ├── controllers/
│   │   │   │   ├── auth.controller.js
│   │   │   │   ├── match.controller.js
│   │   │   │   ├── message.controller.js
│   │   │   │   ├── metadata.controller.js
│   │   │   │   ├── notification.controller.js
│   │   │   │   ├── reports.controller.js
│   │   │   │   ├── upload.controller.js
│   │   │   │   └── user.controller.js
│   │   │   ├── middleware/
│   │   │   │   ├── auth.middleware.js
│   │   │   │   ├── match.middleware.js
│   │   │   │   └── message.middleware.js
│   │   │   ├── prisma/
│   │   │   │   ├── migrations/
│   │   │   │   │   ├── 20250501084235_init/
│   │   │   │   │   │   └── migration.sql
│   │   │   │   │   ├── 20250501090858_add_sexual_orientation_relation/
│   │   │   │   │   │   └── migration.sql
│   │   │   │   │   ├── 20250523065215_add_is_full_information_to_users/
│   │   │   │   │   │   └── migration.sql
│   │   │   │   │   ├── 20250526092807_add_is_accept_to_matches/
│   │   │   │   │   │   └── migration.sql
│   │   │   │   │   ├── 20250527052153_add_notification_in_db/
│   │   │   │   │   │   └── migration.sql
│   │   │   │   │   ├── 20250527061432_add_liked_in_notification_type/
│   │   │   │   │   │   └── migration.sql
│   │   │   │   │   ├── 20250527062030_update_is_accept_into_is_accept/
│   │   │   │   │   │   └── migration.sql
│   │   │   │   │   ├── 20250527093353_add_is_hidden_to_notification_table/
│   │   │   │   │   │   └── migration.sql
│   │   │   │   │   └── migration_lock.toml
│   │   │   │   ├── seeds/
│   │   │   │   │   ├── index.js
│   │   │   │   │   ├── seedCareer.js
│   │   │   │   │   ├── seedCharacter.js
│   │   │   │   │   ├── seedCommunicateStyle.js
│   │   │   │   │   ├── seedDiet.js
│   │   │   │   │   ├── seedEducation.js
│   │   │   │   │   ├── seedFavorite.js
│   │   │   │   │   ├── seedFutureFamily.js
│   │   │   │   │   ├── seedLanguages.js
│   │   │   │   │   ├── seedLoveLanguage.js
│   │   │   │   │   ├── seedPet.js
│   │   │   │   │   ├── seedReligions.js
│   │   │   │   │   ├── seedSNU.js
│   │   │   │   │   ├── seedSearchingFor.js
│   │   │   │   │   ├── seedSexualOrientation.js
│   │   │   │   │   ├── seedSleep.js
│   │   │   │   │   ├── seedUser.js
│   │   │   │   │   └── seedZodiacs.js
│   │   │   │   ├── client.js
│   │   │   │   └── schema.prisma
│   │   │   ├── repository/
│   │   │   │   ├── match.repository.js
│   │   │   │   ├── message.repository.js
│   │   │   │   ├── metadata.repository.js
│   │   │   │   ├── notification.repository.js
│   │   │   │   └── user.repository.js
│   │   │   ├── routes/
│   │   │   │   ├── auth.routes.js
│   │   │   │   ├── index.js
│   │   │   │   ├── match.routes.js
│   │   │   │   ├── message.routes.js
│   │   │   │   ├── metadata.routes.js
│   │   │   │   ├── notifications.routes.js
│   │   │   │   ├── reports.routes.js
│   │   │   │   ├── upload.routes.js
│   │   │   │   └── user.routes.js
│   │   │   ├── services/
│   │   │   │   ├── auth.service.js
│   │   │   │   ├── email.service.js
│   │   │   │   ├── match.service.js
│   │   │   │   ├── message.service.js
│   │   │   │   ├── metadata.service.js
│   │   │   │   ├── notification.service.js
│   │   │   │   ├── reports.service.js
│   │   │   │   └── user.service.js
│   │   │   ├── sockets/
│   │   │   │   ├── messages.socket.js
│   │   │   │   └── notifications.socket.js
│   │   │   ├── utils/
│   │   │   │   ├── auth.js
│   │   │   │   ├── message.utils.js
│   │   │   │   ├── notification.utils.js
│   │   │   │   ├── otpGenerator.js
│   │   │   │   ├── socket.js
│   │   │   │   ├── socketHelpers.js
│   │   │   │   ├── upload.js
│   │   │   │   └── user.utils.js
│   │   │   ├── app.js
│   │   │   └── server.js
│   │   ├── uploads/
│   │   │   ├── image-1747991776236-151808461.png
│   │   │   ├── image-1748155742359-412665106.png
│   │   │   ├── image-1748155765865-735174974.png
│   │   │   ├── images-1748158229158-531576200.png
│   │   │   ├── images-1748158229175-934356434.png
│   │   │   ├── images-1748158229182-402524829.png
│   │   │   ├── images-1748158229196-528708227.png
│   │   │   ├── images-1748159736703-151138259.JPG
│   │   │   ├── images-1748159736708-735351319.png
│   │   │   ├── images-1748159736723-614446405.png
│   │   │   ├── images-1748159853690-949184159.JPG
│   │   │   ├── images-1748159853691-848368491.png
│   │   │   ├── images-1748159853695-207174435.png
│   │   │   ├── images-1748245695865-371577711.png
│   │   │   ├── images-1748321354258-614979016.jpg
│   │   │   ├── images-1748321354266-710388810.jpg
│   │   │   ├── images-1748321354277-165056468.png
│   │   │   ├── images-1748444966030-594177904.png
│   │   │   ├── images-1748444966040-950134786.png
│   │   │   ├── images-1748444966048-762065966.png
│   │   │   ├── images-1748526107349-83355053.png
│   │   │   ├── images-1748526107353-516234039.jpg
│   │   │   ├── images-1748526114667-81069174.png
│   │   │   ├── images-1748526114669-429540037.jpg
│   │   │   ├── images-1748526116215-399472728.png
│   │   │   ├── images-1748526116218-883189668.jpg
│   │   │   ├── images-1748526117304-861655753.png
│   │   │   ├── images-1748526117308-576611599.jpg
│   │   │   ├── images-1748526117464-49702795.png
│   │   │   └── images-1748526117465-759832903.jpg
│   │   ├── .dockerignore
│   │   ├── Dockerfile
│   │   ├── docker-compose.yml
│   │   ├── package.json
│   │   └── readme.md
│   └── frontend/
│       ├── .next/
│       ├── node_modules/
│       ├── public/
│       │   ├── file.svg
│       │   ├── globe.svg
│       │   ├── next.svg
│       │   ├── vercel.svg
│       │   └── window.svg
│       ├── src/
│       │   ├── app/
│       │   │   ├── (main)/
│       │   │   │   ├── matches/
│       │   │   │   │   └── page.js
│       │   │   │   ├── message/
│       │   │   │   │   └── [matchId]/
│       │   │   │   │       └── page.js
│       │   │   │   ├── notifications/
│       │   │   │   │   └── page.js
│       │   │   │   ├── profile/
│       │   │   │   │   └── page.js
│       │   │   │   ├── settings/
│       │   │   │   │   └── page.js
│       │   │   │   ├── layout.js
│       │   │   │   └── page.js
│       │   │   ├── auth/
│       │   │   │   ├── login/
│       │   │   │   │   └── page.js
│       │   │   │   ├── otp/
│       │   │   │   │   └── OTPVerification.jsx
│       │   │   │   ├── register/
│       │   │   │   │   └── page.js
│       │   │   │   ├── _helpers.js
│       │   │   │   └── layout.js
│       │   │   ├── components/
│       │   │   │   ├── BottomNavigation.jsx
│       │   │   │   ├── MatchModal.jsx
│       │   │   │   ├── SwipeCard.jsx
│       │   │   │   └── UserDropdown.jsx
│       │   │   ├── dashboard/
│       │   │   │   └── page.js
│       │   │   ├── discover/
│       │   │   │   └── page.js
│       │   │   ├── profile-setup/
│       │   │   │   ├── components/
│       │   │   │   │   ├── BasicInfo.js
│       │   │   │   │   ├── BioInterests.js
│       │   │   │   │   ├── Location.js
│       │   │   │   │   ├── PhotoUpload.js
│       │   │   │   │   ├── Preferences.js
│       │   │   │   │   ├── ProfileSetup.js
│       │   │   │   │   └── Steps.js
│       │   │   │   └── page.js
│       │   │   ├── report/
│       │   │   │   └── page.js
│       │   │   ├── favicon.ico
│       │   │   ├── globals.css
│       │   │   └── layout.js
│       │   ├── components/
│       │   │   ├── cards/
│       │   │   │   └── ProfileCard.js
│       │   │   ├── layout/
│       │   │   │   └── AppLayout.js
│       │   │   ├── ChatWindow.jsx
│       │   │   └── Loading.jsx
│       │   ├── context/
│       │   │   └── ProfileContext.js
│       │   ├── hooks/
│       │   │   ├── _helper.js
│       │   │   ├── useAuth.js
│       │   │   ├── useMetadata.js
│       │   │   └── useSocket.js
│       │   ├── lib/
│       │   ├── redux/
│       │   │   ├── feature/
│       │   │   │   └── authSlice.js
│       │   │   └── store.js
│       │   ├── ui/
│       │   │   ├── FilterModal.js
│       │   │   ├── Footer.js
│       │   │   ├── Header.js
│       │   │   ├── MatchModal.js
│       │   │   └── NotificationDropdown.js
│       │   └── utils/
│       │       ├── LocalStorage.js
│       │       └── Time.js
│       ├── .gitignore
│       ├── README.md
│       ├── eslint.config.mjs
│       ├── jsconfig.json
│       ├── next.config.mjs
│       ├── package.json
│       └── postcss.config.mjs
├── node_modules/
├── .gitignore
├── README.md
├── package-lock.json
├── package.json
├── pnpm-lock.yaml
├── pnpm-workspace.yaml
└── source_dump.txt
```

## FILE CONTENTS

### apps\backend\src\app.js
```js
import express from "express";
import cors from "cors";
import Redis from "ioredis";

import apiRoutes from "./routes/index.js";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const redis = new Redis();

const app = express();
app.use(cors());

app.use(express.json({ limit: "50mb" }));
app.use(express.urlencoded({ limit: "50mb", extended: true }));

app.use("/uploads", express.static(path.join(__dirname, "../uploads")));
app.use("/api", apiRoutes);

app.get("/cache", async (req, res) => {
    const cachedData = await redis.get("cachedData");

    if (cachedData) {
        // If data exists in the cache, return it
        res.send(JSON.parse(cachedData));
    } else {
        // If data is not in the cache, fetch it from the source
        const dataToCache = { message: "Data to be cached" };
        await redis.set("cachedData", JSON.stringify(dataToCache), "EX", 3600); // Cache for 1 hour
        res.send(dataToCache);
    }
});

export default app;

```

### apps\backend\src\server.js
```js
import app from "./app.js";
import { createServer } from "http";
import { Server } from "socket.io";
import setupMessageSocket from "./sockets/messages.socket.js";
import setupNotificationSocket from "./sockets/notifications.socket.js";
import { setIO } from "./utils/socket.js";
import cors from "cors";

const PORT = process.env.PORT || 3001;
app.use(cors({ origin: "http://localhost:3000" }));

// Tạo HTTP Server
const server = createServer(app);

// Khởi tạo WebSocket server
const io = new Server(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"],
    },
});
setIO(io);

let users = [];

const handleUserConnection = (socket, data, users) => {
    console.log(data, "data");

    const isExistUserById = users.find((u) => u.id === data?.id);
    const isExistUserBySocketId = users.find((u) => u.socket_id === socket.id);
    const user = {
        socket_id: socket.id,
        id: data?.id,
        name: data?.name,
    };
    if (isExistUserById) {
        console.log("User already connected:", data?.id);
        return user;
    }
    if (isExistUserBySocketId) {
        Object.assign(isExistUserBySocketId, {
            id: data?.id,
            name: data?.name,
        });
        return user;
    }
    users.push(user);
    return user;
};

// WebSocket
io.on("connection", (socket) => {
    console.log("User connected:", socket.id);
    socket.on("me", (data) => {
        socket.removeAllListeners("send-message");

        const user = handleUserConnection(socket, data, users);
        setupMessageSocket(io, socket, user, () => users);
        setupNotificationSocket(io, socket, user, () => users);
    });

    socket.on("disconnect", () => {
        users = users.filter((user) => user.socket_id !== socket.id);
    });
    socket.on("logout", () => {
        users = users.filter((user) => user.socket_id !== socket.id);
    });
});

// Chạy server
server.listen(PORT, () => {
    console.log(`Backend running on http://localhost:${PORT}`);
});

```

### apps\backend\src\controllers\auth.controller.js
```js
import { authService } from "../services/auth.service.js";

export const authController = {
    // [POST] /login
    login: async (req, res) => {
        try {
            const { email, password } = req.body;
            const { token, user } = await authService.loginUser(
                email,
                password
            );
            res.status(200).json({
                token,
                user,
                statusCode: 200,
            });
        } catch (error) {
            if (
                error.message === "User not found" ||
                error.message === "Password is not correct"
            ) {
                console.error("Error logging in:", error);
                return res.status(401).json({
                    statusCode: 401,
                    message: error.message,
                });
            }
            console.error("Error logging in:", error);
            res.status(500).json({ message: "Internal server error" });
        }
    },
    // [POST] /register
    register: async (req, res) => {
        try {
            const { email, password } = req.body;
            const userNew = await authService.registerUserNew(email, password);
            res.status(201).json({
                user_new: userNew,
            });
        } catch (error) {
            if (error.message === "Email already registered") {
                console.error("Error logging in:", error);
                return res.status(409).json({
                    statusCode: 409,
                    message: "Email already registered",
                });
                return;
            }
            console.log(error);
            res.status(500).json({ message: "Internal server error" });
        }
    },
    // [POST] /send-verification-otp
    requestVerificationCode: async (req, res, next) => {
        try {
            const { email } = req.body;
            await authService.sendOtpForVerification(email);
            res.status(200).json({
                statusCode: 200,
                message: "Verification code sent successfully",
            });
        } catch (error) {
            console.error("Error requesting verification code:", error);
            next(error);
        }
    },
    // [POST] /verify-otp
    verifyEmailWithOtp: async (req, res, next) => {
        try {
            const { email, otp } = req.body;
            console.log(email, otp);

            if (!email || !otp) {
                return res.status(400).json({
                    statusCode: 400,
                    message: "Email and OTP are required",
                });
            }
            const isVerified = await authService.verifyEmailOtp(email, otp);

            if (isVerified) {
                res.status(200).json({
                    statusCode: 200,
                    message: "Email verified successfully",
                });
            } else {
                res.status(400).json({
                    statusCode: 400,
                    message: "OTP verification failed",
                });
            }
        } catch (error) {
            console.error("Error verifying OTP:", error);
            if (error.message.includes("Mã OTP")) {
                return res
                    .status(400)
                    .json({ statusCode: 400, message: error.message });
            }
            next(error);
        }
    },
};

```

### apps\backend\src\controllers\match.controller.js
```js
import { matchService } from "../services/match.service.js";

export const matchController = {
    // [GET] /matches/:id
    get: async (req, res) => {
        try {
            const match = req?.match;
            console.log(match);

            res.status(200).json({
                statusCode: 200,
                data: match,
            });
        } catch (error) {
            console.error("Error getting match:", error);
            res.status(500).json({
                statusCode: 500,
                message: "Internal server error",
            });
        }
    },
    // [GET] /matches
    getAll: async (req, res) => {
        try {
            const userId = req.user;

            const matches = await matchService.getAll(userId?.id);
            res.status(200).json({
                statusCode: 200,
                data: matches,
            });
        } catch (error) {
            console.error("Error getting match:", error);
            res.status(500).json({
                statusCode: 500,
                message: "Internal server error",
            });
        }
    },
    // [POST] /matches
    create: async (req, res) => {
        try {
            const { receiverId } = req.body;
            const user = req.user;

            const senderId = user?.id;

            if (!senderId || !receiverId) {
                return res.status(400).json({
                    message: "Missing required fields",
                    statusCode: 400,
                });
            }

            const match = await matchService.create(senderId, receiverId);
            res.status(201).json({
                statusCode: 201,
                message: "Match created successfully",
                match,
            });
        } catch (error) {
            if (error.message === "The match has already been created") {
                return res
                    .status(409)
                    .json({ statusCode: 409, message: error.message });
            } else if (error.message === "Cannot create match") {
                return res
                    .status(500)
                    .json({ statusCode: 500, message: error.message });
            }
            console.error("Error creating match:", error);
            res.status(500).json({
                statusCode: 500,
                message: "Internal server error",
            });
        }
    },
    // [PUT] /matches/:id
    update: async (req, res) => {
        const { matchId } = req.params;
        const { isAccept, notificationId } = req.body;

        const user = req.user;
        const receiverId = user?.id;

        console.log("Update match:", matchId, isAccept);

        if (!matchId || isAccept === undefined || !notificationId) {
            return res.status(400).json({
                statusCode: 400,
                message: "Missing required fields",
            });
        }

        const matchUpdate = await matchService.update(
            matchId,
            isAccept,
            receiverId,
            notificationId
        );

        try {
            res.status(200).json({
                statusCode: 200,
                match: matchUpdate,
            });
        } catch (error) {
            console.error("Error updating match:", error);
            res.status(500).json({
                statusCode: 500,
                message: "Internal server error",
            });
        }
    },
};

```

### apps\backend\src\controllers\message.controller.js
```js
import { matchRepository } from "../repository/match.repository.js";
import { messageService } from "../services/message.service.js";

export const messageController = {
    create: async (req, res) => {
        const { receiverId, matchId, content } = req.body;
        const senderId = req.user.id;
        if (!receiverId || !matchId || !content) {
            return res
                .status(400)
                .json({ statusCode: 400, message: "Missing required fields" });
        }

        console.log(
            `Creating message from ${senderId} to ${receiverId} in match ${matchId} with content: ${content}`
        );

        try {
            const message = await messageService.create(
                matchId,
                senderId,
                receiverId,
                content
            );
            return res.status(201).json({
                statusCode: 201,
                data: message,
            });
        } catch (error) {
            console.log(error);
            if (error.message === "Cannot create match") {
                return res.status(500).json({ error: error.message });
            }
            return res
                .status(500)
                .json({ error: "Failed to send message" + error });
        }
    },
    getAll: async (req, res) => {
        try {
            const { matchId } = req.params;
            const userId = req.user.id;

            const messages = await messageService.getAll(
                parseInt(matchId),
                userId
            );
            res.status(200).json({
                statusCode: 200,
                data: messages,
            });
        } catch (error) {
            console.log(error);
            return res
                .status(500)
                .json({ error: "Failed to retrieve messages" });
        }
    },
};

```

### apps\backend\src\controllers\metadata.controller.js
```js
import { metadataService } from "../services/metadata.service.js";

export const metadataController = {
    get: async (req, res) => {
        try {
            const metadata = await metadataService.get();
            res.status(200).json({
                statusCode: 200,
                message: "Metadata retrieved successfully",
                metadata,
            });
        } catch (error) {
            console.error("Error getting metadata:", error);
            res.status(500).json({
                statusCode: 500,
                message: "Internal server error",
            });
        }
    },
};

```

### apps\backend\src\controllers\notification.controller.js
```js
import { notificationService } from "../services/notification.service.js";

export const notificationController = {
    // [GET] /notifications
    getAll: async (req, res) => {
        try {
            const userId = req?.user?.id;
            const notifications = await notificationService.getAll(userId);
            res.status(200).json({
                statusCode: 200,
                data: notifications,
            });
        } catch (error) {
            console.error("Error getting user:", error);
            res.status(500).json({
                statusCode: 500,
                message: "Internal server error",
            });
        }
    },
    // [POST] /notifications
    create: async (req, res) => {
        try {
            const { receiverId, entityId, type } = req.body;
            const senderId = req?.user?.id;
            console.log("Creating notification with data:", {
                senderId,
                receiverId,
                entityId,
                type,
            });

            if (!receiverId || !senderId || !entityId || !type) {
                return res.status(400).json({
                    statusCode: 400,
                    message: "Missing required fields",
                });
            }
            const notification = await notificationService.create(
                senderId,
                receiverId,
                entityId,
                type
            );
            res.status(201).json({
                statusCode: 201,
                data: notification,
            });
        } catch (error) {
            console.error("Error creating notification:", error);
            res.status(500).json({
                statusCode: 500,
                message: "Internal server error",
            });
        }
    },
};

```

### apps\backend\src\controllers\reports.controller.js
```js
import { reportService } from "../services/reports.service.js";

export const reportController = async (req, res) => {
    // [GET] /report/:id
    // [GET] /reports
    // [POST] /report
};

```

### apps\backend\src\controllers\upload.controller.js
```js
import prisma from "../prisma/client.js";

export const uploadController = {
    uploadSingle: async (req, res) => {
        try {
            if (!req.file) {
                return res
                    .status(400)
                    .json({ message: "Không có file nào được upload" });
            }

            const { bioId } = req.body;
            const fileUrl = `/uploads/${req.file.filename}`;

            const photo = await prisma.photo.create({
                data: {
                    bio_id: parseInt(bioId),
                    url: fileUrl,
                    is_profile_pic: req.body.isProfilePic === "true",
                },
            });

            res.status(201).json({
                message: "Upload thành công",
                photo,
            });
        } catch (error) {
            console.error("Upload error:", error);
            res.status(500).json({
                message: "Lỗi server khi upload ảnh",
                error: error.message,
            });
        }
    },

    uploadMultiple: async (req, res) => {
        try {
            if (!req.files || req.files.length === 0) {
                return res
                    .status(400)
                    .json({ message: "Không có file nào được upload" });
            }

            const { bioId } = req.body;

            // Tạo mảng dữ liệu để insert
            const photosData = req.files.map((file, index) => ({
                bio_id: parseInt(bioId),
                url: `/uploads/${file.filename}`,
                is_profile_pic: index === 0, // Ảnh đầu tiên là ảnh đại diện
            }));

            // Lưu thông tin các ảnh vào database
            const photos = await prisma.photo.createMany({
                data: photosData,
            });

            res.status(201).json({
                message: "Upload nhiều ảnh thành công",
                count: req.files.length,
                photos,
            });
        } catch (error) {
            console.error("Upload multiple error:", error);
            res.status(500).json({
                message: "Lỗi server khi upload nhiều ảnh",
                error: error.message,
            });
        }
    },
};

```

### apps\backend\src\controllers\user.controller.js
```js
import { userService } from "../services/user.service.js";

export const userController = {
    // [GET] /me
    getProfile: async (req, res) => {
        try {
            const user = req?.user;
            if (!user) {
                return res.status(404).json({ message: "User not found" });
            }
            const { password, ...userWithoutPassword } = user;
            res.status(200).json({
                statusCode: 200,
                user: userWithoutPassword,
            });
        } catch (error) {
            console.error("Error getting user:", error);
            res.status(500).json({
                statusCode: 500,
                message: "Internal server error",
            });
        }
    },
    // [GET] /user/list-match
    getAll: async (req, res) => {
        try {
            const filters = req.query;
            const users = await userService.getAllUsersFormatted(filters);
            res.status(200).json({
                statusCode: 200,
                users,
            });
        } catch (error) {
            console.error("Error getting users online:", error);
            res.status(500).json({
                statusCode: 500,
                message: "Internal server error",
            });
        }
    },
    // [PUT] /update-profile
    updateUser: async (req, res) => {
        try {
            const { id } = req.body.user;
            const userUpdated = await userService.updateUserById(
                id,
                req.body.user
            );

            if (!userUpdated) {
                return res.status(404).json({ message: "User not found" });
            }
            res.status(200).json({
                statusCode: 200,
                user: userUpdated,
            });
        } catch (error) {
            console.error("Error getting user:", error);
            res.status(500).json({
                statusCode: 500,
                message: "Internal server error",
            });
        }
    },
    // [GET] /user/:id
    getUserInfo: async (req, res) => {
        try {
            const user = await userService.getProfileById(req.params.id);

            if (!user) {
                return res.status(404).json({ message: "User not found" });
            }

            res.status(200).json({
                statusCode: 200,
                user,
            });
        } catch (error) {
            console.error("Error getting user:", error);
            res.status(500).json({
                statusCode: 500,
                message: "Internal server error",
            });
        }
    },
};

```

### apps\backend\src\middleware\auth.middleware.js
```js
import { extractToken, verifyToken, attachUser } from "../utils/auth.js";

// authentication
export const authenticationMiddleware = async (req, res, next) => {
    try {
        const token = extractToken(req.headers.authorization);
        const decoded = verifyToken(token);
        await attachUser(decoded, req);
        next();
    } catch (error) {
        console.error("Error verifying token:", error);
        if (
            error.message === "Authentication required" ||
            error.message === "Invalid or expired token" ||
            error.message === "Token has expired"
        ) {
            return res.status(401).json({
                statusCode: 401,
                message: error.message,
            });
        }
        return res.status(500).json({
            statusCode: 500,
            message: "Internal server error during authentication",
        });
    }
};

//authorization
export const authorizationMiddleware = (requiredRoles) => {
    return (req, res, next) => {
        if (!req.user || !req.user.role) {
            console.error(
                `Authorization Failed: User ${req.user.id} role '${req.user.role}' required ${requiredRoles}`
            );
            return res.status(403).json({
                statusCode: 403,
                message: "Authorization Error: User's role is missing",
            });
        } else if (!requiredRoles.includes(req.user.role)) {
            console.error(
                `Authorization Failed: User ${req.user.id} role '${userRole}' required ${requiredRoles}`
            );
            return res.status(403).json({
                statusCode: 403,
                message: "Forbidden: Access denied. Insufficient permissions.",
            });
        }
        next();
    };
};

// validate credential
export const validate = (email, password) => {
    if (!email || !password) {
        return {
            status: false,
            message: "Email and password are required",
        };
    }

    if (password.length < 6) {
        return {
            status: false,
            message: "Password must be at least 6 characters long",
        };
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
        return {
            status: false,
            message: "Please provide a valid email address",
        };
    }

    return {
        status: true,
        message: "Validation successful",
    };
};

export const validateCredentialsMiddleware = (req, res, next) => {
    const { email, password } = req.body;

    const validationResult = validate(email, password);

    if (validationResult.status !== true) {
        return res.status(400).json({
            statusCode: 400,
            message: validationResult.message,
        });
    }

    next();
};

```

### apps\backend\src\middleware\match.middleware.js
```js
import { matchRepository } from "../repository/match.repository.js";
import { matchService } from "../services/match.service.js";

export const matchMiddleware = async (req, res, next) => {
    try {
        const { matchId } = req.params;

        const userId = req.user.id;

        if (!matchId)
            return res.status(404).json({ message: "Match not found" });
        const match = await matchService.get(matchId);
        if (!match) {
            return res.status(404).json({ message: "Match not found" });
        }

        const isParticipant =
            match.user_1_id === userId || match.user_2_id === userId;
        if (!isParticipant) {
            console.log(
                "Participant: ",
                match.user_1_id,
                match.user_2_id,
                "not:",
                userId
            );
            return res.status(403).json({ message: "Access denied" });
        }
        req.match = match;

        next();
    } catch (error) {
        console.error("Error in match middleware:", error);
        res.status(500).json({
            statusCode: 500,
            message: "Internal server error",
        });
    }
};

```

### apps\backend\src\middleware\message.middleware.js
```js
import { matchRepository } from "../repository/match.repository.js";

export const messageMiddleware = async (req, res, next) => {
    try {
        console.log(req?.user);

        const { roomId } = req.params;
        const userId = req.user.id;

        if (!roomId) return res.status(404).json({ message: "Room not found" });
        const room = await matchRepository.get(roomId);
        if (!room) {
            return res.status(404).json({ message: "Room not found" });
        }

        const isParticipant =
            room.user_1_id === userId || room.user_2_id === userId;
        if (!isParticipant) {
            console.log(
                "Participant: ",
                room.user_1_id,
                room.user_2_id,
                "not:",
                userId
            );
            return res.status(403).json({ message: "Access denied" });
        }
        req.room = room;

        next();
    } catch (error) {
        console.error("Error in room middleware:", error);
        res.status(500).json({
            statusCode: 500,
            message: "Internal server error",
        });
    }
};

```

### apps\backend\src\prisma\client.js
```js
import { PrismaClient } from "@prisma/client";
import dotenv from "dotenv";
import path from "path";

dotenv.config({ path: path.resolve("src/config/.env") });

const prisma = new PrismaClient();
async function listDatabases() {
    const databases = await prisma.$queryRaw`SHOW DATABASES;`;
}

listDatabases()
    .catch((e) => console.error(e))
    .finally(async () => {
        await prisma.$disconnect();
    });

async function listTables() {
    const tables = await prisma.$queryRaw`SHOW TABLES;`;
}

listTables()
    .catch((e) => console.error(e))
    .finally(async () => {
        await prisma.$disconnect();
    });

async function listUsers() {
    const users = await prisma.users.findMany();
    // console.log("Users:", users);
}

async function listMatches() {
    const matches = await prisma.matches.findMany();
    // console.log("Matches:", matches);
}

async function main() {
    await listUsers();
    await listMatches();
}

main()
    .catch((e) => console.error(e))
    .finally(async () => {
        await prisma.$disconnect();
    });
export default prisma;

```

### apps\backend\src\prisma\seeds\index.js
```js
import prisma from "../client.js";

import seedLanguages from "./seedLanguages.js";
import seedReligions from "./seedReligions.js";
import seedZodiacs from "./seedZodiacs.js";
import seedSleep from "./seedSleep.js";
import seedEducation from "./seedEducation.js";
import seedCareer from "./seedCareer.js";
import seedPet from "./seedPet.js";
import seedUser from "./seedUser.js";
import seedCharacter from "./seedCharacter.js";
import seedCommunicateStyle from "./seedCommunicateStyle.js";
import seedLoveLanguage from "./seedLoveLanguage.js";
import seedFutureFamily from "./seedFutureFamily.js";
import seedDiet from "./seedDiet.js";
import seedSNU from "./seedSNU.js";
import seedFavorite from "./seedFavorite.js";
import seedSexualOrientation from "./seedSexualOrientation.js";
import seedSearchingFor from "./seedSearchingFor.js";

async function resetTable(tableName) {
    await prisma.$executeRawUnsafe(`DELETE FROM \`${tableName}\``);
    await prisma.$executeRawUnsafe(
        `ALTER TABLE \`${tableName}\` AUTO_INCREMENT = 1`
    );
}

async function main() {
    console.log("🌱 Seeding database...");

    try {
        // Xoá + reset ID
        await resetTable("users");
        await resetTable("Pet");
        await resetTable("Language");
        await resetTable("Religion");
        await resetTable("Zodiac");
        await resetTable("Sleep");
        await resetTable("Education");
        await resetTable("Career");
        await resetTable("Character");
        await resetTable("Communicate_style");
        await resetTable("Love_language");
        await resetTable("FutureFamily");
        await resetTable("Diet");
        await resetTable("SNU");
        await resetTable("Favorite");
        await resetTable("sexual_orientation");
        await resetTable("Searchingfor");

        // Seed lại
        await seedLanguages(prisma);
        await seedReligions(prisma);
        await seedZodiacs(prisma);
        await seedSleep(prisma);
        await seedEducation(prisma);
        await seedCareer(prisma);
        await seedPet(prisma);
        await seedCharacter(prisma);
        await seedCommunicateStyle(prisma);
        await seedLoveLanguage(prisma);
        await seedFutureFamily(prisma);
        await seedDiet(prisma);
        await seedSNU(prisma);
        await seedFavorite(prisma);
        await seedSexualOrientation(prisma);
        await seedSearchingFor(prisma);
        await seedUser(prisma);

        console.log("✅ Done seeding!");
    } catch (err) {
        console.error("❌ Error seeding:", err);
    } finally {
        await prisma.$disconnect();
    }
}

main()
    .catch((e) => {
        console.error("❌ Error seeding:", e);
        process.exit(1);
    })
    .finally(async () => {
        await prisma.$disconnect();
    });

```

### apps\backend\src\prisma\seeds\seedCareer.js
```js
export default async function seedCareer(prisma) {
    await prisma.career.createMany({
        data: [
            {
                name: "Kỹ sư phần mềm",
                description: "Thiết kế và phát triển hệ thống phần mềm.",
            },
            {
                name: "Giáo viên",
                description: "Giáo dục và giảng dạy học sinh.",
            },
            {
                name: "Bác sĩ",
                description: "Khám và điều trị bệnh.",
            },
            {
                name: "Doanh nhân",
                description: "Tự điều hành công việc kinh doanh của mình.",
            },
        ],
    });
}

```

### apps\backend\src\prisma\seeds\seedCharacter.js
```js
const seedCharacter = async (prisma) => {
    await prisma.character.createMany({
        data: [
            { name: "Hài hước" },
            { name: "Nghiêm túc" },
            { name: "Tự tin" },
            { name: "Thân thiện" },
            { name: "Điềm đạm" },
        ],
    });
};

export default seedCharacter;

```

### apps\backend\src\prisma\seeds\seedCommunicateStyle.js
```js
const seedCommunicateStyle = async (prisma) => {
    await prisma.communicate_style.createMany({
        data: [
            { name: "Thẳng thắn" },
            { name: "Lắng nghe" },
            { name: "Biết chia sẻ" },
            { name: "Trầm lặng" },
        ],
    });
};
export default seedCommunicateStyle;

```

### apps\backend\src\prisma\seeds\seedDiet.js
```js
const seedDiet = async (prisma) => {
    await prisma.diet.createMany({
        data: [{ name: "Ăn chay" }, { name: "Ăn mặn" }, { name: "Ăn kiêng" }],
    });
};

export default seedDiet;

```

### apps\backend\src\prisma\seeds\seedEducation.js
```js
export default async function seedEducation(prisma) {
    await prisma.education.createMany({
        data: [
            {
                name: "Trung học phổ thông",
                description: "Hoàn thành chương trình giáo dục phổ thông.",
            },
            {
                name: "Cử nhân",
                description: "Bằng đại học hệ chính quy.",
            },
            {
                name: "Thạc sĩ",
                description: "Bằng sau đại học (cao học).",
            },
            {
                name: "Tiến sĩ",
                description: "Học vị Tiến sĩ chuyên ngành.",
            },
        ],
    });
}

```

### apps\backend\src\prisma\seeds\seedFavorite.js
```js
export default async function seedFavorite(prisma) {
    await prisma.favorite.createMany({
        data: [
            { name: "Cà phê" },
            { name: "Du lịch" },
            { name: "Âm nhạc" },
            { name: "Đọc sách" },
            { name: "Nấu ăn" },
            { name: "Thể thao" },
            { name: "Nhiếp ảnh" },
            { name: "Yoga" },
            { name: "Phim ảnh" },
            { name: "Mua sắm" },
            { name: "Chơi game" },
            { name: "Nghệ thuật" },
        ],
    });
}

```

### apps\backend\src\prisma\seeds\seedFutureFamily.js
```js
const seedFutureFamily = async (prisma) => {
    await prisma.futureFamily.createMany({
        data: [
            { name: "Muốn có con" },
            { name: "Chưa muốn có con" },
            { name: "Không muốn con" },
        ],
    });
};

export default seedFutureFamily;

```

### apps\backend\src\prisma\seeds\seedLanguages.js
```js
export default async function seedLanguages(prisma) {
    await prisma.language.createMany({
        data: [
            { name: "Vietnamese" },
            { name: "English" },
            { name: "Japanese" },
        ],
        skipDuplicates: true,
    });
}

```

### apps\backend\src\prisma\seeds\seedLoveLanguage.js
```js
const seedLoveLanguage = async (prisma) => {
    await prisma.love_language.createMany({
        data: [
            { name: "Lời nói yêu thương" },
            { name: "Hành động quan tâm" },
            { name: "Thời gian chất lượng" },
            { name: "Quà tặng" },
            { name: "Tiếp xúc cơ thể" },
        ],
    });
};

export default seedLoveLanguage;

```

### apps\backend\src\prisma\seeds\seedPet.js
```js
export default async function seedPet(prisma) {
    await prisma.pet.createMany({
        data: [
            {
                name: "Chó",
                description: "Thân thiện và trung thành.",
            },
            {
                name: "Mèo",
                description: "Độc lập và tò mò.",
            },
            {
                name: "Cá",
                description: "Yên bình và dễ chăm sóc.",
            },
            {
                name: "Chim",
                description: "Biết hót và có thể bay.",
            },
        ],
    });
}

```

### apps\backend\src\prisma\seeds\seedReligions.js
```js
export default async function seedReligions(prisma) {
    await prisma.religion.createMany({
        data: [
            {
                name: "Phật giáo",
                description:
                    "Một truyền thống tâm linh tập trung vào sự phát triển tinh thần cá nhân.",
            },
            {
                name: "Cơ đốc giáo",
                description:
                    "Tôn giáo độc thần dựa trên cuộc đời và lời dạy của Chúa Giê-su Ki-tô.",
            },
            {
                name: "Hồi giáo",
                description:
                    "Tôn giáo độc thần được khải thị qua Nhà tiên tri Muhammad.",
            },
            {
                name: "Ấn Độ giáo",
                description:
                    "Một truyền thống tôn giáo và văn hóa lớn của Nam Á.",
            },
        ],
    });
}

```

### apps\backend\src\prisma\seeds\seedSearchingFor.js
```js
const seedSearchingFor = async (prisma) => {
    console.log("Seeding 'searching for' options...");

    const options = [
        {
            name: "Mối quan hệ lâu dài",
            description:
                "Tìm kiếm một mối quan hệ nghiêm túc, ổn định và cam kết, có thể hướng tới tương lai xa hơn.",
        },
        {
            name: "Mối quan hệ ngắn hạn",
            description:
                "Tìm kiếm một mối quan hệ tình cảm trong thời gian ngắn hơn, có thể không quá ràng buộc về tương lai.",
        },
        {
            name: "Hẹn hò đơn giản / Tìm hiểu",
            description:
                "Muốn gặp gỡ, hẹn hò thông thường để tìm hiểu đối phương, xem mọi việc tiến triển tự nhiên.",
        },
        {
            name: "Kết bạn mới",
            description:
                "Mở rộng vòng tròn bạn bè, tìm kiếm những người bạn mới để chia sẻ sở thích, trò chuyện.",
        },
        {
            name: "Chưa chắc chắn / Để mở",
            description:
                "Chưa xác định rõ mục tiêu cụ thể, cởi mở với các khả năng khác nhau khi gặp gỡ người mới.",
        },
        {
            name: "Bạn tâm giao / Trò chuyện",
            description:
                "Tìm kiếm một người có thể kết nối sâu sắc về mặt tinh thần, để trò chuyện và chia sẻ.",
        },
        {
            name: "Bạn đồng hành (Hoạt động)",
            description:
                "Tìm người có cùng sở thích để cùng tham gia các hoạt động như du lịch, thể thao, sự kiện...",
        },
    ];

    await Promise.all(
        options.map((option) =>
            prisma.Searchingfor.create({
                data: {
                    name: option.name,
                    description: option.description,
                },
            })
        )
    );

    console.log("'Searching for' options seeded successfully.");
};

export default seedSearchingFor;

```

### apps\backend\src\prisma\seeds\seedSexualOrientation.js
```js
const seedSexualOrientation = async (prisma) => {
    const orientationsData = [
        {
            name: "Dị tính",
            value: "straight",
            explanation:
                "Hấp dẫn tình cảm/tình dục chủ yếu bởi người khác giới.",
        },
        {
            name: "Đồng tính",
            value: "homosexual",
            explanation:
                "Hấp dẫn tình cảm/tình dục chủ yếu bởi người cùng giới tính.",
        },
        {
            name: "Song tính",
            value: "bisexual",
            explanation:
                "Hấp dẫn tình cảm/tình dục bởi nhiều hơn một giới tính.",
        },
        {
            name: "Vô tính",
            value: "asexual",
            explanation:
                "Trải qua ít hoặc không có sự hấp dẫn tình dục đối với bất kỳ giới tính nào.",
        },
    ];

    await Promise.all(
        orientationsData.map((orientation) => {
            const description = `${orientation.value} - ${orientation.explanation}`;

            return prisma.sexual_orientation.create({
                data: {
                    name: orientation.name,
                    description: description,
                },
            });
        })
    );
};

// Export hàm seed
export default seedSexualOrientation;

```

### apps\backend\src\prisma\seeds\seedSleep.js
```js
export default async function seedSleep(prisma) {
    await prisma.sleep.createMany({
        data: [
            {
                name: "Người dậy sớm",
                description: "Thức dậy sớm và năng động vào buổi sáng.",
            },
            {
                name: "Cú đêm",
                description: "Thường thức khuya và hoạt động vào ban đêm.",
            },
        ],
    });
}

```

### apps\backend\src\prisma\seeds\seedSNU.js
```js
const seedSNU = async (prisma) => {
    await prisma.sNU.createMany({
        data: [{ name: "Có" }, { name: "Không" }, { name: "Tuỳ đối tượng" }],
    });
};

export default seedSNU;

```

### apps\backend\src\prisma\seeds\seedUser.js
```js
import { faker } from "@faker-js/faker";

export default async function seedUsers(prisma) {
    const numberOfUsersToCreate = 100; // You can adjust this number as needed

    for (let i = 0; i < numberOfUsersToCreate; i++) {
        const firstName = faker.person.firstName();
        const lastName = faker.person.lastName();
        const username = faker.internet.userName({ firstName, lastName });

        await prisma.users.create({
            data: {
                display_name: `${firstName} ${lastName}`,
                username: username,
                password: "123123", // You might want to use a more secure password generation method
                email: faker.internet.email({ firstName, lastName }),
                gender: faker.helpers.arrayElement(["male", "female"]),
                preferred_gender: faker.helpers.arrayElement([
                    "male",
                    "female",
                    "both",
                ]),
                status: faker.helpers.arrayElement(["online", "offline"]),
                Bio: {
                    create: {
                        name: firstName,
                        age: faker.number.int({ min: 18, max: 60 }),
                        status: "active",
                        about_me: faker.lorem.sentence(),
                        Searchingfor: {
                            connect: {
                                id: faker.number.int({ min: 1, max: 3 }),
                            },
                        },
                        main_inf: {
                            create: {
                                height: faker.number
                                    .int({ min: 150, max: 200 })
                                    .toString(),
                                location: faker.location.city(),
                                Language: {
                                    connect: {
                                        id: faker.number.int({
                                            min: 1,
                                            max: 3,
                                        }),
                                    },
                                },
                                Religion: {
                                    connect: {
                                        id: faker.number.int({
                                            min: 1,
                                            max: 4,
                                        }),
                                    },
                                },
                                Career: {
                                    connect: {
                                        id: faker.number.int({
                                            min: 1,
                                            max: 4,
                                        }),
                                    },
                                },
                                Education: {
                                    connect: {
                                        id: faker.number.int({
                                            min: 1,
                                            max: 4,
                                        }),
                                    },
                                },
                            },
                        },
                        Base_inf: {
                            create: {
                                Zodiac: {
                                    connect: {
                                        id: faker.number.int({
                                            min: 1,
                                            max: 12,
                                        }),
                                    },
                                },
                                Character: {
                                    connect: {
                                        id: faker.number.int({
                                            min: 1,
                                            max: 5,
                                        }),
                                    },
                                },
                                Communicate_style: {
                                    connect: {
                                        id: faker.number.int({
                                            min: 1,
                                            max: 4,
                                        }),
                                    },
                                },
                                Love_language: {
                                    connect: {
                                        id: faker.number.int({
                                            min: 1,
                                            max: 5,
                                        }),
                                    },
                                },
                                FutureFamily: {
                                    connect: {
                                        id: faker.number.int({
                                            min: 1,
                                            max: 3,
                                        }),
                                    },
                                },
                                Sexual_orientation: {
                                    connect: {
                                        id: faker.number.int({
                                            min: 1,
                                            max: 4,
                                        }),
                                    },
                                },
                            },
                        },
                        Lifestyle: {
                            create: {
                                drink: faker.datatype.boolean(),
                                smoke: faker.datatype.boolean(),
                                train: faker.datatype.boolean(),
                                Pet: {
                                    connect: {
                                        id: faker.number.int({
                                            min: 1,
                                            max: 4,
                                        }),
                                    },
                                },
                                Diet: {
                                    connect: {
                                        id: faker.number.int({
                                            min: 1,
                                            max: 3,
                                        }),
                                    },
                                },
                                Sleep: {
                                    connect: {
                                        id: faker.number.int({
                                            min: 1,
                                            max: 2,
                                        }),
                                    },
                                },
                                SNU: {
                                    connect: {
                                        id: faker.number.int({
                                            min: 1,
                                            max: 3,
                                        }),
                                    },
                                },
                            },
                        },
                        Photo: {
                            create: {
                                url: faker.image.avatar(),
                                is_profile_pic: true,
                            },
                        },
                    },
                },
            },
        });
    }
    console.log(`Created ${numberOfUsersToCreate} users.`);
}

```

### apps\backend\src\prisma\seeds\seedZodiacs.js
```js
export default async function seedZodiacs(prisma) {
    await prisma.zodiac.createMany({
        data: [
            {
                name: "Bạch Dương",
                description: "Can đảm, quyết đoán, tự tin.",
            },
            {
                name: "Kim Ngưu",
                description: "Đáng tin cậy, kiên nhẫn, thực tế.",
            },
            {
                name: "Song Tử",
                description: "Dịu dàng, tình cảm, tò mò.",
            },
            {
                name: "Cự Giải",
                description: "Kiên trì, giàu trí tưởng tượng, trung thành.",
            },
            {
                name: "Sư Tử",
                description: "Sáng tạo, đam mê, hào phóng.",
            },
            {
                name: "Xử Nữ",
                description: "Phân tích tốt, tốt bụng, chăm chỉ.",
            },
            {
                name: "Thiên Bình",
                description: "Khéo léo, công bằng, hòa đồng.",
            },
            {
                name: "Bò Cạp",
                description: "Sâu sắc, dũng cảm, đầy đam mê.",
            },
            {
                name: "Nhân Mã",
                description: "Rộng lượng, lý tưởng, hài hước.",
            },
            {
                name: "Ma Kết",
                description: "Kỷ luật, trách nhiệm, tự kiểm soát.",
            },
            {
                name: "Bảo Bình",
                description: "Tiến bộ, độc đáo, độc lập.",
            },
            {
                name: "Song Ngư",
                description: "Nhân ái, nghệ sĩ, trực giác cao.",
            },
        ],
    });
}

```

### apps\backend\src\repository\match.repository.js
```js
import prisma from "../prisma/client.js";

export const matchRepository = {
    create: (senderId, receiverId) => {
        return prisma.matches.create({
            data: {
                user_1_id: parseInt(senderId),
                user_2_id: parseInt(receiverId),
                matched_at: new Date(),
            },
        });
    },
    getAll: (userId) => {
        return prisma.matches.findMany({
            include: {
                user_match_1: {
                    select: {
                        id: true,
                        display_name: true,
                        Bio: {
                            select: {
                                Photo: true,
                                age: true,
                            },
                        },
                    },
                },
                user_match_2: {
                    select: {
                        id: true,
                        display_name: true,
                        Bio: {
                            select: {
                                Photo: true,
                                age: true,
                            },
                        },
                    },
                },
            },
            where: {
                AND: [
                    { OR: [{ user_1_id: userId }, { user_2_id: userId }] },
                    { is_accept: true },
                ],
            },
        });
    },
    get: (id) => {
        return prisma.matches.findFirst({
            where: {
                id,
            },
            include: {
                user_match_1: {
                    select: {
                        id: true,
                        display_name: true,
                        Bio: {
                            select: {
                                Photo: {
                                    where: {
                                        is_profile_pic: true,
                                    },
                                    select: {
                                        url: true,
                                    },
                                    take: 1,
                                },
                            },
                        },
                    },
                },
                user_match_2: {
                    select: {
                        id: true,
                        display_name: true,
                        Bio: {
                            select: {
                                Photo: {
                                    where: {
                                        is_profile_pic: true,
                                    },
                                    select: {
                                        url: true,
                                    },
                                    take: 1,
                                },
                            },
                        },
                    },
                },
                messages: {
                    orderBy: { sent_at: "desc" },
                    select: {
                        id: true,
                        content: true,
                        sent_at: true,
                        sender: {
                            select: {
                                id: true,
                                display_name: true,
                            },
                        },
                        receiver: {
                            select: {
                                id: true,
                                display_name: true,
                            },
                        },
                    },
                },
            },
        });
    },
    find: (senderId, receiverId) => {
        return prisma.matches.findFirst({
            where: {
                OR: [
                    {
                        user_1_id: parseInt(senderId),
                        user_2_id: parseInt(receiverId),
                    },
                    {
                        user_1_id: parseInt(receiverId),
                        user_2_id: parseInt(senderId),
                    },
                ],
            },
        });
    },
    update: (id, isAccept) => {
        return prisma.matches.update({
            where: { id },
            data: { is_accept: isAccept },
        });
    },
};

```

### apps\backend\src\repository\message.repository.js
```js
import prisma from "../prisma/client.js";

export const messageRepository = {
    // get messages
    getAll: (matchId) => {
        return prisma.messages.findMany({
            include: {
                sender: {
                    select: {
                        id: true,
                        display_name: true,
                    },
                },
                receiver: {
                    select: {
                        id: true,
                        display_name: true,
                    },
                },
            },
            where: {
                match_id: matchId,
            },
            orderBy: {
                sent_at: "asc",
            },
        });
    },
    // create new message
    create: (matchId, senderId, receiverId, content) => {
        console.log(matchId, senderId, receiverId, content);

        return prisma.messages.create({
            data: {
                sender_id: senderId,
                receiver_id: receiverId,
                match_id: matchId,
                content,
            },
            include: {
                sender: {
                    select: {
                        id: true,
                        display_name: true,
                    },
                },
                receiver: {
                    select: {
                        id: true,
                        display_name: true,
                    },
                },
            },
        });
    },
    // enhance....
    // edit message
    // delete message
};

```

### apps\backend\src\repository\metadata.repository.js
```js
import prisma from "../prisma/client.js";

export const metadataRepository = {
    get: async () => {
        const transformOption = (item) => ({
            id: item.id,
            value: item.name,
        });

        const [
            careersData,
            petsData,
            languagesData,
            religionsData,
            zodiacsData,
            charactersData,
            communicateStylesData,
            educationsData,
            dietsData,
            sleepsData,
            loveLanguagesData,
            futureFamiliesData,
            snusData,
            favoriteData,
            sexualOrientationData,
            searchingForData,
        ] = await Promise.all([
            prisma.career.findMany({
                select: { id: true, name: true },
                orderBy: { name: "asc" },
            }),
            prisma.pet.findMany({
                select: { id: true, name: true },
                orderBy: { name: "asc" },
            }),
            prisma.language.findMany({
                select: { id: true, name: true },
                orderBy: { name: "asc" },
            }),
            prisma.religion.findMany({
                select: { id: true, name: true },
                orderBy: { name: "asc" },
            }),
            prisma.zodiac.findMany({
                select: { id: true, name: true },
                orderBy: { name: "asc" },
            }),
            prisma.character.findMany({
                select: { id: true, name: true },
                orderBy: { name: "asc" },
            }),
            prisma.communicate_style.findMany({
                select: { id: true, name: true },
                orderBy: { name: "asc" },
            }),
            prisma.education.findMany({
                select: { id: true, name: true },
                orderBy: { name: "asc" },
            }),
            prisma.diet.findMany({
                select: { id: true, name: true },
                orderBy: { name: "asc" },
            }),
            prisma.sleep.findMany({
                select: { id: true, name: true },
                orderBy: { name: "asc" },
            }),
            prisma.love_language.findMany({
                select: { id: true, name: true },
                orderBy: { name: "asc" },
            }),
            prisma.futureFamily.findMany({
                select: { id: true, name: true },
                orderBy: { name: "asc" },
            }),
            prisma.SNU.findMany({
                select: { id: true, name: true },
                orderBy: { name: "asc" },
            }),
            prisma.favorite.findMany({
                select: { id: true, name: true },
                orderBy: { name: "asc" },
            }),
            prisma.sexual_orientation.findMany({
                select: { id: true, name: true, description: true },
                orderBy: { name: "asc" },
            }),
            prisma.searchingfor.findMany({
                select: { id: true, name: true, description: true },
                orderBy: { name: "asc" },
            }),
        ]);

        // Trả về dữ liệu đã biến đổi
        return {
            zodiacs: zodiacsData.map(transformOption),
            languages: languagesData.map(transformOption),
            religions: religionsData.map(transformOption),
            careers: careersData.map(transformOption),
            educations: educationsData.map(transformOption),
            characters: charactersData.map(transformOption),
            communicateStyles: communicateStylesData.map(transformOption),
            loveLanguages: loveLanguagesData.map(transformOption),
            futureFamilies: futureFamiliesData.map(transformOption),
            pets: petsData.map(transformOption),
            diets: dietsData.map(transformOption),
            sleeps: sleepsData.map(transformOption),
            snus: snusData.map(transformOption),
            favorites: favoriteData.map(transformOption),
            sexualOrientations: sexualOrientationData.map(transformOption),
            searchingFor: searchingForData.map(transformOption),
        };
    },
};

```

### apps\backend\src\repository\notification.repository.js
```js
import prisma from "../prisma/client.js";

export const notificationRepository = {
    create: (senderId, receiverId, entityId, type) => {
        return prisma.notifications.create({
            data: {
                sender_id: parseInt(senderId),
                receiver_id: parseInt(receiverId),
                entity_id: parseInt(entityId),
                type,
            },
        });
    },
    getAll: (userId) => {
        return prisma.notifications.findMany({
            include: {
                sender: {
                    select: {
                        id: true,
                        display_name: true,
                        Bio: {
                            select: {
                                Photo: {
                                    select: {
                                        url: true,
                                    },
                                    where: {
                                        is_profile_pic: true,
                                    },
                                },
                                age: true,
                            },
                        },
                    },
                },
            },
            where: {
                AND: [{ receiver_id: parseInt(userId) }, { is_hidden: false }],
            },
            orderBy: { created_at: "desc" },
        });
    },
    update: (id) => {
        return prisma.notifications.update({
            where: { id: parseInt(id) },
            data: { is_hidden: true },
        });
    },
};

```

### apps\backend\src\repository\user.repository.js
```js
import prisma from "../prisma/client.js";

export const userRepository = {
    findUserByEmail: (email) => {
        return prisma.users.findUnique({
            where: { email },
            include: {
                Bio: {
                    include: {
                        main_inf: {
                            include: {
                                Language: true,
                                Religion: true,
                                Career: true,
                                Education: true,
                            },
                        },
                        Base_inf: {
                            include: {
                                Zodiac: true,
                                Character: true,
                                Communicate_style: true,
                                Love_language: true,
                                FutureFamily: true,
                            },
                        },
                        Lifestyle: {
                            include: {
                                Pet: true,
                                Diet: true,
                                Sleep: true,
                                SNU: true,
                            },
                        },
                        Photo: true,
                    },
                },
                user_favorites: true,
            },
        });
    },
    findUserById: (id) => {
        return prisma.users.findUnique({
            where: { id: parseInt(id) },
            include: {
                Bio: {
                    include: {
                        main_inf: {
                            include: {
                                Language: true,
                                Religion: true,
                                Career: true,
                                Education: true,
                            },
                        },
                        Base_inf: {
                            include: {
                                Zodiac: true,
                                Character: true,
                                Communicate_style: true,
                                Love_language: true,
                                FutureFamily: true,
                            },
                        },
                        Lifestyle: {
                            include: {
                                Pet: true,
                                Diet: true,
                                Sleep: true,
                                SNU: true,
                            },
                        },
                        Photo: true,
                    },
                },
                user_favorites: true,
            },
        });
    },
    getUsers: (filters = {}) => {
        const {
            languageIds,
            educationIds,
            zodiacIds,
            characterIds,
            comunicateStyleIds,
            loveLanguageIds,
            futureFamilyIds,
            sexualOrientationIds,
            petIds,
            dietIds,
            sleepIds,
            snuIds,
            searchingForIds,
        } = filters;

        return prisma.users.findMany({
            where: {
                Bio: {
                    main_inf: {
                        Language: {
                            id: {
                                in: languageIds,
                            },
                        },
                        Education: {
                            id: {
                                in: educationIds,
                            },
                        },
                    },
                    Base_inf: {
                        Zodiac: {
                            id: {
                                in: zodiacIds,
                            },
                        },
                        Character: {
                            id: {
                                in: characterIds,
                            },
                        },
                        Communicate_style: {
                            id: {
                                in: comunicateStyleIds,
                            },
                        },
                        Love_language: {
                            id: {
                                in: loveLanguageIds,
                            },
                        },
                        FutureFamily: {
                            id: {
                                in: futureFamilyIds,
                            },
                        },
                        Sexual_orientation: {
                            id: {
                                in: sexualOrientationIds,
                            },
                        },
                    },
                    Lifestyle: {
                        Pet: {
                            id: {
                                in: petIds,
                            },
                        },
                        Diet: {
                            id: {
                                in: dietIds,
                            },
                        },
                        Sleep: {
                            id: {
                                in: sleepIds,
                            },
                        },
                        SNU: {
                            id: {
                                in: snuIds,
                            },
                        },
                    },
                    Searchingfor: {
                        id: {
                            in: searchingForIds,
                        },
                    },
                },
            },
            include: {
                Bio: {
                    include: {
                        main_inf: {
                            include: {
                                Language: {},
                                Religion: true,
                                Career: true,
                                Education: {},
                            },
                        },
                        Base_inf: {
                            include: {
                                Zodiac: {},
                                Character: {},
                                Communicate_style: {},
                                Love_language: {},
                                FutureFamily: {},
                                Sexual_orientation: {},
                            },
                        },
                        Lifestyle: {
                            include: {
                                Pet: {},
                                Diet: {},
                                Sleep: {},
                                SNU: {},
                            },
                        },
                        Photo: true,
                        Searchingfor: {},
                    },
                },
                user_favorites: {},
            },
        });
    },
    createUser: (userData) => {
        return prisma.users.create({
            data: {
                ...userData,
                Bio: {
                    create: {
                        main_inf: { create: {} },
                        Base_inf: { create: {} },
                        Lifestyle: { create: {} },
                        Photo: {
                            create: [
                                {
                                    url: "",
                                    is_profile_pic: true,
                                },
                                {
                                    url: "",
                                    is_profile_pic: true,
                                },
                            ],
                        },
                    },
                },
            },
        });
    },
    updateUserById: async (userId, user, favorites) => {
        await prisma.user_favorite.deleteMany({
            where: { user_id: userId },
        });
        if (favorites?.length > 0) {
            await prisma.user_favorite.createMany({
                data: favorites.map((favoriteId) => ({
                    user_id: parseInt(userId),
                    favorite_id: favoriteId,
                })),
            });
        }
        const userUpdated = await prisma.users.update({
            where: {
                id: parseInt(userId),
            },
            data: user,
            include: {
                Bio: {
                    include: {
                        main_inf: {
                            include: {
                                Language: true,
                                Religion: true,
                                Career: true,
                                Education: true,
                            },
                        },
                        Base_inf: {
                            include: {
                                Zodiac: true,
                                Character: true,
                                Communicate_style: true,
                                Love_language: true,
                                FutureFamily: true,
                            },
                        },
                        Lifestyle: {
                            include: {
                                Pet: true,
                                Diet: true,
                                Sleep: true,
                                SNU: true,
                            },
                        },
                        Photo: true,
                    },
                },
                user_favorites: true,
            },
        });

        return userUpdated;
    },
    updateUserEmailVerifiedStatus: (userId, isVerified) => {
        return prisma.users.update({
            where: { id: userId },
            data: { is_verified: isVerified },
        });
    },
};

```

### apps\backend\src\routes\auth.routes.js
```js
import express from "express";
import { authController } from "../controllers/auth.controller.js";
import { validateCredentialsMiddleware } from "../middleware/auth.middleware.js";

const router = express.Router();

router.post("/login", validateCredentialsMiddleware, authController.login);
router.post(
    "/register",
    validateCredentialsMiddleware,
    authController.register
);
router.post("/send-verification-otp", authController.requestVerificationCode);
router.post("/verify-otp", authController.verifyEmailWithOtp);

export default router;

```

### apps\backend\src\routes\index.js
```js
import { Router } from "express";

const router = Router();

router.get("/hello", (req, res) => {
    res.json({ message: "Hello from Express Backend!" });
});

import messageRoutes from "./message.routes.js";
import notificationRoutes from "./notifications.routes.js";
import reportRoutes from "./reports.routes.js";
import authRoutes from "./auth.routes.js";
import userRoutes from "./user.routes.js";
import matchRoutes from "./match.routes.js";
import metadataRoutes from "./metadata.routes.js";
import uploadRoutes from "./upload.routes.js";

router.use("/messages", messageRoutes);
router.use("/metadata", metadataRoutes);
router.use("/notifications", notificationRoutes);
router.use("/reports", reportRoutes);
router.use("/auth", authRoutes);
router.use("/matches", matchRoutes);
router.use("/", userRoutes);
router.use("/upload", uploadRoutes);

export default router;

```

### apps\backend\src\routes\match.routes.js
```js
import express from "express";
import { matchController } from "../controllers/match.controller.js";
import { authenticationMiddleware } from "../middleware/auth.middleware.js";
import { matchMiddleware } from "../middleware/match.middleware.js";

const router = express.Router();
router.get(
    "/:matchId",
    authenticationMiddleware,
    matchMiddleware,
    matchController.get
);
router.get("/", authenticationMiddleware, matchController.getAll);
router.post("/", authenticationMiddleware, matchController.create);
router.put("/:matchId", authenticationMiddleware, matchController.update);

export default router;

```

### apps\backend\src\routes\message.routes.js
```js
import { Router } from "express";
import { messageController } from "../controllers/message.controller.js";
import { authenticationMiddleware } from "../middleware/auth.middleware.js";
import { messageMiddleware } from "../middleware/message.middleware.js";

const router = Router();

router.get(
    "/:matchId",
    authenticationMiddleware,
    // messageMiddleware,
    messageController.getAll
);

router.post("/", authenticationMiddleware, messageController.create);

export default router;

```

### apps\backend\src\routes\metadata.routes.js
```js
import express from "express";
import { metadataController } from "../controllers/metadata.controller.js";

const router = express.Router();

router.get("/", metadataController.get);

export default router;

```

### apps\backend\src\routes\notifications.routes.js
```js
import express from "express";
import { notificationController } from "../controllers/notification.controller.js";
import { authenticationMiddleware } from "../middleware/auth.middleware.js";

const router = express.Router();

router.post("/", authenticationMiddleware, notificationController.create);
router.get("/", authenticationMiddleware, notificationController.getAll);

export default router;

```

### apps\backend\src\routes\reports.routes.js
```js
import express from "express";
import { authenticationMiddleware } from "../middleware/auth.middleware.js";
import { reportController } from "../controllers/reports.controller.js";

const router = express.Router();

// router.post("/", authenticationMiddleware, reportController.create);
// router.get("/", authenticationMiddleware, reportController.getAll);

export default router;

```

### apps\backend\src\routes\upload.routes.js
```js
import express from "express";
import upload from "../utils/upload.js";
import { uploadController } from "../controllers/upload.controller.js";

const router = express.Router();

router.post("/single", upload.single("image"), uploadController.uploadSingle);

router.post(
    "/multiple",
    upload.array("images", 6),
    uploadController.uploadMultiple
);

export default router;

```

### apps\backend\src\routes\user.routes.js
```js
import express from "express";
import { userController } from "../controllers/user.controller.js";
import { authenticationMiddleware } from "../middleware/auth.middleware.js";

const router = express.Router();

router.get("/me", authenticationMiddleware, userController.getProfile);
router.get("/user/list-match", userController.getAll);
router.get("/user/:id", authenticationMiddleware, userController.getUserInfo);
router.put(
    "/update-profile",
    authenticationMiddleware,
    userController.updateUser
);

export default router;

```

### apps\backend\src\services\auth.service.js
```js
import bcrypt from "bcryptjs";
import { createToken } from "../utils/auth.js";
import { generateOTP } from "../utils/otpGenerator.js"; // Import hàm tạo OTP
import { emailService } from "./email.service.js"; // Import email service
import { userService } from "../services/user.service.js";
import Redis from "ioredis"; // Import Redis client

const SALT_ROUNDS = 10;
const redisClient = new Redis(process.env.REDIS_URL); // Lấy URL từ .env
const OTP_EXPIRY_SECONDS = 5 * 60;

export const authService = {
    loginUser: async (email, password) => {
        const user = await userService.getProfileByEmail(email);
        if (!user) throw new Error("User not found");

        // const isValidPassword = await bcrypt.compare(password, user.password);
        // console.log(isValidPassword);

        // if (!isValidPassword) throw new Error("Password is not correct");
        const token = createToken(user);
        return { token, user };
    },
    registerUserNew: async (email, password) => {
        const existingUser = await userService.getProfileByEmail(email);
        if (existingUser) throw new Error("Email already registered");
        const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);
        const newUserInput = {
            email,
            password: hashedPassword,
            display_name: email,
            username: email,
            gender: "male",
            preferred_gender: "female",
        };
        const newUserRaw = await userService.createUser(newUserInput);
        const returnedUserInfo = {
            id: newUserRaw.id,
            displayName: newUserRaw.display_name,
            email: newUserRaw.email,
            username: newUserRaw.username,
        };

        return returnedUserInfo;
    },
    sendOtpForVerification: async (email) => {
        const otp = generateOTP();

        try {
            const redisKey = `otp:${email}`;
            await redisClient.set(redisKey, otp, "EX", OTP_EXPIRY_SECONDS);
            await emailService.sendVerificationOtp(email, otp);

            console.log(`OTP for ${email} stored and sent.`);
            return true;
        } catch (error) {
            console.error(`Error sending OTP for ${email}:`, error);
            throw new Error("Không thể gửi mã xác thực.");
        }
    },
    verifyEmailOtp: async (email, otp) => {
        const redisKey = `otp:${email}`;
        const storedOtp = await redisClient.get(redisKey);

        if (!storedOtp) {
            throw new Error("Mã OTP đã hết hạn hoặc không tồn tại.");
        }

        if (storedOtp !== otp) {
            throw new Error("Mã OTP không chính xác.");
        }

        try {
            const user = await userService.getProfileByEmail(email);
            if (user) {
                await userService.updateUserEmailVerifiedStatus(user.id, true);
                await redisClient.del(redisKey);
            }
            console.log(`Email ${email} verified successfully.`);

            return true;
        } catch (error) {
            console.error(`Error verifying OTP for ${email}:`, error);
            throw new Error("Lỗi trong quá trình xác thực OTP.");
        }
    },
};

```

### apps\backend\src\services\email.service.js
```js
import nodemailer from "nodemailer";

const transporter = nodemailer.createTransport({
    host: process.env.EMAIL_HOST,
    port: parseInt(process.env.EMAIL_PORT || "587"),
    secure: process.env.EMAIL_SECURE === "true",
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
    },
});

export const emailService = {
    sendVerificationOtp: async (toEmail, otp) => {
        const mailOptions = {
            from: `${process.env.EMAIL_FROM}`,
            to: toEmail,
            subject: "Mã Xác Thực Email Của Bạn",
            text: `Mã xác thực của bạn là: ${otp}. Mã này sẽ hết hạn sau 5 phút.`,
            html: `<p>Mã xác thực của bạn là: <strong>${otp}</strong>. Mã này sẽ hết hạn sau 5 phút.</p>`,
        };

        console.log(mailOptions);

        try {
            console.log(transporter);

            let info = await transporter.sendMail(mailOptions);
            console.log(
                `Verification OTP sent to ${toEmail}: %s`,
                info.messageId
            );
            return info;
        } catch (error) {
            console.error(`Error sending OTP to ${toEmail}:`, error);
            throw new Error("Gửi email xác thực thất bại.");
        }
    },
};

```

### apps\backend\src\services\match.service.js
```js
import { matchRepository } from "../repository/match.repository.js";
import { notificationService } from "../services/notification.service.js";

export const matchService = {
    get: (id) => {
        console.log("match service", id);

        return matchRepository.get(parseInt(id));
    },
    getAll: async (userId) => {
        return matchRepository.getAll(userId).then((matches) => {
            return matches
                .map((match) => {
                    const otherUser =
                        match.user_1_id === userId
                            ? match.user_match_2
                            : match.user_match_1;
                    if (!otherUser) return null;
                    const photo =
                        otherUser.Bio?.Photo?.[0]?.url ||
                        "https://images.unsplash.com/photo-1529626455594-4ff0802cfb7e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=687&q=80";
                    return {
                        id: match.id,
                        name: otherUser.display_name,
                        age: otherUser.Bio?.age || 0,
                        matchTime: match.matched_at
                            ? new Date(match.matched_at).toLocaleDateString()
                            : "Hôm nay",
                        photo,
                        unread: false,
                    };
                })
                .filter((match) => match !== null);
        });
    },
    create: async (senderId, receiverId) => {
        const isExistMatch = await matchRepository.find(senderId, receiverId);

        if (isExistMatch) {
            throw new Error("The match has already been created");
        }

        try {
            const match = await matchRepository.create(senderId, receiverId);

            const notification = await notificationService.create(
                senderId,
                receiverId,
                match.id,
                "LIKED"
            );

            if (!notification) {
                throw new Error("Cannot create notification");
            }

            return match;
        } catch (error) {
            throw new Error("Cannot create match");
        }
    },
    update: async (id, isAccept, receiverId, notificationId) => {
        try {
            const match = await matchRepository.update(parseInt(id), isAccept);

            const senderId =
                match.user_1_id === receiverId
                    ? match.user_2_id
                    : match.user_1_id;

            if (isAccept) {
                const notificationForReceiver =
                    await notificationService.create(
                        senderId,
                        receiverId,
                        match.id,
                        "NEW_MATCH"
                    );

                const notificationForSender = await notificationService.create(
                    receiverId,
                    senderId,
                    match.id,
                    "NEW_MATCH"
                );

                const notification = await notificationService.update(
                    notificationId
                );

                return match;
            }
            console.log("update match", id, isAccept);
        } catch (error) {
            console.log("Error updating match:", error);
        }
    },
};

```

### apps\backend\src\services\message.service.js
```js
import { matchRepository } from "../repository/match.repository.js";
import { messageRepository } from "../repository/message.repository.js";
import { messageFormatted } from "../utils/message.utils.js";

export const messageService = {
    create: async (matchId, senderId, receiverId, content) => {
        const message = await messageRepository.create(
            matchId,
            senderId,
            receiverId,
            content
        );
        const result = messageFormatted(message);

        return result;
    },
    getAll: async (matchId, userId) => {
        const messages = await messageRepository.getAll(matchId);
        const match = await matchRepository.get(matchId);
        const receiver =
            match.user_1_id === userId
                ? match.user_match_2
                : match.user_match_1;
        const result = messages.map((message) =>
            messageFormatted(message, userId)
        );

        return {
            id: receiver.id,
            name: receiver.display_name,
            photo: receiver.Bio?.Photo[0]?.url,
            messages: result,
        };
    },
};

```

### apps\backend\src\services\metadata.service.js
```js
import { metadataRepository } from "../repository/metadata.repository.js";

export const metadataService = {
    get: () => {
        return metadataRepository.get();
    },
};

```

### apps\backend\src\services\notification.service.js
```js
import { notificationRepository } from "../repository/notification.repository.js";
import { formatNotification } from "../utils/notification.utils.js";

export const notificationService = {
    getAll: async (userId) => {
        const notifications = await notificationRepository.getAll(userId);
        const notificationFormatted = notifications.map((notification) =>
            formatNotification(notification)
        );
        return notificationFormatted;
    },
    create: (senderId, receiverId, entityId, type) => {
        try {
            return notificationRepository.create(
                senderId,
                receiverId,
                entityId,
                type
            );
        } catch (error) {
            throw new Error("Cannot create notification: " + error.message);
        }
    },
    update: (id) => {
        try {
            return notificationRepository.update(id);
        } catch (error) {
            throw new Error("Cannot update notification: " + error.message);
        }
    },
};

```

### apps\backend\src\services\reports.service.js
```js
export const reportService = {};

```

### apps\backend\src\services\user.service.js
```js
import { userRepository } from "../repository/user.repository.js";
import { formatUser } from "../utils/user.utils.js";

export const userService = {
    createUser: async (userData) => {
        return await userRepository.createUser(userData);
    },
    getProfileByEmail: async (email) => {
        const userRaw = await userRepository.findUserByEmail(email);
        const userFormatted = formatUser(userRaw);
        if (userFormatted) {
            // delete userFormatted.password;
        }
        return userFormatted;
    },
    getProfileById: async (id) => {
        const userRaw = await userRepository.findUserById(id);
        const userFormatted = formatUser(userRaw);
        if (userFormatted) {
            delete userFormatted.password;
        }
        return userFormatted;
    },
    getAllUsersFormatted: async (filters) => {
        const filtersFormatted = {
            languageIds: filters?.["language"]?.split(",")?.map(Number),
            educationIds: filters?.["education"]?.split(",")?.map(Number),
            zodiacIds: filters?.["zodiac"]?.split(",")?.map(Number),
            characterIds: filters?.["character"]?.split(",")?.map(Number),
            comunicateStyleIds: filters?.["communicate"]
                ?.split(",")
                ?.map(Number),
            loveLanguageIds: filters?.["lovelanguage"]?.split(",")?.map(Number),
            futureFamilyIds: filters?.["futurefamily"]?.split(",")?.map(Number),
            sexualOrientationIds: filters?.["sexOrientation"]
                ?.split(",")
                ?.map(Number),
            petIds: filters?.["pet"]?.split(",")?.map(Number),
            dietIds: filters?.["diet"]?.split(",")?.map(Number),
            sleepIds: filters?.["sleep"]?.split(",")?.map(Number),
            snuIds: filters?.["sns"]?.split(",")?.map(Number),
            searchingForIds: filters?.["searchingfor"]?.split(",")?.map(Number),
        };

        const usersRaw = await userRepository.getUsers(filtersFormatted);

        const usersFormatted = usersRaw.map((user) => {
            const formatted = formatUser(user);
            if (formatted) {
                delete formatted.password;
            }
            return formatted;
        });
        return usersFormatted;
    },
    updateUserById: async (userId, user) => {
        const {
            displayName,
            password,
            gender,
            preferredGender,
            name,
            age,
            aboutMe,
            height,
            location,
            birthday,
            languageId,
            religionId,
            careerId,
            educationId,
            zodiacId,
            characterId,
            communicateStyleId,
            loveLanguageId,
            futureFamilyId,
            drink,
            smoke,
            train,
            petId,
            dietId,
            sleepId,
            snuId,
            photos,
            favorites,
            maxRadius,
        } = user;

        const photoUpdate =
            photos?.length > 0
                ? {
                      Photo: {
                          updateMany: photos?.map((photo) => ({
                              where: { id: photo?.id },
                              data: {
                                  url: photo?.avatarUrl,
                                  is_profile_pic: photo?.isProfilePic,
                              },
                          })),
                      },
                  }
                : {};
        const data = {
            display_name: displayName,
            gender,
            preferred_gender: preferredGender,
            is_full_information: true,
            birthday,
            Bio: {
                update: {
                    name,
                    age,
                    about_me: aboutMe,
                    address: location,
                    min_radius: 1,
                    max_radius: maxRadius,
                    main_inf: {
                        update: {
                            height,
                            location,
                            Language: {
                                connect: { id: parseInt(languageId) },
                            },
                            Religion: {
                                connect: { id: parseInt(religionId) },
                            },
                            Career: {
                                connect: { id: parseInt(careerId) },
                            },
                            Education: {
                                connect: { id: parseInt(educationId) },
                            },
                        },
                    },
                    Base_inf: {
                        update: {
                            Zodiac: {
                                connect: { id: parseInt(zodiacId) },
                            },
                            Character: {
                                connect: { id: parseInt(characterId) },
                            },
                            Communicate_style: {
                                connect: {
                                    id: parseInt(communicateStyleId),
                                },
                            },
                            Love_language: {
                                connect: { id: parseInt(loveLanguageId) },
                            },
                            FutureFamily: {
                                connect: { id: parseInt(futureFamilyId) },
                            },
                        },
                    },
                    Lifestyle: {
                        update: {
                            drink,
                            smoke,
                            train,
                            Pet: {
                                connect: { id: parseInt(petId) },
                            },
                            Diet: {
                                connect: { id: parseInt(dietId) },
                            },
                            Sleep: {
                                connect: { id: parseInt(sleepId) },
                            },
                            SNU: {
                                connect: { id: parseInt(snuId) },
                            },
                        },
                    },
                    ...photoUpdate,
                },
            },
        };

        return await userRepository.updateUserById(userId, data, favorites);
    },
    updateUserEmailVerifiedStatus: async (userId, isVerified) => {
        return await userRepository.updateUserEmailVerifiedStatus(
            userId,
            isVerified
        );
    },
};

```

### apps\backend\src\sockets\messages.socket.js
```js
import { matchRepository } from "../repository/match.repository.js";
import { messageService } from "../services/message.service.js";
import { findSocketId } from "../utils/socketHelpers.js";

const setupMessageSocket = (io, socket, user, getUsers) => {
    socket.on("new-message", async (data) => {
        console.log("new-message", data);

        const users = getUsers();
        const senderId = user?.id;
        const { receiverId, matchId, content } = data;
        const receiverSocketId = findSocketId(users, receiverId);
        // Kiểm tra dữ liệu đầu vào
        if (!senderId || !receiverId || !matchId || !content) {
            console.log(
                "missing required fields",
                "new-message",
                senderId,
                receiverId,
                matchId,
                content
            );

            return socket.emit("errorMessage", {
                error: "Missing required fields",
            });
        }
        console.log(receiverSocketId);

        socket.to(receiverSocketId).emit("receive-new-message");
    });

    socket.on("request-chat", async (receiverId) => {
        const users = getUsers();
        const sender_id = user.id;
        const receiverSocketId = findSocketId(users, receiverId);
        if (!sender_id || !receiverId) {
            return socket.emit("errorMessage", {
                error: "Missing required fields",
            });
        }
        socket.to(receiverSocketId).emit("receive-request-chat", sender_id);
        socket.emit("request-chat", "Waiting for response...".trim());
    });

    socket.on("accept-chat", async (senderId) => {
        const users = getUsers();
        const receiverId = user.id;
        if (!senderId || !receiverId) {
            return socket.emit("errorMessage", {
                error: "Missing required fields",
            });
        }
        const senderSocketId = findSocketId(users, senderId);

        // create a room
        const room = await matchRepository.createRoom({ senderId, receiverId });

        socket
            .to(senderSocketId)
            .emit("receive-accept-chat", { receiverId, room });
    });

    socket.on("decline-chat", async (data) => {
        const users = getUsers();
        const senderId = data;
        const receiverId = user.id;

        // Kiểm tra dữ liệu đầu vào
        if (!senderId || !receiverId) {
            return socket.emit("errorMessage", {
                error: "Missing required fields",
            });
        }
        const senderSocketId = findSocketId(users, senderId);
        socket.to(senderSocketId).emit("decline-chat", receiverId);
    });
};

export default setupMessageSocket;

```

### apps\backend\src\sockets\notifications.socket.js
```js
import prisma from "../prisma/client.js";
import { userService } from "../services/user.service.js";
import { findSocketId } from "../utils/socketHelpers.js";

const setupNotificationSocket = (io, socket, user, getUsers) => {
    socket.on("joinUser", (userId) => {
        const room = `user:${userId}`;
        socket.join(room);
    });

    socket.on("sendNotification", async (data) => {
        const { recipient_id, sender_id, type, content } = data;

        // Kiểm tra dữ liệu đầu vào
        if (!recipient_id || !type || !content) {
            return socket.emit("errorNotification", {
                error: "Missing required fields",
            });
        }

        try {
            // Lưu thông báo vào cơ sở dữ liệu
            const notification = await prisma.notification.create({
                data: { recipient_id, sender_id, type, content },
            });

            // Phát thông báo cho người nhận
            io.to(`user:${recipient_id}`).emit(
                "receiveNotification",
                notification
            );
        } catch (error) {
            console.error("[Socket:Notification] DB Error:", error);
            socket.emit("errorNotification", {
                error: "Failed to save notification",
            });
        }
    });

    socket.on("accept-match", async (match) => {
        const users = getUsers();

        const receiverId = user?.id;
        const senderId =
            match?.user_1_id === receiverId
                ? match?.user_2_id
                : match?.user_1_id;

        const receiverSocketId = findSocketId(users, receiverId);
        const senderSocketId = findSocketId(users, senderId);

        let sender;
        let receiver;

        if (receiverId) receiver = await userService.getProfileById(receiverId);

        if (senderId) sender = await userService.getProfileById(senderId);

        console.log(sender, receiver);

        const senderProfile = {
            id: sender?.id,
            name: sender?.displayName,
            photos: sender?.photos,
        };
        const receiverProfile = {
            id: receiver?.id,
            name: receiver?.displayName,
            photos: receiver?.photos,
        };

        socket.to(receiverSocketId).emit("new-match", senderProfile);
        socket.to(senderSocketId).emit("new-match", receiverProfile);
    });
};

export default setupNotificationSocket;

```

### apps\backend\src\utils\auth.js
```js
import jwt from "jsonwebtoken";
import { userRepository } from "../repository/user.repository.js";
import { formatUser } from "../utils/user.utils.js";

export const createToken = (user) => {
    if (!process.env.JWT_SECRET) {
        throw new Error("JWT_SECRET is not configured");
    }
    // generate jwt token
    return jwt.sign(
        { userId: user.id, email: user.email },
        process.env.JWT_SECRET,
        {
            expiresIn: "24h",
        }
    );
};

export const extractToken = (authHeaders) => {
    if (!authHeaders || !authHeaders.startsWith("Bearer ")) {
        throw new Error("Authentication required");
    }
    return authHeaders.split(" ")[1];
};

export const verifyToken = (token) => {
    if (!process.env.JWT_SECRET) {
        throw new Error("JWT_SECRET is not configured");
    }
    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        return decoded;
    } catch (error) {
        if (error.name === "JsonWebTokenError") {
            throw new Error("Invalid token");
        }
        if (error.name === "TokenExpiredError") {
            throw new Error("Token has expired");
        }
        throw new Error(`Token verification failed: ${error.message}`);
    }
};

export const attachUser = async (decoded, req) => {
    const user = await userRepository.findUserByEmail(
        decoded.email.toLowerCase()
    );

    if (!user) {
        throw new Error("User not found");
    }

    const userFormatted = formatUser(user);
    req.user = userFormatted;
};

```

### apps\backend\src\utils\message.utils.js
```js
export const messageFormatted = (message, userId) => ({
    id: message?.id,
    text: message?.content,
    time: message?.sent_at,
    sender: userId === message?.sender_id ? "me" : "them",
});

```

### apps\backend\src\utils\notification.utils.js
```js
export const formatNotification = (notification) => {
    return {
        id: notification?.id,
        type: notification?.type,
        user: {
            name: notification?.sender?.display_name,
            photo: notification?.sender?.Bio?.Photo,
        },
        time: notification?.created_at,
        read: false,
        matchId: notification?.entity_id,
    };
};

```

### apps\backend\src\utils\otpGenerator.js
```js
export const generateOTP = (length = 6) => {
    let otp = "";
    for (let index = 0; index < length; index++) {
        otp += Math.floor(Math.random() * 10);
    }
    return otp;
};

```

### apps\backend\src\utils\socket.js
```js
let ioInstance = null;

export const setIO = (io) => {
    ioInstance = io;
};

export const getIO = () => {
    if (!ioInstance) {
        throw new Error("Socket.IO instance chưa được khởi tạo!");
    }
    return ioInstance;
};

```

### apps\backend\src\utils\socketHelpers.js
```js
export const findSocketId = (users = [], userId) => {
    return users?.find((user) => user?.id === userId)?.socket_id;
};

```

### apps\backend\src\utils\upload.js
```js
import multer from "multer";
import path from "path";
import fs from "fs";

// Đảm bảo thư mục uploads tồn tại
const uploadDir = path.join(process.cwd(), "uploads");
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
}

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, uploadDir);
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
        const ext = path.extname(file.originalname);
        cb(null, file.fieldname + "-" + uniqueSuffix + ext);
    },
});

const fileFilter = (req, file, cb) => {
    const allowedTypes = ["image/jpeg", "image/png", "image/gif", "image/webp"];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error("Không hỗ trợ định dạng file này!"), false);
    }
};

// Khởi tạo multer
const upload = multer({
    storage: storage,
    limits: {
        fileSize: 10 * 1024 * 1024, // 10MB cho kích thước file
        fieldSize: 50 * 1024 * 1024,
    },
    fileFilter: fileFilter,
});

export default upload;

```

### apps\backend\src\utils\user.utils.js
```js
export function formatUser(user) {
    if (!user) return null;

    const mainInf = user?.Bio?.main_inf || {};
    const baseInf = user?.Bio?.Base_inf || {};
    const lifestyle = user?.Bio?.Lifestyle || {};

    return {
        id: user?.id,
        displayName: user?.display_name,
        password: user?.password,
        email: user?.email,
        gender: user?.gender,
        birthday: user?.birthday,
        preferredGender: user?.preferred_gender,
        name: user?.Bio?.name,
        age: user?.Bio?.age,
        aboutMe: user?.Bio?.about_me,
        height: mainInf?.height,
        location: mainInf?.location,
        languageId: mainInf?.language_id,
        religionId: mainInf?.religion_id,
        careerId: mainInf?.career_id,
        educationId: mainInf?.education_id,
        zodiacId: baseInf?.zodiac_id,
        characterId: baseInf?.character_id,
        communicateStyleId: baseInf?.communicate_style_id,
        loveLanguageId: baseInf?.love_language_id,
        futureFamilyId: baseInf?.future_family_id,
        drink: lifestyle?.drink,
        smoke: lifestyle?.smoke,
        train: lifestyle?.train,
        petId: lifestyle?.pet_id,
        dietId: lifestyle?.diet_id,
        sleepId: lifestyle?.sleep_id,
        snuId: lifestyle?.snu_id,
        photos: user?.Bio?.Photo,
        bioId: user?.Bio?.id,
        favorites: user?.user_favorites.map((item) => item?.favorite_id),
        sexualOrientation: baseInf?.sexual_orientation_id,
        searchingFor: user?.Bio?.Searchingfor?.id,
        isFullInformation: user?.is_full_information,
    };
}

```

### apps\frontend\eslint.config.mjs
```mjs
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [...compat.extends("next/core-web-vitals")];

export default eslintConfig;

```

### apps\frontend\next.config.mjs
```mjs
/** @type {import('next').NextConfig} */
const nextConfig = {
    reactStrictMode: true,
    experimental: {
        //appDir: true,
    },
    async rewrites() {
        return [
            {
                source: "/api/:path*",
                destination: "http://localhost:3001/api/:path*", // Chuyển hướng API về backend
            },
        ];
    },
};

export default nextConfig;

```

### apps\frontend\postcss.config.mjs
```mjs
const config = {
  plugins: ["@tailwindcss/postcss"],
};

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

export default config;

```

### apps\frontend\src\app\layout.js
```js
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ProfileProvider } from "@/context/ProfileContext";

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

export const metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

export default function RootLayout({ children }) {
    return (
        <html>
            <ProfileProvider>
                <body>{children}</body>
            </ProfileProvider>
        </html>
    );
}

```

### apps\frontend\src\app\(main)\layout.js
```js
// app/(main)/layout.tsx

import AppLayout from "@/components/layout/AppLayout";
import { AuthProvider } from "@/hooks/useAuth";
import { MetadataProvider } from "@/hooks/useMetadata";
import { Toaster } from "react-hot-toast";
import { SocketProvider } from "@/hooks/useSocket";

import { setupAxios } from "@/app/auth/_helpers";
import axios from "axios";
setupAxios(axios);
export default function MainLayout({ children }) {
    return (
        <AuthProvider>
            <SocketProvider>
                <MetadataProvider>
                    <AppLayout>{children}</AppLayout>
                    <Toaster position="top-right" reverseOrder={false} />
                </MetadataProvider>
            </SocketProvider>
        </AuthProvider>
    );
}

```

### apps\frontend\src\app\(main)\page.js
```js
"use client";
import React, { useCallback, useEffect, useState } from "react";
import MatchModal from "@/ui/MatchModal";
import ProfileCard from "@/components/cards/ProfileCard";
import { SlidersIcon } from "lucide-react";
import FilterModal from "@/ui/FilterModal";
import axios from "axios";
import { useMetadata } from "@/hooks/useMetadata";
import { useRouter, useSearchParams } from "next/navigation";
import { useAuth } from "@/hooks/useAuth";
import { showToast } from "@/lib/toast";
import { useSocket } from "@/hooks/useSocket";

const Home = () => {
    const { auth, currentUser } = useAuth();
    const socket = useSocket();

    const router = useRouter();
    const searchParams = useSearchParams();
    const metadata = useMetadata();
    const [profileSetupData, setProfileSetupData] = useState();
    const [currentIndex, setCurrentIndex] = useState(0);
    const [showMatch, setShowMatch] = useState(false);
    const [matchedProfile, setMatchedProfile] = useState({});
    const [showFilters, setShowFilters] = useState(false);
    const initialFilters = {};
    for (const [key, value] of searchParams.entries()) {
        initialFilters[key] = value;
    }
    const [filters, setFilters] = useState(initialFilters);
    const [profiles, setProfiles] = useState([]);

    useEffect(() => {
        const fetchProfileSetupData = async () => {
            try {
                const params = new URLSearchParams();
                Object.entries(filters).forEach(([key, value]) => {
                    if (value !== null && value !== undefined && value !== "") {
                        params.append(key, value);
                    }
                });
                const queryString = params.toString();
                const url = queryString
                    ? `http://localhost:3001/api/user/list-match?${queryString}`
                    : `http://localhost:3001/api/user/list-match`;

                console.log("Fetching profiles with URL:", url);
                const response = await axios.get(url);
                console.log("Response data:", response.data.users);

                setProfiles(response.data.users);
            } catch (error) {
                console.error("Error fetching profiles:", error);
            }
        };

        fetchProfileSetupData();
    }, [filters]);

    const handleApplyFilters = useCallback(
        (newFilters = filters) => {
            const params = new URLSearchParams();
            Object.entries(newFilters).forEach(([key, value]) => {
                if (value !== null && value !== undefined && value !== "") {
                    params.append(key, value);
                }
            });
            const queryString = params.toString();
            const newUrl = queryString ? `/?${queryString}` : "/";

            console.log("Updating URL to:", newUrl);
            router.push(newUrl, { scroll: false });
            setShowFilters(false);
        },
        [router]
    );

    const handleNext = useCallback(() => {
        if (currentIndex < profiles.length - 1) {
            setCurrentIndex((prev) => prev + 1);
        }
    }, [currentIndex, profiles.length]);

    const handleMatch = async (userId, callback) => {
        try {
            const response = await axios.post(
                "http://localhost:3001/api/matches",
                {
                    receiverId: userId,
                },
                {
                    headers: {
                        Authorization: `Bearer ${auth?.access_token}`,
                    },
                }
            );

            setTimeout(() => {
                showToast.success("Đã thích!");
                callback && callback();
                if (currentIndex < profiles.length - 1) {
                    setCurrentIndex((prev) => prev + 1);
                }
            }, 1000);
        } catch (error) {
            console.error(error?.response?.data?.message || "Lỗi khi matching");
            setTimeout(() => {
                callback && callback();
                showToast.error(
                    error?.response?.data?.message || "Lỗi khi matching"
                );
                if (currentIndex < profiles.length - 1) {
                    setCurrentIndex((prev) => prev + 1);
                }
            }, 500);
        } finally {
        }
    };

    const handleCloseMatch = () => {
        setShowMatch(false);
    };

    useEffect(() => {
        if (!socket) return;
        socket.on("new-match", (profile) => {
            setMatchedProfile(profile);
            setShowMatch(true);
        });
    }, [socket]);

    if (currentIndex >= profiles.length) {
        return (
            <div className="w-full max-w-md mx-auto flex flex-col items-center justify-center py-4 text-center px-4">
                <div className="bg-white/90 backdrop-blur-sm rounded-2xl p-8 shadow-xl">
                    <h2 className="text-2xl font-bold text-gray-900 mb-4">
                        Đã hết người dùng trong khu vực của bạn
                    </h2>
                    <p className="text-gray-600 mb-6">
                        Hãy thử mở rộng bán kính tìm kiếm hoặc quay lại sau nhé!
                    </p>
                    <button
                        onClick={() => {
                            setCurrentIndex(0);
                            setProfiles([]);
                            setFilters({});
                            handleApplyFilters({});
                        }}
                        className="bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white px-6 py-3 rounded-xl
                     font-medium hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5"
                    >
                        Xem lại từ đầu
                    </button>
                </div>
            </div>
        );
    }
    return (
        <div className="w-full max-w-md mx-auto flex flex-col items-center justify-center py-4">
            <div className="w-full flex justify-end mb-4 px-4">
                <button
                    onClick={() => setShowFilters(true)}
                    className="flex items-center gap-2 px-4 py-2 rounded-xl bg-white hover:bg-gray-50
                   border border-gray-200 text-gray-700 transition-all duration-300
                   hover:shadow-md active:scale-95"
                >
                    <SlidersIcon className="h-5 w-5" />
                    <span className="text-sm font-medium">Bộ lọc</span>
                    {Object.keys(filters).length > 0 && (
                        <span className="w-5 h-5 flex items-center justify-center bg-[#FF5864] text-white text-xs rounded-full">
                            {Object.keys(filters).length}
                        </span>
                    )}
                </button>
            </div>
            <ProfileCard
                key={profiles[currentIndex].id}
                profile={profiles[currentIndex]}
                onHandleMatch={handleMatch}
                onHandleNext={handleNext}
            />

            {showMatch && matchedProfile && (
                <MatchModal
                    profile={matchedProfile}
                    onClose={handleCloseMatch}
                />
            )}
            <FilterModal
                metadata={metadata?.metadata}
                isOpen={showFilters}
                onClose={() => setShowFilters(false)}
                filtersData={filters}
                onHandleFilter={(filters) => {
                    setFilters({ ...filters });
                    handleApplyFilters(filters);
                    setShowFilters(false);
                }}
            />
        </div>
    );
};
export default Home;

```

### apps\frontend\src\app\(main)\matches\page.js
```js
"use client";

import React, { useEffect, useState } from "react";

import { useRouter } from "next/navigation";
import { useAuth } from "@/hooks/useAuth";

import Loading from "@/components/Loading";

const Matches = () => {
    const router = useRouter();
    const [matches, setMatches] = useState([]);
    const auth = useAuth();
    const [isLoading, setIsLoading] = useState(true);

    console.log(matches);

    useEffect(() => {
        const fetchMatches = async () => {
            setIsLoading(true);
            try {
                const response = await fetch(
                    "http://localhost:3001/api/matches",
                    {
                        method: "GET",
                        headers: {
                            Authorization: `Bearer ${auth?.auth?.access_token}`,
                        },
                    }
                );
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                const data = await response.json();
                setMatches(data?.data);
            } catch (error) {
                console.error("Error fetching matches:", error);
            }
            setIsLoading(false);
        };
        fetchMatches();
    }, []);

    const handleMatchClick = (matchId) => {
        router.push(`/message/${matchId}`);
    };
    return (
        <div className="w-full max-w-md mx-auto py-4">
            {isLoading ? (
                <Loading />
            ) : (
                <div className="bg-white rounded-lg shadow-sm  max-h-[70vh] min-h-[60vh] overflow-auto">
                    <div className="p-4 border-b border-gray-100">
                        <h1 className="text-xl font-bold text-gray-800">
                            Kết nối mới
                        </h1>
                    </div>
                    <div className="divide-y divide-gray-100">
                        {matches.length > 0 ? (
                            matches?.map?.((match) => (
                                <button
                                    key={match.id}
                                    onClick={() => handleMatchClick(match.id)}
                                    className="w-full flex items-center p-4 hover:bg-gray-50 transition-colors duration-300"
                                >
                                    <div className="relative">
                                        <img
                                            src={match.photo}
                                            alt={match.name}
                                            className="w-16 h-16 rounded-full object-cover transition-transform duration-300 hover:scale-105"
                                        />
                                        {match.unread && (
                                            <div className="absolute -top-1 -right-1 w-4 h-4 bg-[#FF5864] rounded-full border-2 border-white animate-pulse"></div>
                                        )}
                                    </div>
                                    <div className="ml-4 flex-grow text-left">
                                        <div className="flex justify-between">
                                            <h2 className="font-medium text-gray-800">
                                                {match.name}, {match.age}
                                            </h2>
                                            <span className="text-sm text-gray-500">
                                                {match.matchTime}
                                            </span>
                                        </div>
                                        <p className="text-sm text-gray-600">
                                            {match.unread
                                                ? "Bạn có kết nối mới!"
                                                : "Đã kết nối"}
                                        </p>
                                    </div>
                                </button>
                            ))
                        ) : (
                            <div className="p-4 text-center text-gray-500">
                                Không có kết nối nào
                            </div>
                        )}
                    </div>
                </div>
            )}
        </div>
    );
};
export default Matches;

```

### apps\frontend\src\app\(main)\message\[matchId]\page.js
```js
"use client";
import React, { useEffect, useState, useRef } from "react";
import { useRouter, useParams } from "next/navigation";
import { ArrowLeftIcon, SendIcon, ImageIcon, SmileIcon } from "lucide-react";
import { useAuth } from "@/hooks/useAuth";
import Loading from "@/components/Loading";
import { showToast } from "@/lib/toast";
import { getRelativeTime } from "@/utils/Time";
import { useSocket } from "@/hooks/useSocket";

// AI-generated icebreaker questions
const icebreakers = [
    "Nếu có thể đi du lịch bất cứ đâu, bạn sẽ chọn nơi nào?",
    "Bộ phim yêu thích của bạn là gì?",
    "Bữa ăn ngon nhất bạn từng có là gì?",
    "Hoạt động cuối tuần lý tưởng của bạn là gì?",
];
const MessagePage = () => {
    const auth = useAuth();
    const socket = useSocket();

    const params = useParams();
    const id = params.matchId;

    const router = useRouter();
    const [message, setMessage] = useState("");
    const [chat, setChat] = useState(null);
    const [showIcebreakers, setShowIcebreakers] = useState(false);
    const messagesEndRef = useRef(null);
    const [isLoading, setIsLoading] = useState(false);
    const fetchChatData = async () => {
        if (!id) {
            showToast.error("Có lỗi xảy ra");
            return;
        }
        try {
            const response = await fetch(
                `http://localhost:3001/api/messages/${id}`,
                {
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${auth?.auth?.access_token}`,
                    },
                }
            );
            const data = await response.json();

            setChat(data?.data);
        } catch (error) {}
    };
    useEffect(() => {
        fetchChatData();
    }, [id]);
    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({
            behavior: "smooth",
        });
    }, [chat?.messages]);
    useEffect(() => {
        if (!socket) return;
        socket.on("receive-new-message", () => {
            fetchChatData();
        });
        return () => {
            socket.off("reveive-new-message", (message) => {});
        };
    }, [socket]);
    const handleSend = async () => {
        if (message.trim() === "") return;
        const newMessage = {
            content: message,
            senderId: auth?.auth?.user?.id,
            receiverId: chat?.id,
            sent_at: new Date().toLocaleTimeString([], {
                hour: "2-digit",
                minute: "2-digit",
            }),
            matchId: parseInt(id),
        };
        try {
            const response = await fetch(`http://localhost:3001/api/messages`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${auth?.auth?.access_token}`,
                },
                body: JSON.stringify(newMessage),
            });
            const data = await response.json();
            socket.emit("new-message", newMessage);
            fetchChatData();
        } catch (error) {
            showToast.error("Có lỗi xảy ra");
        }

        setMessage("");
    };
    const handleIcebreakerSelect = (question) => {
        setMessage(question);
        setShowIcebreakers(false);
    };
    if (!chat) {
        return (
            <div className="flex items-center justify-center">
                <Loading />
            </div>
        );
    }
    return (
        <div className="flex flex-col h-[70vh] w-[50vh] bg-gray-50">
            <header className="bg-white p-4 shadow-sm flex items-center">
                <button
                    onClick={() => router.push("/matches")}
                    className="mr-3"
                >
                    <ArrowLeftIcon size={24} className="text-gray-500" />
                </button>
                <img
                    src={chat?.photo}
                    alt={chat?.name}
                    className="w-10 h-10 rounded-full object-cover"
                />
                <div className="ml-3">
                    <h1 className="font-semibold text-gray-800">
                        {chat?.name}
                    </h1>
                    {/* <p className="text-xs text-gray-500">Online</p> */}
                </div>
            </header>
            <main className="flex-1 overflow-y-auto p-4">
                <div className="space-y-4">
                    {chat?.messages?.map((msg) => (
                        <div
                            key={msg.id}
                            className={`flex ${
                                msg.sender === "me"
                                    ? "justify-end"
                                    : "justify-start"
                            }`}
                        >
                            <div
                                className={`max-w-[80%] rounded-2xl px-4 py-2 
                  ${
                      msg.sender === "me"
                          ? "bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white rounded-br-none"
                          : "bg-white text-gray-800 rounded-bl-none shadow"
                  }`}
                            >
                                <p>{msg.text}</p>
                                <p
                                    className={`text-xs ${
                                        msg.sender === "me"
                                            ? "text-white/70"
                                            : "text-gray-500"
                                    } text-right mt-1`}
                                >
                                    {getRelativeTime(msg.time)}
                                </p>
                            </div>
                        </div>
                    ))}
                    <div ref={messagesEndRef} />
                </div>
            </main>
            {showIcebreakers && (
                <div className="bg-white border-t border-gray-200 p-3">
                    <p className="text-sm text-gray-600 mb-2">
                        AI Icebreakers:
                    </p>
                    <div className="flex overflow-x-auto space-x-2 pb-2">
                        {icebreakers.map((question, index) => (
                            <button
                                key={index}
                                onClick={() => handleIcebreakerSelect(question)}
                                className="bg-gray-100 text-gray-800 px-3 py-2 rounded-full text-sm whitespace-nowrap"
                            >
                                {question}
                            </button>
                        ))}
                    </div>
                </div>
            )}
            <div className="bg-white border-t border-gray-200 p-3">
                <div className="flex items-center">
                    <button className="p-2 text-gray-500">
                        <ImageIcon size={24} />
                    </button>
                    <div className="flex-1 mx-2">
                        <input
                            type="text"
                            value={message}
                            onChange={(e) => setMessage(e.target.value)}
                            placeholder="Type a message..."
                            className="w-full p-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                            onKeyPress={(e) =>
                                e.key === "Enter" && handleSend()
                            }
                        />
                    </div>
                    {message.trim() === "" ? (
                        <button
                            onClick={() => setShowIcebreakers(!showIcebreakers)}
                            className="p-2 text-gray-500"
                        >
                            <SmileIcon size={24} />
                        </button>
                    ) : (
                        <button
                            onClick={handleSend}
                            className="p-2 text-[#FF5864]"
                        >
                            <SendIcon size={24} />
                        </button>
                    )}
                </div>
            </div>
        </div>
    );
};
export default MessagePage;

```

### apps\frontend\src\app\(main)\notifications\page.js
```js
"use client";

import { useEffect, useState } from "react";

import { useAuth } from "@/hooks/useAuth";
import { HeartIcon, MessageCircleIcon, StarIcon } from "lucide-react";
import Link from "next/link";
import { getRelativeTime } from "@/utils/Time";
import { useSocket } from "@/hooks/useSocket";

const getNotificationContent = (notification) => {
    switch (notification.type) {
        case "NEW_MATCH":
            return {
                icon: <HeartIcon className="h-5 w-5 text-[#FF5864]" />,
                text: `Bạn và ${notification.user.name} đã ghép đôi!`,
                link: "/matches",
            };
        case "LIKED":
            return {
                icon: <HeartIcon className="h-5 w-5 text-[#FF5864]" />,
                text: `${notification.user.name} đã thích bạn`,
                link: "/matches",
                type: "like",
            };
        default:
            return null;
    }
};

export default function NotificationsPage() {
    const socket = useSocket();

    const auth = useAuth();

    const [notifications, setNotifications] = useState([]);

    const fetchNotifications = async () => {
        try {
            const res = await fetch("http://localhost:3001/api/notifications", {
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${auth?.auth?.access_token}`,
                },
            });
            const data = await res.json();
            console.log(data);

            setNotifications(data?.data || []);
        } catch (error) {}
    };
    useEffect(() => {
        fetchNotifications();
    }, []);

    useEffect(() => {
        if (!socket) return;
        socket.on("new-notification", (notifications = []) => {
            console.log("Received new notification:", notifications);
            setNotifications(notifications);
        });
        socket.emit("accept-match", 1);
    }, [socket]);

    const handleAccept = async (e, matchId, notificationId) => {
        e.preventDefault();
        e.stopPropagation();
        console.log("Accepted notification:");
        try {
            const res = await fetch(
                `http://localhost:3001/api/matches/${matchId}`,
                {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${auth?.auth?.access_token}`,
                    },
                    body: JSON.stringify({
                        isAccept: true,
                        notificationId,
                    }),
                }
            );
            const data = await res.json();

            socket.emit("accept-match", data.match);

            setNotifications(data?.data || []);
        } catch (error) {}
    };

    return (
        <div className="w-full max-w-lg mx-auto ">
            <div className="bg-white rounded-lg shadow-sm overflow-hidden min-h-[70vh]">
                <div className="p-4 border-b border-gray-100">
                    <h1 className="text-xl font-bold text-gray-800">
                        Thông báo
                    </h1>
                </div>
                <div className="divide-y divide-gray-100">
                    {notifications?.map((notification) => {
                        const content = getNotificationContent(notification);
                        return (
                            <Link
                                key={notification?.id}
                                href={content?.link}
                                className={`flex items-center gap-4 p-4 hover:bg-gray-50 transition-colors
                         ${!notification?.read ? "bg-pink-50/50" : ""}`}
                            >
                                <div className="relative">
                                    <img
                                        src={notification?.user.photo}
                                        alt={notification?.user.name}
                                        className="w-12 h-12 rounded-full object-cover"
                                    />
                                    <div className="absolute -bottom-1 -right-1 p-1 bg-white rounded-full">
                                        {content.icon}
                                    </div>
                                </div>
                                <div className="flex-1 min-w-0">
                                    <p className="text-sm text-gray-900">
                                        {content.text}
                                    </p>
                                    <p className="text-xs text-gray-500 mt-0.5">
                                        {getRelativeTime(notification?.time)}
                                    </p>
                                    {notification?.type === "LIKED" && (
                                        <div className="mt-2 flex items-center gap-2 justify-between">
                                            <button
                                                className="w-full btn btn-primary rounded-lg transition-all duration-300
                        bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white p-2 cursor-pointer"
                                                onClick={(e) =>
                                                    handleAccept(
                                                        e,
                                                        notification?.matchId,
                                                        notification?.id
                                                    )
                                                }
                                            >
                                                Accept
                                            </button>
                                            <button className="p-2 w-full btn btn-primary border border-gray-300 rounded-lg transition-all duration-300 hover:bg-gray-100 cursor-pointer">
                                                Remove
                                            </button>
                                        </div>
                                    )}
                                </div>
                                {!notification?.read && (
                                    <div className="w-2 h-2 bg-[#FF5864] rounded-full" />
                                )}
                            </Link>
                        );
                    })}
                </div>
                {notifications?.length === 0 && (
                    <div className="py-12 text-center text-gray-500">
                        <p>Không có thông báo mới</p>
                    </div>
                )}
            </div>
        </div>
    );
}

```

### apps\frontend\src\app\(main)\profile\page.js
```js
"use client";
import React, { useEffect, useState } from "react";
import { CameraIcon, EditIcon, Loader2Icon, XIcon } from "lucide-react";
import { useAuth } from "@/hooks/useAuth";
import { useMetadata } from "@/hooks/useMetadata";

const Profile = () => {
    const { auth, currentUser } = useAuth();
    const { metadata } = useMetadata();
    console.log(currentUser);

    const [showBioModal, setShowBioModal] = useState(false);
    const [showInterestsModal, setShowInterestsModal] = useState(false);
    const [showPhotoModal, setShowPhotoModal] = useState(false);
    const [showProfilePhotoModal, setShowProfilePhotoModal] = useState(false);
    const [profile, setProfile] = useState({
        name: currentUser?.displayName,
        age: currentUser?.age,
        location: currentUser?.location,
        bio: currentUser?.aboutMe,
        interests:
            currentUser?.favorites?.map(
                (favorite) =>
                    metadata?.favorites.find((f) => f.id === favorite)?.value
            ) || [],
        photos: [],
        profilePhoto: "",
    });

    console.log(profile);

    useEffect(() => {
        if (currentUser) {
            setProfile((prev) => ({
                ...prev,
                name: currentUser?.displayName,
                age: currentUser?.age,
                location: currentUser?.location,
                bio: currentUser?.aboutMe,
                interests:
                    currentUser?.favorites?.map(
                        (favorite) =>
                            metadata?.favorites.find((f) => f.id === favorite)
                                ?.value
                    ) || [],
                photos: currentUser?.photos || [],
                profilePhoto:
                    currentUser?.profilePhoto ||
                    "https://cdn.kona-blue.com/upload/kona-blue_com/post/images/2024/09/19/465/avatar-trang-1.jpg",
            }));
        }
    }, [currentUser]);

    return (
        <div className="w-full max-w-md py-4 mx-auto">
            <div className="overflow-hidden bg-white rounded-lg shadow-sm max-h-[76vh] overflow-y-auto">
                {/* Profile header */}
                <div className="relative">
                    <div className="h-32 bg-gradient-to-r from-[#FF5864] to-[#FF655B]"></div>
                    <div className="absolute transform -translate-x-1/2 left-1/2 -bottom-16">
                        <div className="relative group">
                            <img
                                src={profile?.profilePhoto || ""}
                                alt="Profile"
                                className="object-cover w-32 h-32 transition-transform duration-300 border-4 border-white rounded-full group-hover:scale-105"
                            />
                            <button
                                onClick={() => setShowProfilePhotoModal(true)}
                                className="absolute bottom-0 right-0 bg-[#FF5864] p-2 rounded-full text-white
                         shadow-lg transition-transform duration-300 hover:scale-110"
                            >
                                <CameraIcon className="w-4 h-4" />
                            </button>
                            <div className="absolute inset-0 flex items-center justify-center transition-opacity duration-300 rounded-full opacity-0 bg-black/50 group-hover:opacity-100">
                                <span className="text-sm font-medium text-white">
                                    Thay đổi ảnh
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                {/* Profile info */}
                <div className="px-4 pt-20 pb-4">
                    <div className="text-center">
                        <h1 className="text-2xl font-bold text-gray-800">
                            {profile.name}, {profile.age}
                        </h1>
                        <p className="text-gray-600">{profile.location}</p>
                    </div>
                    {/* Bio */}
                    <div className="mt-6">
                        <div className="flex items-center justify-between mb-2">
                            <h2 className="text-lg font-semibold text-gray-800">
                                Giới thiệu
                            </h2>
                            <button
                                onClick={() => setShowBioModal(true)}
                                className="text-[#FF5864] hover:scale-110 transition-transform duration-300"
                            >
                                <EditIcon className="w-4 h-4" />
                            </button>
                        </div>
                        <p className="text-gray-600">{profile.bio}</p>
                    </div>
                    {/* Tags */}
                    <div className="mt-6">
                        <div className="flex items-center justify-between mb-2">
                            <h2 className="text-lg font-semibold text-gray-800">
                                Sở thích
                            </h2>
                            <button
                                onClick={() => setShowInterestsModal(true)}
                                className="text-[#FF5864] hover:scale-110 transition-transform duration-300"
                            >
                                <EditIcon className="w-4 h-4" />
                            </button>
                        </div>
                        <div className="flex flex-wrap gap-2">
                            {profile.interests.map((interest, index) => (
                                <span
                                    key={index}
                                    className="px-3 py-1 text-sm text-gray-700 transition-colors duration-300 bg-gray-100 rounded-full hover:bg-gray-200"
                                >
                                    {interest}
                                </span>
                            ))}
                        </div>
                    </div>
                    {/* Photos */}
                    <div className="mt-6">
                        <div className="flex items-center justify-between mb-2">
                            <h2 className="text-lg font-semibold text-gray-800">
                                Ảnh ({profile.photos.length}/6)
                            </h2>
                            <button
                                onClick={() => setShowPhotoModal(true)}
                                className="text-[#FF5864] hover:scale-110 transition-transform duration-300"
                            >
                                <EditIcon className="w-4 h-4" />
                            </button>
                        </div>
                        <div className="grid grid-cols-3 gap-2">
                            {profile.photos
                                .filter((photo) => photo?.url)
                                .map((photo, index) => (
                                    <div
                                        key={index}
                                        className="relative overflow-hidden bg-gray-200 rounded-lg aspect-square group"
                                    >
                                        <img
                                            src={`http://localhost:3001${photo?.url}`}
                                            alt={`Photo ${index + 1}`}
                                            className="object-cover w-full h-full transition-transform duration-300 group-hover:scale-110"
                                        />
                                    </div>
                                ))}
                            {[
                                ...Array(
                                    6 -
                                        profile.photos.filter(
                                            (photo) => photo?.url
                                        ).length
                                ),
                            ].map((_, index) => (
                                <div
                                    key={`empty-${index}`}
                                    className="flex items-center justify-center transition-colors duration-300 bg-gray-100 rounded-lg cursor-pointer aspect-square hover:bg-gray-200"
                                    onClick={() => setShowPhotoModal(true)}
                                >
                                    <CameraIcon className="w-6 h-6 text-gray-400" />
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
            {showBioModal && (
                <EditBioModal
                    bio={profile.bio}
                    onSave={(newBio) => {
                        setProfile((prev) => ({
                            ...prev,
                            bio: newBio,
                        }));
                        setShowBioModal(false);
                    }}
                    onClose={() => setShowBioModal(false)}
                />
            )}
            {showInterestsModal && (
                <EditInterestsModal
                    interests={profile.interests}
                    onSave={(newInterests) => {
                        setProfile((prev) => ({
                            ...prev,
                            interests: newInterests,
                        }));
                        setShowInterestsModal(false);
                    }}
                    onClose={() => setShowInterestsModal(false)}
                />
            )}
            {showPhotoModal && (
                <EditPhotosModal
                    photos={profile.photos}
                    onSave={(newPhotos) => {
                        setProfile((prev) => ({
                            ...prev,
                            photos: newPhotos,
                        }));
                        setShowPhotoModal(false);
                    }}
                    onClose={() => setShowPhotoModal(false)}
                />
            )}
            {showProfilePhotoModal && (
                <EditProfilePhotoModal
                    currentPhoto={profile.profilePhoto}
                    onSave={(newPhoto) => {
                        setProfile((prev) => ({
                            ...prev,
                            profilePhoto: newPhoto,
                        }));
                        setShowProfilePhotoModal(false);
                    }}
                    onClose={() => setShowProfilePhotoModal(false)}
                />
            )}
        </div>
    );
};
const EditBioModal = ({ bio, onSave, onClose }) => {
    const [newBio, setNewBio] = useState(bio);
    const [loading, setLoading] = useState(false);
    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API call
        onSave(newBio);
        setLoading(false);
    };
    return (
        <ModalWrapper onClose={onClose}>
            <form onSubmit={handleSubmit} className="space-y-4">
                <h3 className="text-xl font-bold text-gray-900">
                    Chỉnh sửa giới thiệu
                </h3>
                <textarea
                    value={newBio}
                    onChange={(e) => setNewBio(e.target.value)}
                    className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] 
                   focus:border-transparent resize-none"
                    rows={4}
                    maxLength={500}
                    placeholder="Viết gì đó về bản thân..."
                />
                <p className="text-sm text-right text-gray-500">
                    {newBio.length}/500
                </p>
                <div className="flex gap-3">
                    <button
                        type="button"
                        onClick={onClose}
                        className="flex-1 px-4 py-2 text-gray-700 transition-colors duration-300 border border-gray-300 rounded-xl hover:bg-gray-50"
                    >
                        Hủy
                    </button>
                    <button
                        type="submit"
                        disabled={loading}
                        className="flex-1 px-4 py-2 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white
                     rounded-xl hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5
                     disabled:opacity-70 flex items-center justify-center"
                    >
                        {loading ? (
                            <Loader2Icon className="w-5 h-5 animate-spin" />
                        ) : (
                            "Lưu"
                        )}
                    </button>
                </div>
            </form>
        </ModalWrapper>
    );
};
const EditInterestsModal = ({ interests, onSave, onClose }) => {
    const [selectedInterests, setSelectedInterests] = useState(interests);
    const [loading, setLoading] = useState(false);
    const popularInterests = [
        "#CafeTối",
        "#DuLịchBụi",
        "#Nhiếp ảnh",
        "#Đọc sách",
        "#Âm nhạc",
        "#Yoga",
        "#Nấu ăn",
        "#Thể thao",
        "#Phim ảnh",
        "#Nghệ thuật",
        "#Du lịch",
        "#Mua sắm",
    ];
    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API call
        onSave(selectedInterests);
        setLoading(false);
    };
    const toggleInterest = (interest) => {
        setSelectedInterests((prev) =>
            prev.includes(interest)
                ? prev.filter((i) => i !== interest)
                : [...prev, interest]
        );
    };
    return (
        <ModalWrapper onClose={onClose}>
            <form onSubmit={handleSubmit} className="space-y-4">
                <h3 className="text-xl font-bold text-gray-900">
                    Chỉnh sửa sở thích
                </h3>
                <div className="flex flex-wrap gap-2">
                    {popularInterests.map((interest) => (
                        <button
                            key={interest}
                            type="button"
                            onClick={() => toggleInterest(interest)}
                            className={`px-4 py-2 rounded-full text-sm transition-all duration-300
                       ${
                           selectedInterests.includes(interest)
                               ? "bg-[#FF5864] text-white"
                               : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                       }`}
                        >
                            {interest}
                        </button>
                    ))}
                </div>
                <div className="flex gap-3">
                    <button
                        type="button"
                        onClick={onClose}
                        className="flex-1 px-4 py-2 text-gray-700 transition-colors duration-300 border border-gray-300 rounded-xl hover:bg-gray-50"
                    >
                        Hủy
                    </button>
                    <button
                        type="submit"
                        disabled={loading}
                        className="flex-1 px-4 py-2 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white
                     rounded-xl hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5
                     disabled:opacity-70 flex items-center justify-center"
                    >
                        {loading ? (
                            <Loader2Icon className="w-5 h-5 animate-spin" />
                        ) : (
                            "Lưu"
                        )}
                    </button>
                </div>
            </form>
        </ModalWrapper>
    );
};
const EditPhotosModal = ({ photos, onSave, onClose }) => {
    const [currentPhotos, setCurrentPhotos] = useState(photos);
    const [loading, setLoading] = useState(false);
    const handlePhotoUpload = (e) => {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                setCurrentPhotos((prev) => [...prev, reader.result]);
            };
            reader.readAsDataURL(file);
        }
    };
    const removePhoto = (index) => {
        setCurrentPhotos((prev) => prev.filter((_, i) => i !== index));
    };
    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API call
        onSave(currentPhotos);
        setLoading(false);
    };
    return (
        <ModalWrapper onClose={onClose}>
            <form onSubmit={handleSubmit} className="space-y-4">
                <h3 className="text-xl font-bold text-gray-900">
                    Chỉnh sửa ảnh
                </h3>
                <div className="grid grid-cols-3 gap-2">
                    {currentPhotos.map((photo, index) => (
                        <div
                            key={index}
                            className="relative aspect-square group"
                        >
                            <img
                                src={photo}
                                alt={`Photo ${index + 1}`}
                                className="object-cover w-full h-full rounded-lg"
                            />
                            <button
                                type="button"
                                onClick={() => removePhoto(index)}
                                className="absolute p-1 text-white transition-opacity duration-300 bg-red-500 rounded-full opacity-0 top-1 right-1 group-hover:opacity-100"
                            >
                                <XIcon className="w-4 h-4" />
                            </button>
                        </div>
                    ))}
                    {currentPhotos.length < 6 && (
                        <label className="flex flex-col items-center justify-center transition-colors border-2 border-gray-300 border-dashed rounded-lg cursor-pointer aspect-square hover:bg-gray-50">
                            <input
                                type="file"
                                accept="image/*"
                                onChange={handlePhotoUpload}
                                className="hidden"
                            />
                            <CameraIcon className="w-8 h-8 text-gray-400" />
                            <span className="mt-2 text-sm text-gray-500">
                                Thêm ảnh
                            </span>
                        </label>
                    )}
                </div>
                <div className="flex gap-3">
                    <button
                        type="button"
                        onClick={onClose}
                        className="flex-1 px-4 py-2 text-gray-700 transition-colors duration-300 border border-gray-300 rounded-xl hover:bg-gray-50"
                    >
                        Hủy
                    </button>
                    <button
                        type="submit"
                        disabled={loading}
                        className="flex-1 px-4 py-2 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white
                     rounded-xl hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5
                     disabled:opacity-70 flex items-center justify-center"
                    >
                        {loading ? (
                            <Loader2Icon className="w-5 h-5 animate-spin" />
                        ) : (
                            "Lưu"
                        )}
                    </button>
                </div>
            </form>
        </ModalWrapper>
    );
};
const EditProfilePhotoModal = ({ currentPhoto, onSave, onClose }) => {
    const [loading, setLoading] = useState(false);
    const handlePhotoUpload = async (e) => {
        const file = e.target.files[0];
        if (file) {
            setLoading(true);
            const reader = new FileReader();
            reader.onloadend = async () => {
                await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate API call
                onSave(reader.result);
                setLoading(false);
            };
            reader.readAsDataURL(file);
        }
    };
    return (
        <ModalWrapper onClose={onClose}>
            <div className="space-y-4">
                <h3 className="text-xl font-bold text-gray-900">
                    Cập nhật ảnh đại diện
                </h3>
                <div className="relative aspect-square">
                    <img
                        src={currentPhoto}
                        alt="Current profile photo"
                        className="object-cover w-full h-full rounded-lg"
                    />
                </div>
                <label className="block w-full">
                    <input
                        type="file"
                        accept="image/*"
                        onChange={handlePhotoUpload}
                        className="hidden"
                    />
                    <div
                        className="w-full px-4 py-3 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white
                       rounded-xl text-center cursor-pointer hover:shadow-lg transition-all duration-300
                       hover:-translate-y-0.5 flex items-center justify-center"
                    >
                        {loading ? (
                            <Loader2Icon className="w-5 h-5 animate-spin" />
                        ) : (
                            <>
                                <CameraIcon className="w-5 h-5 mr-2" />
                                Chọn ảnh mới
                            </>
                        )}
                    </div>
                </label>
                <button
                    onClick={onClose}
                    className="w-full px-4 py-3 text-gray-700 transition-colors duration-300 border border-gray-300 rounded-xl hover:bg-gray-50"
                >
                    Hủy
                </button>
            </div>
        </ModalWrapper>
    );
};
const ModalWrapper = ({ children, onClose }) => {
    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
            <div
                className="absolute inset-0 bg-black/60 backdrop-blur-sm"
                onClick={onClose}
            />
            <div className="relative w-full max-w-md p-6 bg-white rounded-2xl animate-scale-up">
                {children}
            </div>
        </div>
    );
};
export default Profile;

```

### apps\frontend\src\app\(main)\settings\page.js
```js
"use client";
import React, { useEffect, useState } from "react";
import {
    BellIcon,
    CompassIcon,
    CrownIcon,
    HeartIcon,
    LockIcon,
    LogOutIcon,
    ShieldIcon,
    UserIcon,
    CameraIcon,
    Loader2Icon,
    XIcon,
} from "lucide-react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/hooks/useAuth";
const Settings = () => {
    const { auth, currentUser, logout } = useAuth();
    console.log("auth", auth);

    const router = useRouter();
    const [showPhotoModal, setShowPhotoModal] = useState(false);
    const [profileData, setProfileData] = useState({
        name: currentUser?.display_name,
        username: currentUser?.username,
        photo: "https://images.unsplash.com/photo-1534528741775-53994a69daeb?ixlib=rb-4.0.3",
    });
    useEffect(() => {
        if (currentUser) {
            setProfileData({
                name: currentUser?.displayName,
                username: currentUser?.username,
                photo:
                    currentUser?.photo ||
                    "https://cdn.kona-blue.com/upload/kona-blue_com/post/images/2024/09/19/465/avatar-trang-1.jpg",
            });
        }
    }, [currentUser]);
    const handlePhotoChange = (newPhoto) => {
        setProfileData((prev) => ({
            ...prev,
            photo: newPhoto,
        }));
    };
    const handlePhotoClick = () => {
        setShowPhotoModal(true);
    };
    const handleProfileEdit = () => {
        router.push("/profile-setup");
    };

    const handleLogout = () => {
        logout();
    };
    const settingSections = [
        {
            title: "Tài khoản",
            items: [
                {
                    icon: UserIcon,
                    label: "Thông tin cá nhân",
                    description: "Cập nhật thông tin của bạn",
                    highlight: true,
                    onClick: handleProfileEdit,
                },
                {
                    icon: CrownIcon,
                    label: "DateViet Premium",
                    description: "Xem các tính năng cao cấp",
                    badge: "Mới",
                    gradient: true,
                    onClick: () => router.push("/premium"), // Updated navigation
                },
            ],
        },
        {
            title: "Ứng dụng",
            items: [
                {
                    icon: CompassIcon,
                    label: "Tùy chọn khám phá",
                    description: "Khoảng cách, độ tuổi, giới tính",
                },
                {
                    icon: BellIcon,
                    label: "Thông báo",
                    description: "Tin nhắn, lượt thích, kết đôi",
                },
                {
                    icon: LockIcon,
                    label: "Quyền riêng tư",
                    description: "Kiểm soát dữ liệu của bạn",
                },
            ],
        },
        {
            title: "Khác",
            items: [
                {
                    icon: ShieldIcon,
                    label: "An toàn & Bảo mật",
                    description: "Mật khẩu, xác thực 2 lớp",
                },
                {
                    icon: HeartIcon,
                    label: "Giới thiệu bạn bè",
                    description: "Nhận 1 tháng Premium miễn phí",
                    badge: "Ưu đãi",
                },
            ],
        },
    ];
    return (
        <div className="w-full max-w-md p-4 mx-auto">
            <div className="space-y-6">
                <div className="overflow-hidden bg-white shadow-lg rounded-2xl">
                    <div className="relative h-32 bg-gradient-to-r from-[#FF5864] to-[#FF655B]">
                        <div className="absolute inset-0 bg-black/20" />
                    </div>
                    <div className="relative px-6 pb-6">
                        <div className="flex items-center -mt-12">
                            <div className="relative group">
                                <img
                                    src={profileData.photo}
                                    alt="Profile"
                                    className="object-cover w-24 h-24 transition-transform duration-300 border-4 border-white shadow-lg rounded-2xl group-hover:scale-105"
                                />
                                <button
                                    onClick={handlePhotoClick}
                                    className="absolute bottom-0 right-0 bg-[#FF5864] p-2 rounded-full text-white
                           shadow-lg transition-transform duration-300 hover:scale-110"
                                >
                                    <CameraIcon className="w-4 h-4" />
                                </button>
                                <div className="absolute inset-0 flex items-center justify-center transition-opacity duration-300 opacity-0 bg-black/50 group-hover:opacity-100 rounded-2xl">
                                    <span className="text-sm font-medium text-white">
                                        Thay đổi ảnh
                                    </span>
                                </div>
                            </div>
                            <div className="mt-12 ml-4">
                                <h2 className="text-xl font-bold text-gray-900">
                                    {profileData.name}
                                </h2>
                                <p className="text-sm text-gray-600">
                                    {profileData.username}
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
                {settingSections.map((section, idx) => (
                    <div
                        key={idx}
                        className="overflow-hidden bg-white shadow-lg rounded-2xl"
                    >
                        <div className="p-6">
                            <h3 className="mb-4 text-lg font-semibold text-gray-900">
                                {section.title}
                            </h3>
                            <div className="space-y-3">
                                {section.items.map((item, index) => (
                                    <button
                                        key={index}
                                        onClick={item.onClick}
                                        className={`w-full flex items-center p-3 rounded-xl transition-all duration-300
                            ${
                                item.gradient
                                    ? "bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white"
                                    : "hover:bg-gray-50"
                            }`}
                                    >
                                        <div
                                            className={`p-2 rounded-lg ${
                                                item.gradient
                                                    ? "bg-white/20"
                                                    : "bg-gray-100"
                                            }`}
                                        >
                                            <item.icon
                                                className={`h-5 w-5 ${
                                                    item.gradient
                                                        ? "text-white"
                                                        : "text-gray-600"
                                                }`}
                                            />
                                        </div>
                                        <div className="flex-1 ml-4 text-left">
                                            <p
                                                className={`font-medium ${
                                                    item.gradient
                                                        ? "text-white"
                                                        : "text-gray-900"
                                                }`}
                                            >
                                                {item.label}
                                            </p>
                                            <p
                                                className={`text-sm ${
                                                    item.gradient
                                                        ? "text-white/80"
                                                        : "text-gray-500"
                                                }`}
                                            >
                                                {item.description}
                                            </p>
                                        </div>
                                        {item.badge && (
                                            <span
                                                className={`ml-2 px-2.5 py-0.5 rounded-full text-xs font-medium
                                ${
                                    item.gradient
                                        ? "bg-white/20 text-white"
                                        : "bg-rose-100 text-rose-600"
                                }`}
                                            >
                                                {item.badge}
                                            </span>
                                        )}
                                    </button>
                                ))}
                            </div>
                        </div>
                    </div>
                ))}
                <button
                    onClick={handleLogout}
                    className="flex items-center justify-center w-full p-4 font-medium text-gray-600 transition-colors duration-300 bg-white shadow-lg rounded-2xl hover:bg-gray-50"
                >
                    <LogOutIcon className="w-5 h-5 mr-2" />
                    Đăng xuất
                </button>
                <div className="text-sm text-center text-gray-500">
                    <p>DateViet v1.0.0</p>
                </div>
            </div>
            {showPhotoModal && (
                <PhotoUploadModal
                    currentPhoto={profileData.photo}
                    onSave={(newPhoto) => {
                        handlePhotoChange(newPhoto);
                        setShowPhotoModal(false);
                    }}
                    onClose={() => setShowPhotoModal(false)}
                />
            )}
        </div>
    );
};
const PhotoUploadModal = ({ currentPhoto, onSave, onClose }) => {
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState("");
    const [preview, setPreview] = useState(currentPhoto);
    const [isDragging, setIsDragging] = useState(false);
    const handlePhotoUpload = async (file) => {
        if (!file) return;
        if (!file.type.startsWith("image/")) {
            setError("Vui lòng chọn file ảnh");
            return;
        }
        if (file.size > 5 * 1024 * 1024) {
            setError("Kích thước ảnh không được vượt quá 5MB");
            return;
        }
        setError("");
        setLoading(true);
        try {
            const reader = new FileReader();
            reader.onloadend = async () => {
                setPreview(reader.result);
                await new Promise((resolve) => setTimeout(resolve, 1000));
                onSave(reader.result);
            };
            reader.readAsDataURL(file);
        } catch (err) {
            setError("Có lỗi xảy ra khi tải ảnh lên");
        } finally {
            setLoading(false);
        }
    };
    const handleDragOver = (e) => {
        e.preventDefault();
        setIsDragging(true);
    };
    const handleDragLeave = (e) => {
        e.preventDefault();
        setIsDragging(false);
    };
    const handleDrop = (e) => {
        e.preventDefault();
        setIsDragging(false);
        const file = e.dataTransfer.files[0];
        handlePhotoUpload(file);
    };
    const handleFileInput = (e) => {
        const file = e.target.files[0];
        handlePhotoUpload(file);
    };
    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
            <div
                className="absolute inset-0 bg-black/60 backdrop-blur-sm"
                onClick={onClose}
            />
            <div className="relative w-full max-w-md p-6 bg-white rounded-2xl animate-scale-up">
                <h3 className="mb-4 text-xl font-bold text-gray-900">
                    Cập nhật ảnh đại diện
                </h3>
                {preview && (
                    <div className="relative mb-4 overflow-hidden aspect-square rounded-xl">
                        <img
                            src={preview}
                            alt="Preview"
                            className="object-cover w-full h-full"
                        />
                        {!loading && (
                            <button
                                onClick={() => setPreview(null)}
                                className="absolute p-1 text-white transition-colors duration-300 bg-red-500 rounded-full top-2 right-2 hover:bg-red-600"
                            >
                                <XIcon className="w-4 h-4" />
                            </button>
                        )}
                    </div>
                )}
                {!preview && (
                    <label
                        className={`block w-full aspect-square rounded-xl border-2 border-dashed
                     ${
                         isDragging
                             ? "border-[#FF5864] bg-[#FF5864]/5"
                             : "border-gray-300 hover:border-[#FF5864]"
                     }
                     transition-colors cursor-pointer bg-gray-50`}
                        onDragOver={handleDragOver}
                        onDragLeave={handleDragLeave}
                        onDrop={handleDrop}
                    >
                        <input
                            type="file"
                            accept="image/*"
                            onChange={handleFileInput}
                            className="hidden"
                        />
                        <div className="flex flex-col items-center justify-center h-full p-6">
                            <CameraIcon className="w-12 h-12 mb-4 text-gray-400" />
                            <p className="text-sm text-center text-gray-600">
                                Kéo thả ảnh vào đây hoặc click để chọn
                            </p>
                            <p className="mt-2 text-xs text-gray-500">
                                Hỗ trợ: JPG, PNG (Tối đa: 5MB)
                            </p>
                        </div>
                    </label>
                )}
                {error && <p className="mt-2 text-sm text-red-500">{error}</p>}
                <div className="flex gap-3 mt-6">
                    <button
                        onClick={onClose}
                        className="flex-1 px-4 py-2 text-gray-700 transition-colors duration-300 border border-gray-300 rounded-xl hover:bg-gray-50"
                    >
                        Hủy
                    </button>
                    <button
                        onClick={() => onSave(preview)}
                        disabled={loading || !preview}
                        className="flex-1 px-4 py-2 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white
                     rounded-xl hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5
                     disabled:opacity-70 flex items-center justify-center gap-2"
                    >
                        {loading ? (
                            <Loader2Icon className="w-5 h-5 animate-spin" />
                        ) : (
                            "Lưu thay đổi"
                        )}
                    </button>
                </div>
            </div>
        </div>
    );
};
export default Settings;

```

### apps\frontend\src\app\auth\layout.js
```js
"use client";
import { AuthProvider } from "@/hooks/useAuth";

export default function AuthLayout({ children }) {
    return <AuthProvider>{children}</AuthProvider>;
}

```

### apps\frontend\src\app\auth\_helpers.js
```js
import { getData, setData } from "@/utils/LocalStorage";
const AUTH_LOCAL_STORAGE_KEY = "token";
const getAuth = () => {
    try {
        const auth = getData(AUTH_LOCAL_STORAGE_KEY);
        if (auth) {
            return auth;
        } else {
            return undefined;
        }
    } catch (error) {
        console.error("AUTH LOCAL STORAGE PARSE ERROR", error);
    }
};

const setAuth = (auth) => {
    setData(AUTH_LOCAL_STORAGE_KEY, auth);
};

const removeAuth = () => {
    if (!localStorage) return;
    try {
        localStorage.removeItem(AUTH_LOCAL_STORAGE_KEY);
    } catch (error) {
        console.error("AUTH LOCAL STORAGE REMOVE ERROR", error);
    }
};

const setupAxios = (axios) => {
    axios.defaults.headers.Accept = "application/json";
    axios.interceptors.request.use(
        (config) => {
            const auth = getAuth();
            if (auth?.access_token) {
                config.headers.Authorization = `Bearer ${auth.access_token}`;
            }
            return config;
        },
        async (err) => await Promise.reject(err)
    );
};

export { getAuth, setAuth, removeAuth, setupAxios };

```

### apps\frontend\src\app\auth\login\page.js
```js
"use client";
import { useState } from "react";
import { FlameIcon, ArrowLeftIcon } from "lucide-react";

import { useRouter } from "next/navigation";
import { useAuth } from "@/hooks/useAuth";

import { FacebookIcon, PhoneIcon, Loader2Icon } from "lucide-react";
import Link from "next/link";
import { setData } from "@/utils/LocalStorage";

export default function Login() {
    const { login } = useAuth();

    const router = useRouter();
    const [formData, setFormData] = useState({
        email: "khanhace6222@gmail.com",
        password: "123123123",
    });
    const [error, setError] = useState("");
    const [loading, setLoading] = useState(false);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: value,
        }));
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        setLoading(true);
        setError("");
        try {
            login(formData.email, formData.password);
        } catch (error) {
            setError(error.message || "Login failed");
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="relative flex flex-col items-center justify-center min-h-screen p-4 overflow-hidden bg-gradient-to-br from-white via-pink-50 to-rose-50">
            <div className="absolute inset-0 overflow-hidden pointer-events-none">
                <div className="absolute top-0 -right-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl" />
                <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl" />
            </div>
            <div className="relative w-full max-w-md">
                <div className="mb-12 text-center">
                    <div className="flex justify-center mb-4">
                        <div className="relative">
                            <FlameIcon className="h-16 w-16 text-transparent bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text animate-pulse" />
                            <div className="absolute inset-0 h-16 w-16 bg-[#FF5864]/20 rounded-full blur-xl animate-pulse" />
                        </div>
                    </div>
                    <h1 className="text-4xl font-bold text-transparent bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text">
                        DateViet
                    </h1>
                    <p className="mt-3 text-lg text-gray-600">
                        Đăng nhập để tiếp tục
                    </p>
                </div>
                <div className="space-y-6">
                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div>
                            <label className="block mb-1 text-sm font-medium text-gray-700">
                                Email
                            </label>
                            <input
                                type="email"
                                name="email"
                                required
                                value={formData.email}
                                onChange={handleChange}
                                className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                                placeholder="Nhập email của bạn"
                            />
                        </div>
                        <div>
                            <label className="block mb-1 text-sm font-medium text-gray-700">
                                Mật khẩu
                            </label>
                            <input
                                type="password"
                                name="password"
                                required
                                value={formData.password}
                                onChange={handleChange}
                                className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                                placeholder="Nhập mật khẩu"
                            />
                        </div>
                        <button
                            type="submit"
                            disabled={loading}
                            className="w-full bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white py-3 px-6 rounded-xl
                   font-medium hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5 disabled:opacity-70"
                        >
                            {loading ? (
                                <Loader2Icon className="w-5 h-5 mx-auto animate-spin" />
                            ) : (
                                "Đăng nhập"
                            )}
                        </button>
                    </form>
                    <div className="relative">
                        <div className="absolute inset-0 flex items-center">
                            <div className="w-full border-t border-gray-300"></div>
                        </div>
                        <div className="relative flex justify-center text-sm">
                            <span className="px-2 text-gray-500 bg-gradient-to-br from-white via-pink-50 to-rose-50">
                                Hoặc đăng nhập với
                            </span>
                        </div>
                    </div>
                    <div className="space-y-3">
                        <button
                            onClick={() => {}}
                            className="w-full flex items-center justify-center gap-3 bg-white py-3 px-6 rounded-xl 
                   border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300
                   hover:border-gray-300 hover:-translate-y-0.5"
                        >
                            <img
                                src="https://www.google.com/favicon.ico"
                                alt="Google"
                                className="w-5 h-5"
                            />
                            <span className="font-medium text-gray-700">
                                Tiếp tục với Google
                            </span>
                        </button>
                        <button
                            onClick={() => {}}
                            className="w-full flex items-center justify-center gap-3 bg-[#1877F2] py-3 px-6 rounded-xl 
                   shadow-sm hover:shadow-md transition-all duration-300 hover:-translate-y-0.5"
                        >
                            <FacebookIcon className="w-5 h-5 text-white" />
                            <span className="font-medium text-white">
                                Tiếp tục với Facebook
                            </span>
                        </button>
                        <button
                            onClick={() => {}}
                            className="w-full flex items-center justify-center gap-3 bg-white py-3 px-6 rounded-xl 
                   border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300
                   hover:border-gray-300 hover:-translate-y-0.5"
                        >
                            <PhoneIcon className="w-5 h-5 text-gray-600" />
                            <span className="font-medium text-gray-700">
                                Tiếp tục với số điện thoại
                            </span>
                        </button>
                    </div>
                    <div className="text-center">
                        <button
                            onClick={() => {}}
                            className="text-sm text-[#FF5864] hover:text-[#FF655B] font-medium"
                        >
                            Quên mật khẩu?
                        </button>
                    </div>
                </div>
                <div className="mt-8 text-center">
                    <p className="text-gray-600">
                        Chưa có tài khoản?
                        <button
                            className="ml-2 text-[#FF5864] font-medium hover:text-[#FF655B] transition-colors duration-300"
                            onClick={() => router.push("/auth/register")}
                        >
                            Đăng ký
                        </button>
                    </p>
                </div>
                <div className="mt-10 text-center">
                    <Link
                        href="/"
                        className="inline-flex items-center text-gray-600 transition-colors duration-300 hover:text-gray-800"
                    >
                        <ArrowLeftIcon className="w-4 h-4 mr-2" />
                        <span>Quay lại ứng dụng</span>
                    </Link>
                </div>
            </div>
        </div>
    );
}

```

### apps\frontend\src\app\auth\otp\OTPVerification.jsx
```jsx
"use client";

import React, { useEffect, useState, useRef } from "react";
import { Loader2Icon } from "lucide-react";
import axios from "axios";

const OTPVerification = ({ email, onVerify, onResend, onBack }) => {
    const [otp, setOtp] = useState(["", "", "", "", "", ""]);
    console.log(otp);

    const [loading, setLoading] = useState(false);
    const [resendTimer, setResendTimer] = useState(60);
    const [error, setError] = useState("");
    const inputRefs = useRef([]);
    console.log("hihi - outside");
    useEffect(() => {
        const getOTP = async () => {
            const res = await fetch(
                "http://localhost:3001/api/auth/send-verification-otp",
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        email,
                    }),
                }
            );
        };
        getOTP();
    }, []);
    useEffect(() => {
        if (resendTimer > 0) {
            const timer = setTimeout(
                () => setResendTimer(resendTimer - 1),
                1000
            );
            return () => clearTimeout(timer);
        }
    }, [resendTimer]);
    const handleChange = (index, value) => {
        const newOtp = [...otp];
        newOtp[index] = value;
        setOtp(newOtp);
        setError("");
        setTimeout(() => {
            if (value && index < 5) {
                inputRefs.current[index + 1]?.focus();
            }
        }, 1);
    };
    const handleKeyDown = (index, e) => {
        if (e.key === "Backspace" && !otp[index] && index > 0) {
            // Focus previous input on backspace
            inputRefs.current[index - 1]?.focus();
        }
    };
    const handlePaste = (e) => {
        e.preventDefault();
        const pastedData = e.clipboardData.getData("text").slice(0, 6);
        if (!/^\d+$/.test(pastedData)) return;
        const newOtp = [...otp];
        pastedData.split("").forEach((char, index) => {
            if (index < 6) newOtp[index] = char;
        });
        setOtp(newOtp);
    };
    const handleSubmit = async (e) => {
        e.preventDefault();
        const otpString = otp.join("");
        if (otpString.length !== 6) {
            setError("Vui lòng nhập đủ 6 số");
            return;
        }
        setLoading(true);
        setError("");
        try {
            await onVerify(otpString);
        } catch (err) {
            console.log(err);

            setError(err?.message);
        } finally {
            setLoading(false);
        }
    };
    const handleResend = async () => {
        if (resendTimer > 0) return;
        setResendTimer(30);
        await onResend();
    };
    return (
        <div className="flex flex-col min-h-screen bg-gradient-to-br from-white via-pink-50 to-rose-50 relative overflow-hidden">
            <div className="fixed inset-0 overflow-hidden pointer-events-none">
                <div className="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl animate-float" />
                <div
                    className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl animate-float"
                    style={{
                        animationDelay: "-3s",
                    }}
                />
                <div
                    className="absolute top-1/4 left-10 w-40 h-40 bg-gradient-to-r from-pink-200 to-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-float"
                    style={{
                        animationDelay: "-2s",
                    }}
                />
                <div
                    className="absolute bottom-1/4 right-10 w-40 h-40 bg-gradient-to-r from-rose-200 to-rose-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-float"
                    style={{
                        animationDelay: "-4s",
                    }}
                />
                <div className="absolute inset-0 bg-grid-pattern opacity-[0.02]" />
            </div>

            <main className="flex-grow flex items-center justify-center p-4 relative">
                <div className="space-y-6">
                    <div className="text-center">
                        <h2 className="text-2xl font-bold text-gray-900 mb-2">
                            Xác thực email
                        </h2>
                        <p className="text-gray-600">
                            Chúng tôi đã gửi mã xác thực đến
                            <br />
                            <span className="font-medium text-gray-900">
                                {email}
                            </span>
                        </p>
                    </div>
                    <form onSubmit={handleSubmit} className="space-y-6">
                        <div className="flex justify-center gap-2">
                            {otp.map((digit, index) => (
                                <input
                                    key={index}
                                    ref={(el) =>
                                        el && (inputRefs.current[index] = el)
                                    }
                                    type="text"
                                    inputMode="numeric"
                                    pattern="\d*"
                                    maxLength={1}
                                    value={digit}
                                    onChange={(e) =>
                                        handleChange(index, e.target.value)
                                    }
                                    onKeyDown={(e) => handleKeyDown(index, e)}
                                    onPaste={handlePaste}
                                    className="w-12 h-12 text-center text-2xl font-bold rounded-xl border border-gray-300
                       focus:ring-2 focus:ring-[#FF5864] focus:border-transparent
                       disabled:opacity-50"
                                    disabled={loading}
                                />
                            ))}
                        </div>
                        {error && (
                            <p className="text-center text-sm text-red-500">
                                {error}
                            </p>
                        )}
                        <button
                            type="submit"
                            disabled={loading || otp.join("").length !== 6}
                            className="w-full bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white py-3 px-6 rounded-xl
                   font-medium hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5
                   disabled:opacity-70 flex items-center justify-center"
                        >
                            {loading ? (
                                <Loader2Icon className="h-5 w-5 animate-spin" />
                            ) : (
                                "Xác thực"
                            )}
                        </button>
                    </form>
                    <div className="space-y-4">
                        <div className="text-center">
                            <button
                                onClick={handleResend}
                                disabled={resendTimer > 0 || loading}
                                className="text-[#FF5864] hover:text-[#FF655B] font-medium disabled:opacity-50"
                            >
                                {resendTimer > 0
                                    ? `Gửi lại mã sau ${resendTimer}s`
                                    : "Gửi lại mã"}
                            </button>
                        </div>
                        <button
                            onClick={onBack}
                            disabled={loading}
                            className="w-full px-4 py-3 border border-gray-300 rounded-xl text-gray-700
                   hover:bg-gray-50 transition-colors duration-300 disabled:opacity-50"
                        >
                            Quay lại
                        </button>
                    </div>
                </div>
            </main>
        </div>
    );
};
export default OTPVerification;

```

### apps\frontend\src\app\auth\register\page.js
```js
"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";

import {
    UserIcon,
    LockIcon,
    FacebookIcon,
    Loader2Icon,
    MailIcon,
    PhoneIcon,
} from "lucide-react";
import Link from "next/link";
import { FlameIcon, ArrowLeftIcon } from "lucide-react";
import OTPVerification from "../otp/OTPVerification.jsx";

export default function Register() {
    const router = useRouter();
    const [loading, setLoading] = useState(false);
    const [showOTP, setShowOTP] = useState(false);
    const [formData, setFormData] = useState({
        name: "ken",
        email: "khanhace6222@gmail.com",
        password: "123123123",
        confirmPassword: "123123123",
    });

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: value,
        }));
    };
    const [error, setError] = useState("");

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (formData.password !== formData.confirmPassword) {
            setError("Passwords do not match");
            return;
        }
        setLoading(true);

        try {
            const res = await fetch("http://localhost:3001/api/auth/register", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    name: formData.name,
                    email: formData.email,
                    password: formData.password,
                }),
            });

            const data = await res.json();

            if (data?.statusCode === 409) {
                console.log(data?.message);
                return;
            }

            setShowOTP(true);
        } catch (err) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    };

    const handleVerifyOTP = async (otp) => {
        console.log(otp);

        const res = await fetch("http://localhost:3001/api/auth/verify-otp", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                email: formData.email,
                otp,
            }),
        });

        const data = await res.json();
        if (data.statusCode === 400) {
            throw new Error(data.message);
        }
        router.push("/auth/login");
    };
    const handleResendOTP = async () => {
        // Simulate API call to resend OTP
        await new Promise((resolve) => setTimeout(resolve, 1000));
    };
    if (showOTP) {
        return (
            <OTPVerification
                email={formData.email}
                onVerify={handleVerifyOTP}
                onResend={handleResendOTP}
                onBack={() => setShowOTP(false)}
            />
        );
    }

    return (
        <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-white via-pink-50 to-rose-50 p-4 relative overflow-hidden">
            <div className="absolute inset-0 overflow-hidden pointer-events-none">
                <div className="absolute top-0 -right-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl" />
                <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl" />
            </div>
            <div className="w-full max-w-md relative">
                <div className="mb-12 text-center">
                    <div className="flex justify-center mb-4">
                        <div className="relative">
                            <FlameIcon className="h-16 w-16 text-transparent bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text animate-pulse" />
                            <div className="absolute inset-0 h-16 w-16 bg-[#FF5864]/20 rounded-full blur-xl animate-pulse" />
                        </div>
                    </div>
                    <h1 className="text-4xl font-bold text-transparent bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text">
                        DateViet
                    </h1>
                    <p className="mt-3 text-gray-600 text-lg">
                        Tạo tài khoản mới
                    </p>
                </div>
                <div className="space-y-6">
                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Email
                            </label>
                            <input
                                type="email"
                                name="email"
                                required
                                value={formData.email}
                                onChange={handleChange}
                                className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                                placeholder="Nhập email của bạn"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Mật khẩu
                            </label>
                            <input
                                type="password"
                                name="password"
                                required
                                value={formData.password}
                                onChange={handleChange}
                                className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                                placeholder="Tạo mật khẩu"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Xác nhận mật khẩu
                            </label>
                            <input
                                type="password"
                                name="confirmPassword"
                                required
                                value={formData.confirmPassword}
                                onChange={handleChange}
                                className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                                placeholder="Nhập lại mật khẩu"
                            />
                        </div>
                        <button
                            type="submit"
                            disabled={loading}
                            className="w-full bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white py-3 px-6 rounded-xl
                   font-medium hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5 disabled:opacity-70"
                        >
                            {loading ? (
                                <Loader2Icon className="h-5 w-5 animate-spin mx-auto" />
                            ) : (
                                "Đăng ký"
                            )}
                        </button>
                    </form>
                    <div className="relative">
                        <div className="absolute inset-0 flex items-center">
                            <div className="w-full border-t border-gray-300"></div>
                        </div>
                        <div className="relative flex justify-center text-sm">
                            <span className="px-2 bg-gradient-to-br from-white via-pink-50 to-rose-50 text-gray-500">
                                Hoặc đăng ký với
                            </span>
                        </div>
                    </div>
                    <div className="space-y-3">
                        <button
                            onClick={() => {}}
                            className="w-full flex items-center justify-center gap-3 bg-white py-3 px-6 rounded-xl 
                   border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300
                   hover:border-gray-300 hover:-translate-y-0.5"
                        >
                            <img
                                src="https://www.google.com/favicon.ico"
                                alt="Google"
                                className="w-5 h-5"
                            />
                            <span className="text-gray-700 font-medium">
                                Đăng ký với Google
                            </span>
                        </button>
                        <button
                            onClick={() => {}}
                            className="w-full flex items-center justify-center gap-3 bg-[#1877F2] py-3 px-6 rounded-xl 
                   shadow-sm hover:shadow-md transition-all duration-300 hover:-translate-y-0.5"
                        >
                            <FacebookIcon className="h-5 w-5 text-white" />
                            <span className="text-white font-medium">
                                Đăng ký với Facebook
                            </span>
                        </button>
                        <button
                            onClick={() => {}}
                            className="w-full flex items-center justify-center gap-3 bg-white py-3 px-6 rounded-xl 
                   border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300
                   hover:border-gray-300 hover:-translate-y-0.5"
                        >
                            <PhoneIcon className="h-5 w-5 text-gray-600" />
                            <span className="text-gray-700 font-medium">
                                Đăng ký với số điện thoại
                            </span>
                        </button>
                    </div>
                </div>
                <div className="mt-8 text-center">
                    <p className="text-gray-600">
                        Đã có tài khoản?
                        <button className="ml-2 text-[#FF5864] font-medium hover:text-[#FF655B] transition-colors duration-300">
                            Đăng nhập
                        </button>
                    </p>
                </div>
                <div className="mt-10 text-center">
                    <Link
                        href="/"
                        className="inline-flex items-center text-gray-600 hover:text-gray-800 transition-colors duration-300"
                    >
                        <ArrowLeftIcon className="h-4 w-4 mr-2" />
                        <span>Quay lại ứng dụng</span>
                    </Link>
                </div>
            </div>
        </div>
    );
}

```

### apps\frontend\src\app\components\BottomNavigation.jsx
```jsx
import React from "react";
import { useRouter } from "next/navigation";

import { FlameIcon, MessageSquareIcon, UserIcon } from "lucide-react";
const BottomNavigation = ({ activeTab }) => {
    const navigate = useRouter();
    return (
        <div className="bg-white border-t border-gray-200 flex justify-around py-3">
            <button
                onClick={() => navigate("/discover")}
                className={`flex flex-col items-center ${
                    activeTab === "discover"
                        ? "text-[#FF5864]"
                        : "text-gray-500"
                }`}
            >
                <FlameIcon size={24} />
                <span className="text-xs mt-1">Discover</span>
            </button>
            <button
                onClick={() => navigate("/chats")}
                className={`flex flex-col items-center ${
                    activeTab === "chats" ? "text-[#FF5864]" : "text-gray-500"
                }`}
            >
                <MessageSquareIcon size={24} />
                <span className="text-xs mt-1">Chats</span>
            </button>
            <button
                onClick={() => navigate("/profile")}
                className={`flex flex-col items-center ${
                    activeTab === "profile" ? "text-[#FF5864]" : "text-gray-500"
                }`}
            >
                <UserIcon size={24} />
                <span className="text-xs mt-1">Profile</span>
            </button>
        </div>
    );
};
export default BottomNavigation;

```

### apps\frontend\src\app\components\MatchModal.jsx
```jsx
import React, { useEffect } from "react";
import { HeartIcon, MessageCircleIcon, XIcon } from "lucide-react";
import { useNavigate } from "react-router-dom";
const MatchModal = ({ user, onClose }) => {
    const navigate = useNavigate();
    // Add a small vibration effect when the match modal appears
    useEffect(() => {
        if (navigator.vibrate) {
            navigator.vibrate([100, 50, 100]);
        }
    }, []);
    const handleSendMessage = () => {
        onClose();
        navigate(`/chat/${user.id}`);
    };
    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/70">
            <div className="w-full max-w-sm bg-white rounded-xl overflow-hidden shadow-2xl animate-[heartbeat_1s_ease-in-out]">
                <div className="p-4 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-center">
                    <button
                        onClick={onClose}
                        className="absolute top-4 right-4 text-white"
                    >
                        <XIcon size={24} />
                    </button>
                    <HeartIcon size={50} className="mx-auto text-white mb-2" />
                    <h2 className="text-2xl font-bold text-white mb-1">
                        It's a Match!
                    </h2>
                    <p className="text-white/90">
                        You and {user.name} have liked each other.
                    </p>
                </div>
                <div className="flex justify-center -mt-10">
                    <div className="w-20 h-20 rounded-full border-4 border-white overflow-hidden">
                        <img
                            src={user.photos[0]}
                            alt={user.name}
                            className="w-full h-full object-cover"
                        />
                    </div>
                </div>
                <div className="p-6 text-center">
                    <h3 className="text-xl font-bold text-gray-800 mb-2">
                        {user.name}, {user.age}
                    </h3>
                    <p className="text-gray-600 mb-6 line-clamp-2">
                        {user.bio}
                    </p>
                    <div className="flex flex-col gap-3">
                        <button
                            onClick={handleSendMessage}
                            className="w-full py-3 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white rounded-lg flex items-center justify-center gap-2"
                        >
                            <MessageCircleIcon size={20} />
                            <span>Send Message</span>
                        </button>
                        <button
                            onClick={onClose}
                            className="w-full py-3 border border-gray-300 text-gray-700 rounded-lg"
                        >
                            Keep Swiping
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};
export default MatchModal;

```

### apps\frontend\src\app\components\SwipeCard.jsx
```jsx
import React, {
    useEffect,
    useState,
    forwardRef,
    useImperativeHandle,
} from "react";
import {
    HeartIcon,
    XIcon,
    MapPinIcon,
    ChevronLeftIcon,
    ChevronRightIcon,
} from "lucide-react";
const SwipeCard = forwardRef(
    ({ profile, direction, onSwipeComplete, isBackground = false }, ref) => {
        const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);
        const [showDetails, setShowDetails] = useState(false);
        useEffect(() => {
            if (direction && !isBackground) {
                const timer = setTimeout(() => {
                    if (onSwipeComplete) onSwipeComplete();
                }, 300);
                return () => clearTimeout(timer);
            }
        }, [direction, onSwipeComplete, isBackground]);
        const nextPhoto = (e) => {
            e.stopPropagation();
            if (currentPhotoIndex < profile.photos.length - 1) {
                setCurrentPhotoIndex(currentPhotoIndex + 1);
            }
        };
        const prevPhoto = (e) => {
            e.stopPropagation();
            if (currentPhotoIndex > 0) {
                setCurrentPhotoIndex(currentPhotoIndex - 1);
            }
        };
        const toggleDetails = () => {
            if (!isBackground) {
                setShowDetails(!showDetails);
            }
        };
        const getSwipeClass = () => {
            if (!direction) return "";
            return direction === "right"
                ? "translate-x-[120%] rotate-12 transition-transform duration-300"
                : "translate-x-[-120%] -rotate-12 transition-transform duration-300";
        };
        return (
            <div
                className={`w-full max-w-sm aspect-[3/4] rounded-xl overflow-hidden shadow-xl relative 
          ${isBackground ? "scale-[0.95] opacity-70" : getSwipeClass()}`}
                onClick={toggleDetails}
            >
                {/* Photo */}
                <div className="w-full h-full relative">
                    <img
                        src={profile.photos[currentPhotoIndex]}
                        alt={profile.name}
                        className="w-full h-full object-cover"
                    />
                    {/* Photo navigation */}
                    {!isBackground && profile.photos.length > 1 && (
                        <>
                            <div
                                className="absolute top-0 left-0 w-1/3 h-full flex items-center"
                                onClick={prevPhoto}
                            >
                                {currentPhotoIndex > 0 && (
                                    <ChevronLeftIcon
                                        size={40}
                                        className="text-white drop-shadow-lg ml-2"
                                    />
                                )}
                            </div>
                            <div
                                className="absolute top-0 right-0 w-1/3 h-full flex items-center justify-end"
                                onClick={nextPhoto}
                            >
                                {currentPhotoIndex <
                                    profile.photos.length - 1 && (
                                    <ChevronRightIcon
                                        size={40}
                                        className="text-white drop-shadow-lg mr-2"
                                    />
                                )}
                            </div>
                        </>
                    )}
                    {/* Photo indicators */}
                    {!isBackground && profile.photos.length > 1 && (
                        <div className="absolute top-4 left-0 right-0 flex justify-center space-x-1">
                            {profile.photos.map((_, index) => (
                                <div
                                    key={index}
                                    className={`h-1 rounded-full ${
                                        index === currentPhotoIndex
                                            ? "w-6 bg-white"
                                            : "w-2 bg-white/50"
                                    }`}
                                />
                            ))}
                        </div>
                    )}
                    {/* Swipe indicators */}
                    {direction === "right" && !isBackground && (
                        <div className="absolute top-10 left-5 transform -rotate-12">
                            <div className="border-4 border-green-500 rounded-lg px-2 py-1">
                                <HeartIcon
                                    size={40}
                                    className="text-green-500"
                                />
                            </div>
                        </div>
                    )}
                    {direction === "left" && !isBackground && (
                        <div className="absolute top-10 right-5 transform rotate-12">
                            <div className="border-4 border-red-500 rounded-lg px-2 py-1">
                                <XIcon size={40} className="text-red-500" />
                            </div>
                        </div>
                    )}
                    {/* Match percentage */}
                    {!isBackground && (
                        <div className="absolute top-4 right-4 bg-[#FF5864] text-white px-2 py-1 rounded-full text-sm font-bold">
                            {profile.matchPercent}% Match
                        </div>
                    )}
                    {/* Basic info overlay */}
                    <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white">
                        <h2 className="text-2xl font-bold">
                            {profile.name}, {profile.age}
                        </h2>
                        <div className="flex items-center mt-1">
                            <MapPinIcon size={16} className="mr-1" />
                            <span className="text-sm">
                                {profile.distance} km away
                            </span>
                        </div>
                    </div>
                </div>
                {/* Details panel (slides up when card is tapped) */}
                {!isBackground && (
                    <div
                        className={`absolute bottom-0 left-0 right-0 bg-white rounded-t-xl p-4 transform transition-transform duration-300 
              ${showDetails ? "translate-y-0" : "translate-y-full"}`}
                        style={{
                            height: "70%",
                        }}
                    >
                        <div className="w-12 h-1 bg-gray-300 rounded-full mx-auto mb-4"></div>
                        <h2 className="text-xl font-bold text-gray-800">
                            {profile.name}, {profile.age}
                        </h2>
                        <div className="flex items-center text-gray-600 mb-4">
                            <MapPinIcon size={16} className="mr-1" />
                            <span className="text-sm">
                                {profile.distance} km away
                            </span>
                        </div>
                        <h3 className="font-semibold text-gray-800 mb-2">
                            About
                        </h3>
                        <p className="text-gray-600 mb-4">{profile.bio}</p>
                        <h3 className="font-semibold text-gray-800 mb-2">
                            Interests
                        </h3>
                        <div className="flex flex-wrap gap-2">
                            {profile.interests.map((interest) => (
                                <div
                                    key={interest}
                                    className="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm"
                                >
                                    #{interest}
                                </div>
                            ))}
                        </div>
                    </div>
                )}
            </div>
        );
    }
);
export default SwipeCard;

```

### apps\frontend\src\app\components\UserDropdown.jsx
```jsx
import React, { useEffect, useRef } from "react";
import { useRouter } from "next/navigation";

import {
    UserIcon,
    SettingsIcon,
    HelpCircleIcon,
    LogOutIcon,
    HeartIcon,
    StarIcon,
} from "lucide-react";

const UserDropdown = ({ isOpen, onClose }) => {
    const navigate = useRouter();
    const dropdownRef = useRef(null);
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (
                dropdownRef.current &&
                !dropdownRef.current.contains(event.target)
            ) {
                onClose();
            }
        };
        if (isOpen) {
            document.addEventListener("mousedown", handleClickOutside);
        }
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, [isOpen, onClose]);
    if (!isOpen) return null;
    const menuItems = [
        {
            icon: <UserIcon size={20} />,
            label: "View Profile",
            onClick: () => navigate("/profile"),
        },
        {
            icon: <HeartIcon size={20} />,
            label: "My Matches",
            onClick: () => navigate("/matches"),
        },
        {
            icon: <StarIcon size={20} />,
            label: "Upgrade to Premium",
            onClick: () => navigate("/premium"),
        },
        {
            icon: <SettingsIcon size={20} />,
            label: "Settings",
            onClick: () => navigate("/settings"),
        },
        {
            icon: <HelpCircleIcon size={20} />,
            label: "Help & Support",
            onClick: () => navigate("/help"),
        },
    ];
    return (
        <div
            ref={dropdownRef}
            className="absolute right-2 top-14 w-64 bg-white rounded-xl shadow-lg overflow-hidden z-50 transform opacity-100 scale-100 transition-all duration-200"
        >
            <div className="p-4 bg-gradient-to-r from-[#FF5864] to-[#FF655B]">
                <div className="flex items-center space-x-3">
                    <div className="w-12 h-12 rounded-full bg-white/20 flex items-center justify-center">
                        <UserIcon size={24} className="text-white" />
                    </div>
                    <div>
                        <h3 className="text-white font-semibold">John Doe</h3>
                        <p className="text-white/80 text-sm">
                            View and edit profile
                        </p>
                    </div>
                </div>
            </div>
            <div className="py-2">
                {menuItems.map((item, index) => (
                    <button
                        key={index}
                        onClick={() => {
                            item.onClick();
                            onClose();
                        }}
                        className="w-full px-4 py-3 flex items-center space-x-3 hover:bg-gray-50 transition-colors text-gray-700"
                    >
                        <span className="text-gray-500">{item.icon}</span>
                        <span>{item.label}</span>
                    </button>
                ))}
                <div className="w-full h-px bg-gray-200 my-2"></div>
                <button
                    onClick={() => {
                        // Handle logout
                        navigate("/");
                        onClose();
                    }}
                    className="w-full px-4 py-3 flex items-center space-x-3 hover:bg-gray-50 transition-colors text-red-500"
                >
                    <LogOutIcon size={20} />
                    <span>Log Out</span>
                </button>
            </div>
        </div>
    );
};
export default UserDropdown;

```

### apps\frontend\src\app\dashboard\page.js
```js
"use client";

import axios from "axios";
import { useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { getSocket, disconnectSocket } from "@/lib/socket";

export default function Dashboard() {
    const socket = getSocket();
    const router = useRouter();
    const [user, setUser] = useState();
    const [users, setUsers] = useState([]);
    const [usersChat, setUsersChat] = useState([]); //{receiverId, status: false}
    const [usersRequest, setUsersRequest] = useState([]); //{senderId, status: false}
    console.log(users);
    const [roomId, setRoomId] = useState("");
    // const [requestMessage, setRequestMessage] = useState("");
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        socket.on("request-chat", (message) => {
            console.log("Request chat from", message);
        });
        socket.on("receive-request-chat", (senderId) => {
            console.log("Response chat from", senderId);

            console.log(users);

            const user = users.find((user) => user.id === senderId);
            if (!user) {
                console.error("User not found:", senderId);
                return;
            }
            if (user.isReceive) return;

            user.isReceive = true;
            setUsers((prev) => [...prev]);
        });
        socket.on("receive-accept-chat", (data) => {
            const { receiverId, room } = data;
            console.log("Receive accept chat from", receiverId, room);

            const user = users.find((user) => user.id === receiverId);
            if (!user) {
                console.error("User not found:", receiverId);
                return;
            }
            if (user.isChat) return;
            user.isChat = true;
            user.room = room;
            setUsers((prev) => [...prev]);
        });
        socket.on("decline-chat", (receiver_id) => {
            alert("Declined chat from", receiver_id);
            const newUsers = usersChat.filter(
                (user) => user.id !== receiver_id
            );
            setUsersChat(newUsers);
        });
        return () => {
            socket.off("request-chat");
            socket.off("receive-request-chat");
            socket.off("decline-chat");
        };
    }, [users]);

    useEffect(() => {
        const fetchUser = async () => {
            const token = localStorage.getItem("token");

            if (!token) {
                router.push("/auth/login");
                return;
            }
            try {
                const res = await axios.get("http://localhost:3001/api/me", {
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${token}`,
                    },
                });
                const user = res.data;
                if (user.statusCode === 200) {
                    setUser(user);
                    localStorage.setItem("user", JSON.stringify(user));
                }
                const getUsersOnline = async () => {
                    const res = await axios.get(
                        "http://localhost:3001/api/users/online",
                        {
                            headers: {
                                "Content-Type": "application/json",
                                Authorization: `Bearer ${token}`,
                            },
                        }
                    );
                    if (res.data.statusCode === 200) {
                        setUsers(
                            res.data.users
                                ?.filter((item) => item.id !== user.id)
                                ?.map((item) => ({
                                    ...item,
                                    isRequest: false,
                                    isReceive: false,
                                    isChat: false,
                                    room: {},
                                }))
                        );
                    }
                };
                getUsersOnline();
                socket.emit("me", user);
                return () => {
                    socket.off("me");
                };
            } catch (error) {
                router.push("/auth/login");
            } finally {
                setLoading(false);
            }
        };

        fetchUser();
    }, []);

    // const getRoom = async (senderId, receiverId) => {};

    const handleChat = (receiverId) => {
        const user = users.find((user) => user.id === receiverId);

        router.push(`/chat/${user.room.id}`);
    };

    const handleRequest = (receiverId) => {
        const user = users.find((user) => user.id === receiverId);
        if (user?.isRequest) {
            alert("You already have a chat request with this user.");
            return;
        }
        console.log(user);

        user.isRequest = true;
        socket.emit("request-chat", receiverId);
        setUsers((prev) => [...prev]);
    };

    const handleAccept = (senderId) => {
        // TODO: Accept chat request
        console.log("Accept chat request");
        socket.emit("accept-chat", senderId);

        // router.push(`/chat/${roomId}`);
    };

    const handleDecline = (senderId) => {
        const newUser = usersRequest.filter(
            (user) => user.senderId !== senderId
        );
        setUsersRequest(newUser);
        socket.emit("decline-chat", senderId);
    };

    const logout = () => {
        socket.emit("logout");
        disconnectSocket();
        localStorage.removeItem("token");
        localStorage.removeItem("user");
        router.push("/auth/login");
    };

    // if (loading) return <p>Loading...</p>;

    return (
        <main className="max-w-4xl p-8 mx-auto">
            <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
                {/* Header Section */}
                <div className="bg-gradient-to-r from-blue-500 to-blue-600 p-6">
                    <h1 className="text-3xl font-bold text-white text-center">
                        🎯 Dashboard
                    </h1>
                    <div className="mt-4 bg-white/10 backdrop-blur-sm rounded-xl p-4 text-center">
                        <p className="text-xl text-white">
                            Welcome,{" "}
                            <span className="font-semibold">{user?.name}</span>!
                        </p>
                        <button
                            onClick={logout}
                            className="mt-4 px-6 py-2 bg-red-500 text-white rounded-lg 
                                     hover:bg-red-600 transform hover:scale-105 
                                     transition-all duration-200 font-medium"
                        >
                            Logout
                        </button>
                    </div>
                </div>

                {/* Chat Requests Section */}
                {users && users.some((u) => u.isReceive) && (
                    <div className="p-6 border-b">
                        <div className="bg-yellow-50 rounded-xl overflow-hidden">
                            <div className="bg-yellow-100 px-4 py-2">
                                <h3 className="text-yellow-800 font-medium">
                                    📬 New Chat Requests
                                </h3>
                            </div>
                            <ul className="divide-y divide-yellow-100">
                                {users
                                    .filter((u) => u.isReceive)
                                    .map((u) => (
                                        <li
                                            key={u.id}
                                            className="p-4 flex items-center justify-between"
                                        >
                                            <span className="text-gray-700">
                                                {u.display_name} wants to chat
                                                with you
                                            </span>
                                            <div className="space-x-2">
                                                <button
                                                    onClick={() =>
                                                        handleAccept(u.id)
                                                    }
                                                    className="px-4 py-1.5 bg-green-500 text-white rounded-lg
                                                             hover:bg-green-600 transition-colors"
                                                >
                                                    Accept
                                                </button>
                                                <button
                                                    onClick={() =>
                                                        handleDecline(u.id)
                                                    }
                                                    className="px-4 py-1.5 bg-gray-500 text-white rounded-lg
                                                             hover:bg-gray-600 transition-colors"
                                                >
                                                    Decline
                                                </button>
                                            </div>
                                        </li>
                                    ))}
                            </ul>
                        </div>
                    </div>
                )}

                {/* Online Users Section */}
                <div className="p-6">
                    <h2 className="text-xl font-semibold text-gray-800 mb-4">
                        🟢 Online Users
                    </h2>
                    {users.length === 0 ? (
                        <div className="text-center py-8 bg-gray-50 rounded-xl">
                            <p className="text-gray-500 italic">
                                No users online
                            </p>
                        </div>
                    ) : (
                        <ul className="divide-y divide-gray-100 bg-gray-50 rounded-xl overflow-hidden">
                            {users.map((u) => (
                                <li
                                    key={u.id}
                                    className="flex items-center justify-between p-4 hover:bg-gray-100 transition-colors"
                                >
                                    <div className="flex items-center gap-3">
                                        <span className="text-green-500 text-lg">
                                            ●
                                        </span>
                                        <span className="font-medium text-gray-700">
                                            {u.display_name}
                                        </span>
                                    </div>
                                    {u.isChat ? (
                                        <button
                                            onClick={() => handleChat(u.id)}
                                            className="px-4 py-1.5 bg-blue-500 text-white rounded-lg
                                                     hover:bg-blue-600 transition-all duration-200
                                                     transform hover:scale-105"
                                        >
                                            Chat
                                        </button>
                                    ) : (
                                        <button
                                            onClick={() => handleRequest(u.id)}
                                            className={`px-4 py-1.5 rounded-lg transition-all duration-200
                                                      transform hover:scale-105 ${
                                                          u.isRequest
                                                              ? "bg-gray-500 text-white hover:bg-gray-600"
                                                              : "bg-blue-500 text-white hover:bg-blue-600"
                                                      }`}
                                        >
                                            {u.isRequest
                                                ? "Requested"
                                                : "Request"}
                                        </button>
                                    )}
                                </li>
                            ))}
                        </ul>
                    )}
                </div>
            </div>
        </main>
    );
}

```

### apps\frontend\src\app\discover\page.js
```js
"use client";
import React, { useState, useRef } from "react";
import {
    HeartIcon,
    XIcon,
    StarIcon,
    MessageCircleIcon,
    UserIcon,
    SettingsIcon,
} from "lucide-react";
import { useRouter } from "next/navigation";
import BottomNavigation from "../components/BottomNavigation";
import SwipeCard from "../components/SwipeCard";
import UserDropdown from "../components/UserDropdown";
// Mock data for profiles
const mockProfiles = [
    {
        id: 1,
        name: "Mai Anh",
        age: 25,
        bio: "Yêu thích du lịch và khám phá những địa điểm mới. Thích uống cà phê buổi tối và trò chuyện.",
        distance: 3,
        matchPercent: 85,
        photos: [
            "https://images.unsplash.com/photo-1529626455594-4ff0802cfb7e?ixlib=rb-1.2.1&auto=format&fit=crop&w=600&q=80",
            "https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&auto=format&fit=crop&w=600&q=80",
        ],
        interests: ["CafeTối", "DuLịchBụi", "Âm nhạc", "Phim ảnh"],
    },
    {
        id: 2,
        name: "Hoàng Minh",
        age: 28,
        bio: "Nhiếp ảnh gia, yêu thích âm nhạc và thể thao. Đang tìm kiếm người đồng hành cho những chuyến đi.",
        distance: 5,
        matchPercent: 72,
        photos: [
            "https://images.unsplash.com/photo-1519085360753-af0119f7cbe7?ixlib=rb-1.2.1&auto=format&fit=crop&w=600&q=80",
            "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&auto=format&fit=crop&w=600&q=80",
        ],
        interests: ["Thể thao", "Chụp ảnh", "DuLịchBụi"],
    },
    {
        id: 3,
        name: "Thu Hà",
        age: 24,
        bio: "Yêu thích nấu ăn và đọc sách. Thích những buổi hẹn hò đơn giản như đi dạo công viên hoặc thưởng thức ẩm thực.",
        distance: 2,
        matchPercent: 91,
        photos: [
            "https://images.unsplash.com/photo-1496440737103-cd596325d314?ixlib=rb-1.2.1&auto=format&fit=crop&w=600&q=80",
            "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-1.2.1&auto=format&fit=crop&w=600&q=80",
        ],
        interests: ["Nấu ăn", "Sách", "Âm nhạc", "CafeTối"],
    },
];
const DiscoveryPage = ({ onMatch }) => {
    const [currentIndex, setCurrentIndex] = useState(0);
    const [swipeDirection, setSwipeDirection] = useState(null);
    const [isDropdownOpen, setIsDropdownOpen] = useState(false);
    const cardRef = useRef(null);
    const router = useRouter();
    const handleSwipe = (direction) => {
        setSwipeDirection(direction);
        setTimeout(() => {
            if (direction === "right" && Math.random() > 0.5) {
                onMatch(mockProfiles[currentIndex]);
            }
            setCurrentIndex((prevIndex) =>
                Math.min(prevIndex + 1, mockProfiles.length - 1)
            );
            setSwipeDirection(null);
        }, 300);
    };
    const resetSwipe = () => {
        setSwipeDirection(null);
    };
    return (
        <div className="flex flex-col h-screen bg-gray-50">
            <header className="bg-white p-4 shadow-sm flex justify-between items-center relative">
                <button
                    onClick={() => router.push("/settings")}
                    className="p-2"
                >
                    <SettingsIcon size={24} className="text-gray-500" />
                </button>
                <h1 className="text-xl font-bold text-[#FF5864]">Discover</h1>
                <button
                    onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                    className="p-2"
                >
                    <UserIcon size={24} className="text-gray-500" />
                </button>
                <UserDropdown
                    isOpen={isDropdownOpen}
                    onClose={() => setIsDropdownOpen(false)}
                />
            </header>
            <main className="flex-1 relative overflow-hidden p-4">
                {currentIndex < mockProfiles.length ? (
                    <div className="h-full flex items-center justify-center">
                        <SwipeCard
                            ref={cardRef}
                            profile={mockProfiles[currentIndex]}
                            direction={swipeDirection}
                            onSwipeComplete={resetSwipe}
                        />
                        {currentIndex + 1 < mockProfiles.length && (
                            <div className="absolute top-0 left-0 w-full h-full flex justify-center items-center -z-10">
                                <SwipeCard
                                    profile={mockProfiles[currentIndex + 1]}
                                    isBackground={true}
                                />
                            </div>
                        )}
                    </div>
                ) : (
                    <div className="h-full flex flex-col items-center justify-center text-center p-4">
                        <div className="w-20 h-20 bg-gray-200 rounded-full flex items-center justify-center mb-4">
                            <HeartIcon size={40} className="text-gray-400" />
                        </div>
                        <h2 className="text-xl font-bold text-gray-800 mb-2">
                            No more profiles
                        </h2>
                        <p className="text-gray-600 mb-6">
                            Check back later for more people, or adjust your
                            discovery settings.
                        </p>
                        <button
                            onClick={() => setCurrentIndex(0)}
                            className="px-6 py-2 bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white rounded-lg"
                        >
                            Refresh
                        </button>
                    </div>
                )}
            </main>
            {currentIndex < mockProfiles.length && (
                <div className="p-4 flex justify-center space-x-6">
                    <button
                        onClick={() => handleSwipe("left")}
                        className="w-14 h-14 bg-white rounded-full shadow-lg flex items-center justify-center border border-gray-200"
                    >
                        <XIcon size={30} className="text-red-500" />
                    </button>
                    <button className="w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center border border-gray-200">
                        <StarIcon size={24} className="text-blue-500" />
                    </button>
                    <button
                        onClick={() => handleSwipe("right")}
                        className="w-14 h-14 bg-white rounded-full shadow-lg flex items-center justify-center border border-gray-200"
                    >
                        <HeartIcon size={30} className="text-[#FF5864]" />
                    </button>
                </div>
            )}
            <BottomNavigation activeTab="discover" />
        </div>
    );
};
export default DiscoveryPage;

```

### apps\frontend\src\app\profile-setup\page.js
```js
import { MetadataProvider } from "@/hooks/useMetadata";
import ProfileSetup from "./components/ProfileSetup";
import { setupAxios } from "@/app/auth/_helpers";
import axios from "axios";
import { AuthProvider } from "@/hooks/useAuth";
setupAxios(axios);
export default function ProfileSetupPage() {
    return (
        <AuthProvider>
            <MetadataProvider>
                <ProfileSetup />
            </MetadataProvider>
        </AuthProvider>
    );
}

```

### apps\frontend\src\app\profile-setup\components\BasicInfo.js
```js
import React from "react";
import { CrownIcon } from "lucide-react";
const BasicInfo = ({ formData, setFormData }) => {
    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: value,
        }));
    };
    return (
        <div className="space-y-6">
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Tên của bạn
                </label>
                <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    placeholder="Nhập tên của bạn"
                    className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                />
            </div>
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Ngày sinh
                </label>
                <input
                    type="date"
                    name="birthday"
                    value={formData.birthday}
                    onChange={handleChange}
                    className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] focus:border-transparent"
                />
            </div>
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Giới tính
                </label>
                <div className="grid grid-cols-3 gap-3">
                    {["Nam", "Nữ", "Khác"].map((gender) => (
                        <button
                            key={gender}
                            type="button"
                            onClick={() =>
                                handleChange({
                                    target: {
                                        name: "gender",
                                        value: gender,
                                    },
                                })
                            }
                            className={`py-3 px-4 rounded-xl border ${
                                formData.gender === gender
                                    ? "border-[#FF5864] bg-[#FF5864]/5 text-[#FF5864]"
                                    : "border-gray-300 hover:border-gray-400"
                            }`}
                        >
                            {gender}
                        </button>
                    ))}
                </div>
            </div>
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Độ Tuổi Ưa Thích
                </label>
                <div className="flex items-center justify-between mb-2">
                    <span className="text-sm text-gray-500">18</span>
                    <span className="text-sm text-gray-500">32</span>
                </div>
                <input
                    type="range"
                    min="18"
                    max="32"
                    value={formData.ageRange || 25}
                    onChange={(e) =>
                        handleChange({
                            target: {
                                name: "ageRange",
                                value: e.target.value,
                            },
                        })
                    }
                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                />
            </div>
            <div className="p-4 bg-gradient-to-r from-amber-400 to-amber-600 rounded-xl">
                <div className="flex items-center gap-3">
                    <CrownIcon className="w-6 h-6 text-white" />
                    <div>
                        <h3 className="font-semibold text-white">
                            Tinder Gold™
                        </h3>
                        <p className="text-sm text-white/80">
                            Các lựa chọn tiêu chí giúp hiển thị những người hợp
                            gu của bạn
                        </p>
                    </div>
                </div>
            </div>
        </div>
    );
};
export default BasicInfo;

```

### apps\frontend\src\app\profile-setup\components\BioInterests.js
```js
import React, { useEffect, useState } from "react";
const BioInterests = ({ metadata, formData, setFormData }) => {
    console.log(metadata);

    const [popularInterests, setPopularInterests] = useState([]);
    console.log(popularInterests);

    useEffect(() => {
        const data = metadata.favorites.map((favorite) => ({
            value: favorite.id,
            name: favorite.value,
        }));
        setPopularInterests(data);
    }, [metadata]);
    const handleBioChange = (e) => {
        setFormData((prev) => ({
            ...prev,
            bio: e.target.value,
        }));
    };
    const toggleInterest = (interest) => {
        setFormData((prev) => ({
            ...prev,
            interests: prev.interests.includes(interest)
                ? prev.interests.filter((i) => i !== interest)
                : [...prev.interests, interest],
        }));
    };
    return (
        <div className="space-y-6">
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Giới thiệu bản thân
                </label>
                <textarea
                    value={formData.bio}
                    onChange={handleBioChange}
                    placeholder="Hãy viết vài điều về bản thân..."
                    className="w-full px-4 py-3 rounded-xl border border-gray-300 focus:ring-2 focus:ring-[#FF5864] 
                   focus:border-transparent resize-none"
                    rows={4}
                    maxLength={500}
                />
                <p className="mt-2 text-sm text-right text-gray-500">
                    {formData.bio.length}/500
                </p>
            </div>
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Sở thích của bạn
                </label>
                <p className="mb-4 text-sm text-gray-500">
                    Chọn các sở thích để tìm người phù hợp với bạn
                </p>
                <div className="flex flex-wrap gap-2">
                    {popularInterests.map(({ value, name }) => (
                        <button
                            key={value}
                            onClick={() => toggleInterest(value)}
                            className={`px-4 py-2 rounded-full text-sm transition-all duration-300
                       ${
                           formData.interests.includes(value)
                               ? "bg-[#FF5864] text-white"
                               : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                       }`}
                        >
                            {name}
                        </button>
                    ))}
                </div>
            </div>
        </div>
    );
};
export default BioInterests;

```

### apps\frontend\src\app\profile-setup\components\Location.js
```js
import React from "react";
import { MapPinIcon } from "lucide-react";
const Location = ({ formData, setFormData }) => {
    const handleLocationChange = (e) => {
        setFormData((prev) => ({
            ...prev,
            location: e.target.value,
        }));
    };
    const handleRadiusChange = (e) => {
        setFormData((prev) => ({
            ...prev,
            searchRadius: parseInt(e.target.value),
        }));
    };
    return (
        <div className="space-y-6">
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Vị trí của bạn
                </label>
                <div className="relative">
                    <MapPinIcon className="absolute w-5 h-5 text-gray-400 transform -translate-y-1/2 left-4 top-1/2" />
                    <input
                        type="text"
                        value={formData.location}
                        onChange={handleLocationChange}
                        placeholder="Nhập địa chỉ của bạn"
                        className="w-full pl-12 pr-4 py-3 rounded-xl border border-gray-300 focus:ring-2 
                     focus:ring-[#FF5864] focus:border-transparent"
                    />
                </div>
            </div>
            <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                    Bán kính tìm kiếm
                </label>
                <div className="space-y-4">
                    <input
                        type="range"
                        min="1"
                        max="100"
                        value={formData.searchRadius}
                        onChange={handleRadiusChange}
                        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer
                     [&::-webkit-slider-thumb]:appearance-none
                     [&::-webkit-slider-thumb]:h-4
                     [&::-webkit-slider-thumb]:w-4
                     [&::-webkit-slider-thumb]:rounded-full
                     [&::-webkit-slider-thumb]:bg-[#FF5864]"
                    />
                    <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-500">1 km</span>
                        <span className="text-sm font-medium text-gray-700">
                            {formData.searchRadius} km
                        </span>
                        <span className="text-sm text-gray-500">100 km</span>
                    </div>
                </div>
            </div>
            <div className="p-4 bg-gray-50 rounded-xl">
                <p className="text-sm text-gray-600">
                    DateViet sẽ sử dụng vị trí của bạn để tìm kiếm những người
                    phù hợp trong khu vực. Bạn có thể thay đổi cài đặt này sau.
                </p>
            </div>
        </div>
    );
};
export default Location;

```

### apps\frontend\src\app\profile-setup\components\PhotoUpload.js
```js
import React from "react";
import { ImageIcon, PlusIcon } from "lucide-react";
const PhotoUpload = ({ formData, setFormData }) => {
    const handlePhotoUpload = (e) => {
        const file = e.target.files[0];

        if (!file.type.match("image.*")) {
            alert("Vui lòng chỉ chọn file hình ảnh");
            return;
        }

        if (file.size > 5 * 1024 * 1024) {
            alert("Kích thước file không được vượt quá 5MB");
            return;
        }

        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                setFormData((prev) => ({
                    ...prev,
                    photos: [...prev.photos, reader.result],
                    photoFiles: [...prev.photoFiles, file],
                }));
            };
            reader.readAsDataURL(file);
        }
    };
    const removePhoto = (index) => {
        setFormData((prev) => ({
            ...prev,
            photos: prev.photos.filter((_, i) => i !== index),
            photoFiles: prev.photoFiles.filter((photo, i) => photo !== index),
        }));
    };

    console.log(formData.photoFiles);

    return (
        <div className="space-y-6">
            <div>
                <p className="mb-4 text-sm text-gray-600">
                    Thêm ít nhất 2 ảnh để tiếp tục. Chọn ảnh đẹp nhất của bạn!
                </p>
                <div className="grid  lg:grid-cols-3 gap-4">
                    {[...Array(6)].map((_, index) => {
                        const photo = formData.photoFiles[index];
                        const photoBase64 = formData.photos[index];
                        console.log(photo, "photo", index);

                        return (
                            <div
                                key={index + 1}
                                className="relative overflow-hidden aspect-square rounded-xl"
                            >
                                {photo ? (
                                    <div className="relative h-full group">
                                        <img
                                            src={
                                                photo instanceof File
                                                    ? URL.createObjectURL(photo)
                                                    : typeof photo === "string"
                                                    ? `http://localhost:3001${photo}`
                                                    : photoBase64
                                            }
                                            alt={`Photo ${index + 1}`}
                                            className="object-cover w-full h-full order-2"
                                        />
                                        <button
                                            onClick={() => removePhoto(photo)}
                                            className="absolute inset-0 flex items-center justify-center text-white transition-opacity opacity-0 bg-black/50 group-hover:opacity-100"
                                        >
                                            Xóa ảnh
                                        </button>
                                    </div>
                                ) : (
                                    <label className="flex flex-col items-center justify-center w-full h-full transition-colors border-2 border-gray-300 border-dashed cursor-pointer rounded-xl hover:bg-gray-50">
                                        <input
                                            type="file"
                                            accept="image/*"
                                            onChange={handlePhotoUpload}
                                            className="hidden"
                                        />
                                        <PlusIcon className="w-8 h-8 text-gray-400" />
                                    </label>
                                )}
                            </div>
                        );
                    })}
                </div>
            </div>
        </div>
    );
};
export default PhotoUpload;

```

### apps\frontend\src\app\profile-setup\components\Preferences.js
```js
import React, { useState, useEffect } from "react";
import {
    MoonIcon,
    GraduationCapIcon,
    HomeIcon,
    HeartIcon,
    WineIcon,
    DumbbellIcon,
    UtensilsIcon,
    GlobeIcon,
    BedIcon,
    PawPrintIcon,
    BoxIcon,
    ChevronDownIcon,
    ChevronUpIcon,
    CheckIcon,
} from "lucide-react";
const preferenceOptions = {
    "Cung hoàng đạo": [],
    "Giáo dục": [],
    "Gia đình tương lai": [],
    "Kiểu tính cách": [],
    "Về việc uống bia rượu": [
        {
            value: 1,
            name: "Có",
        },
        {
            value: 2,
            name: "Không",
        },
    ],
    "Bạn có hay hút thuốc không?": [
        {
            value: 1,
            name: "Có",
        },
        {
            value: 2,
            name: "Không",
        },
    ],
    "Tập luyện": [
        {
            value: 1,
            name: "Có",
        },
        {
            value: 2,
            name: "Không",
        },
    ],
    "Chế độ ăn uống": [],
    "Truyền thông xã hội": [],
    "Thói quen ngủ": [],
    "Thú cưng": [],
};
const PreferenceItem = ({
    icon: Icon,
    label,
    onClick,
    selected,
    expanded,
    selectedOption,
    onToggleExpand,
}) => {
    const currentSelectedOptionName = preferenceOptions[label].find(
        ({ value }) => value === selectedOption
    );
    return (
        <div className="space-y-2">
            <button
                onClick={onToggleExpand}
                className={`flex items-center justify-between w-full p-4 rounded-xl border 
            ${selected ? "border-[#FF5864] bg-[#FF5864]/5" : "border-gray-300"} 
            hover:border-gray-400 transition-colors`}
            >
                <div className="flex items-center gap-3">
                    <Icon className="w-5 h-5 text-gray-600" />
                    <div className="text-left">
                        <span className="text-gray-900">{label}</span>
                        {selectedOption && (
                            <p className="text-sm text-gray-500">
                                {currentSelectedOptionName?.name}
                            </p>
                        )}
                    </div>
                </div>
                {expanded ? (
                    <ChevronUpIcon className="w-5 h-5 text-gray-400" />
                ) : (
                    <ChevronDownIcon className="w-5 h-5 text-gray-400" />
                )}
            </button>
            {expanded && (
                <div className="p-3 ml-1 space-y-2 bg-gray-50 rounded-xl animate-scale-up">
                    {preferenceOptions[label].map(({ value, name }) => (
                        <button
                            key={value}
                            onClick={() => onClick(value)}
                            className={`flex items-center justify-between w-full p-3 rounded-lg
                 ${
                     selectedOption === value
                         ? "bg-[#FF5864] text-white"
                         : "hover:bg-gray-100"
                 }
                 transition-colors duration-200`}
                        >
                            <span>{name}</span>
                            {selectedOption === value && (
                                <CheckIcon className="w-4 h-4 text-white" />
                            )}
                        </button>
                    ))}
                </div>
            )}
        </div>
    );
};
const Preferences = ({ metadata, formData, setFormData }) => {
    useEffect(() => {
        const mappping = [
            { label: "Cung hoàng đạo", key: "zodiacs" },
            { label: "Giáo dục", key: "educations" },
            { label: "Gia đình tương lai", key: "futureFamilies" },
            {
                label: "Kiểu tính cách",
                key: "characters",
            },
            { label: "Chế độ ăn uống", key: "diets" },
            { label: "Truyền thông xã hội", key: "snus" },
            { label: "Thói quen ngủ", key: "sleeps" },
            { label: "Thú cưng", key: "pets" },
        ];
        mappping.forEach((item) => {
            preferenceOptions[item?.label] = metadata[item?.key].map(
                (item) => ({ value: item.id, name: item.value })
            );
        });
    }, [metadata]);
    const [expandedItem, setExpandedItem] = useState(null);
    const handleOptionSelect = (preference, value) => {
        setFormData((prev) => ({
            ...prev,
            preferences: {
                ...prev.preferences,
                [preference]: value,
            },
        }));
    };
    const preferences = [
        {
            icon: MoonIcon,
            label: "Cung hoàng đạo",
        },
        {
            icon: GraduationCapIcon,
            label: "Giáo dục",
        },
        {
            icon: HomeIcon,
            label: "Gia đình tương lai",
        },
        {
            icon: HeartIcon,
            label: "Kiểu tính cách",
        },
        {
            icon: WineIcon,
            label: "Về việc uống bia rượu",
        },
        {
            icon: BoxIcon,
            label: "Bạn có hay hút thuốc không?",
        },
        {
            icon: DumbbellIcon,
            label: "Tập luyện",
        },
        {
            icon: UtensilsIcon,
            label: "Chế độ ăn uống",
        },
        {
            icon: GlobeIcon,
            label: "Truyền thông xã hội",
        },
        {
            icon: BedIcon,
            label: "Thói quen ngủ",
        },
        {
            icon: PawPrintIcon,
            label: "Thú cưng",
        },
    ];

    return (
        <div className="space-y-4">
            <p className="mb-4 text-sm text-gray-500">
                Thêm chi tiết để tìm kiếm người phù hợp hơn
            </p>
            {preferences.map((pref) => {
                return (
                    <PreferenceItem
                        key={pref.label}
                        icon={pref.icon}
                        label={pref.label}
                        selected={formData.preferences?.[pref.label]}
                        expanded={expandedItem === pref.label}
                        selectedOption={formData.preferences?.[pref.label]}
                        onToggleExpand={() =>
                            setExpandedItem(
                                expandedItem === pref.label ? null : pref.label
                            )
                        }
                        onClick={(value) =>
                            handleOptionSelect(pref.label, value)
                        }
                    />
                );
            })}
        </div>
    );
};
export default Preferences;

```

### apps\frontend\src\app\profile-setup\components\ProfileSetup.js
```js
"use client";
import React, { useState, Component, useEffect } from "react";
import Link from "next/link";
import { ArrowLeftIcon, ArrowRightIcon, FlameIcon } from "lucide-react";
import Steps from "./Steps";
import BasicInfo from "./BasicInfo";
import PhotoUpload from "./PhotoUpload";
import BioInterests from "./BioInterests";
import Location from "./Location";
import Preferences from "./Preferences";
import { useMetadata } from "@/hooks/useMetadata";
import { useRouter } from "next/navigation";
import { useAuth } from "@/hooks/useAuth";

import { setupAxios } from "@/app/auth/_helpers";
import axios from "axios";
setupAxios(axios);
const genderMap = { Nam: "male", Nữ: "female", Khác: "other" };

const ProfileSetup = () => {
    const router = useRouter();
    const { auth, currentUser } = useAuth();
    const metadata = useMetadata();
    const formDataMap = {
        zodiacId: "Cung hoàng đạo",
        educationId: "Giáo dục",
        futureFamilyId: "Gia đình tương lai",
        characterId: "Kiểu tính cách",
        drink: "Về việc uống bia rượu",
        smoke: "Bạn có hay hút thuốc không?",
        train: "Tập luyện",
        dietId: "Chế độ ăn uống",
        snuId: "Truyền thông xã hội",
        sleepId: "Thói quen ngủ",
        petId: "Thú cưng",
    };
    const [currentStep, setCurrentStep] = useState(0);
    const [formData, setFormData] = useState({
        name: currentUser?.displayName || "",
        birthday: "",
        gender: currentUser?.gender
            ? Object.keys(genderMap).find(
                  (key) => genderMap[key] === currentUser.gender
              )
            : "Nam",
        ageRange: currentUser?.age,
        photos: [],
        photoFiles: [],
        bio: "",
        interests: [],
        location: "",
        searchRadius: 10,
        preferences: Object.entries(formDataMap).reduce((acc, [key, value]) => {
            if (currentUser && currentUser[key] !== undefined) {
                if (key === "drink" || key === "smoke" || key === "train") {
                    acc[value] = currentUser[key] === false ? 2 : 1;
                } else {
                    acc[value] = currentUser[key];
                }
            }
            return acc;
        }, {}),
    });

    useEffect(() => {
        if (currentUser) {
            let formattedBirthday = "";
            if (currentUser.birthday) {
                try {
                    const date = new Date(currentUser.birthday);
                    if (!isNaN(date.getTime())) {
                        formattedBirthday = date.toISOString().split("T")[0];
                    }
                } catch (error) {
                    console.error("Error formatting birthday:", error);
                }
            }
            setFormData((prev) => ({
                ...prev,
                name: currentUser.displayName,
                birthday: formattedBirthday,
                gender: currentUser.gender
                    ? Object.keys(genderMap).find(
                          (key) => genderMap[key] === currentUser.gender
                      )
                    : "Nam",
                ageRange: currentUser.age,
                photoFiles:
                    currentUser?.photos?.map((photo) => photo?.url) || [],
                bio: currentUser.aboutMe || "",
                interests: currentUser.favorites,
                location: currentUser.location,
                searchRadius: currentUser.searchRadius,
                preferences: Object.entries(formDataMap).reduce(
                    (acc, [key, value]) => {
                        if (currentUser && currentUser[key] !== undefined) {
                            if (
                                key === "drink" ||
                                key === "smoke" ||
                                key === "train"
                            ) {
                                acc[value] = currentUser[key] === false ? 2 : 1;
                            } else {
                                acc[value] = currentUser[key];
                            }
                        }
                        return acc;
                    },
                    {}
                ),
            }));
        }
    }, [currentUser]);

    const steps = [
        {
            title: "Thông tin cơ bản",
            component: BasicInfo,
        },
        {
            title: "Ảnh của bạn",
            component: PhotoUpload,
        },
        {
            title: "Sở thích & Tiêu chí",
            component: Preferences,
        },
        {
            title: "Giới thiệu bản thân",
            component: BioInterests,
        },
        {
            title: "Vị trí",
            component: Location,
        },
    ];
    const handleNext = () => {
        if (currentStep < steps.length - 1) {
            setCurrentStep(currentStep + 1);
        }
    };
    const handlePrevious = () => {
        if (currentStep > 0) {
            setCurrentStep(currentStep - 1);
        }
    };
    const handleComplete = async () => {
        function transformUserData(input) {
            let birthdayDate = null;
            if (input.birthday) {
                try {
                    birthdayDate = new Date(input.birthday);
                    if (isNaN(birthdayDate.getTime())) {
                        console.error("Invalid date format for birthday");
                        birthdayDate = null;
                    }
                } catch (error) {
                    console.error("Error parsing birthday date:", error);
                }
            }
            return {
                user: {
                    id: currentUser?.id,
                    displayName: input.name,
                    email: currentUser?.email,
                    gender: genderMap[input.gender] || "other",
                    preferredGender: genderMap[input.gender] || "other",
                    name: input.name,
                    age: parseInt(input.ageRange),
                    aboutMe: input.bio,
                    // height: "170",
                    location: input.location,
                    birthday: birthdayDate ? birthdayDate.toISOString() : null,
                    languageId: 1,
                    religionId: input.preferences["Tôn giáo"] || 2,
                    careerId: 1,
                    educationId: input.preferences["Giáo dục"],
                    zodiacId: input.preferences["Cung hoàng đạo"],
                    characterId: input.preferences["Kiểu tính cách"],
                    communicateStyleId: 1,
                    loveLanguageId: 1,
                    futureFamilyId: input.preferences["Gia đình tương lai"],
                    drink: input.preferences["Về việc uống bia rượu"] === 2,
                    smoke:
                        input.preferences["Bạn có hay hút thuốc không?"] === 2,
                    train: input.preferences["Tập luyện"] === 2,
                    petId: input.preferences["Thú cưng"],
                    dietId: input.preferences["Chế độ ăn uống"],
                    sleepId: input.preferences["Thói quen ngủ"],
                    snuId: input.preferences["Truyền thông xã hội"],
                    favorites: input.interests || [],
                    maxRadius: input.searchRadius,
                },
            };
        }
        const result = transformUserData(formData);

        const photos = formData?.photoFiles || [];
        console.log(photos);

        if (photos.length > 0) {
            const formData = new FormData();
            formData.append("bioId", currentUser?.bioId);

            const existingPhotoUrls = [];
            const newPhotos = [];

            // Phân loại ảnh
            for (let i = 0; i < photos.length; i++) {
                const photo = photos[i];
                if (typeof photo === "string") {
                    existingPhotoUrls.push(photo);
                } else if (photo instanceof File) {
                    newPhotos.push(photo);
                    formData.append("images", photo);
                }
            }

            if (newPhotos.length > 0) {
                try {
                    const postPhotos = await axios.post(
                        "http://localhost:3001/api/upload/multiple",
                        formData,
                        {
                            headers: {
                                Authorization: `Bearer ${auth?.access_token}`,
                                "Content-Type": "multipart/form-data",
                            },
                        }
                    );
                    console.log("Upload response:", postPhotos.data);
                } catch (error) {
                    console.error(
                        "Upload error:",
                        error.response?.data || error.message
                    );
                    return;
                }
            } else if (existingPhotoUrls.length > 0) {
                result.user.photos = existingPhotoUrls;
            }
        }

        const res = await axios.put(
            "http://localhost:3001/api/update-profile",
            result,
            {
                headers: {
                    Authorization: `Bearer ${auth?.access_token}`,
                },
            }
        );
        if (res?.data?.statusCode === 200) router.push("/");
    };
    const CurrentStepComponent = steps[currentStep].component;
    return (
        <div className="flex flex-col min-h-screen bg-gradient-to-br from-white via-pink-50 to-rose-50">
            <header className="sticky top-0 z-10 shadow-sm bg-white/80 backdrop-blur-md">
                <div className="container flex items-center justify-between px-4 py-3 mx-auto">
                    <div className="flex items-center">
                        {currentStep > 0 ? (
                            <button
                                onClick={handlePrevious}
                                className="p-2 transition-colors rounded-full hover:bg-gray-100"
                            >
                                <ArrowLeftIcon className="w-6 h-6 text-gray-600" />
                            </button>
                        ) : (
                            <Link href="/" className="flex items-center gap-2">
                                <FlameIcon className="h-6 w-6 text-[#FF5864]" />
                                <span className="font-bold text-transparent bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text">
                                    DateViet
                                </span>
                            </Link>
                        )}
                    </div>
                    <Steps
                        currentStep={currentStep}
                        totalSteps={steps.length}
                    />
                    <div className="w-10" />
                </div>
            </header>
            <main className="flex-grow container mx-auto max-w-[700px] px-4 py-8">
                <div className="max-w-2xl mx-auto">
                    <h1 className="mb-6 text-2xl font-bold text-gray-900">
                        {steps[currentStep].title}
                    </h1>
                    <div className="p-6 bg-white shadow-lg rounded-2xl">
                        <CurrentStepComponent
                            metadata={metadata?.metadata}
                            formData={formData}
                            setFormData={setFormData}
                        />
                    </div>
                </div>
            </main>
            <footer className="sticky bottom-0 border-t border-gray-200 bg-white/80 backdrop-blur-md">
                <div className="container px-4 py-4 mx-auto">
                    <div className="max-w-2xl mx-auto">
                        {currentStep === steps.length - 1 ? (
                            <button
                                onClick={handleComplete}
                                className="w-full bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white py-4 px-6 rounded-xl font-medium
                             hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5"
                            >
                                Hoàn tất
                            </button>
                        ) : (
                            <button
                                onClick={handleNext}
                                className="w-full bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white py-4 px-6 rounded-xl font-medium
                             hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5
                             flex items-center justify-center gap-2"
                            >
                                Tiếp theo
                                <ArrowRightIcon className="w-5 h-5" />
                            </button>
                        )}
                    </div>
                </div>
            </footer>
        </div>
    );
};
export default ProfileSetup;

```

### apps\frontend\src\app\profile-setup\components\Steps.js
```js
import React from "react";

const Steps = ({ currentStep, totalSteps }) => {
    return (
        <div className="flex items-center gap-2">
            {Array.from({
                length: totalSteps,
            }).map((_, index) => (
                <div
                    key={index}
                    className={`h-1.5 rounded-full transition-all duration-300 ${
                        index === currentStep
                            ? "w-6 bg-[#FF5864]"
                            : index < currentStep
                            ? "w-6 bg-[#FF5864]/60"
                            : "w-6 bg-gray-200"
                    }`}
                />
            ))}
        </div>
    );
};
export default Steps;

```

### apps\frontend\src\app\report\page.js
```js
"use client";

import { useSearchParams } from "next/navigation";
import { useState } from "react";

export default function ReportPage() {
  const searchParams = useSearchParams();
  const reported_user = Number(searchParams.get("uid")) || null;

  const [reason, setReason] = useState("spam");
  const [details, setDetails] = useState("");
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!reported_user) {
      setMessage("Thiếu reported_user trên URL (?uid=...)");
      return;
    }

    setLoading(true);
    try {
      const res = await fetch("http://localhost:5000/api/reports", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          reason,
          details,
          reported_by: 1, // ⚠️ Tạm hardcode, bạn có thể lấy từ session/token sau
          reported_user,
        }),
      });

      const data = await res.json();
      if (res.ok) {
        setMessage(" Gửi báo cáo thành công!");
      } else {
        setMessage(` Lỗi: ${data.error}`);
      }
    } catch (err) {
      setMessage(" Lỗi kết nối server");
    } finally {
      setLoading(false);
    }
  };

  return (
    <main className="max-w-xl mx-auto p-6">
      <h1 className="text-xl font-bold mb-4"> Báo cáo người dùng ID {reported_user}</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <fieldset className="space-y-2">
          <legend className="font-semibold">Chọn lý do:</legend>
          {["spam", "abuse", "fake_profile", "inappropriate", "other"].map((r) => (
            <label key={r} className="block">
              <input
                type="radio"
                name="reason"
                value={r}
                checked={reason === r}
                onChange={(e) => setReason(e.target.value)}
              />{" "}
              {r === "other" ? "Khác" : r}
            </label>
          ))}
        </fieldset>

        {reason === "other" && (
          <textarea
            placeholder="Nhập lý do chi tiết..."
            className="w-full border rounded p-2"
            value={details}
            onChange={(e) => setDetails(e.target.value)}
            required
          />
        )}

        {reason !== "other" && (
          <input
            type="hidden"
            value={reason}
            onChange={(e) => setReason(e.target.value)}
          />
        )}

        <button
          type="submit"
          className="bg-red-500 text-white px-4 py-2 rounded disabled:opacity-50"
          disabled={loading}
        >
          {loading ? "Đang gửi..." : "Gửi báo cáo"}
        </button>
      </form>

      {message && <p className="mt-4 font-medium">{message}</p>}
    </main>
  );
}

```

### apps\frontend\src\components\ChatWindow.jsx
```jsx
// src/components/ChatWindow.jsx

"use client";

import { useEffect, useRef, useState } from "react";
import { useRouter } from "next/navigation";
import axios from "axios";
import { getSocket } from "@/lib/socket";

export default function ChatWindow({ matchId, user }) {
    console.log(user);

    const router = useRouter();
    const [match, setMatch] = useState();
    console.log(match);

    const [messages, setMessages] = useState([]);
    const [message, setMessage] = useState("");
    const messagesEndRef = useRef(null);
    const socket = getSocket();

    useEffect(() => {
        socket.on("receive-message", (message) => {
            console.log(message);
            setMessages((prevMessages) => [...prevMessages, message]);
        });
        return () => {
            socket.off("receive-message");
        };
    }, []);

    useEffect(() => {
        socket.emit("me", user);
        return () => {
            socket.off("me");
        };
    }, [user]);

    useEffect(() => {
        const getMatch = async () => {
            const token = localStorage.getItem("token");

            if (!token) {
                router.push("/auth/login");
                return;
            }
            try {
                const res = await axios.get(
                    `http://localhost:3001/api/rooms/${matchId}`,
                    {
                        headers: {
                            "Content-Type": "application/json",
                            Authorization: `Bearer ${token}`,
                        },
                    }
                );
                setMatch(res.data.room);
            } catch (err) {
                if (err.response.status === 403) {
                    router.push("/auth/login");
                    return;
                }
                console.error("Failed to load match", err);
            }
        };
        getMatch();
        // Fetch message history
        const fetchMessages = async () => {
            if (!matchId) return;
            try {
                const token = localStorage.getItem("token");
                if (!token) {
                    router.push("/auth/login");
                    return;
                }
                const res = await axios(
                    `http://localhost:3001/api/messages?match_id=${matchId}`
                );
                setMessages(res.data);
            } catch (err) {
                console.error("Failed to load messages", err);
                // router.push("/auth/login");
            }
        };
        fetchMessages();
    }, [matchId]);

    useEffect(() => {
        const handleReceive = (message) => {
            if (message.match_id === matchId) {
                setMessages((prev) => [...prev, message]);
            }
        };

        socket.on("receiveMessage", handleReceive);
        return () => {
            socket.off("receiveMessage", handleReceive);
        };
    }, [matchId, socket]);

    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, [messages]);

    const handleSend = () => {
        if (!message.trim()) return;
        const data = {
            sender_id: user.id,
            receiver_id:
                match?.user_2_id === user.id
                    ? match?.user_1_id
                    : match?.user_2_id,
            match_id: matchId,
            content: message,
        };
        console.log(data);

        socket.emit("send-message", data);
        setMessage("");
    };

    return (
        <div className="w-full max-w-4xl bg-white rounded-xl shadow-lg overflow-hidden">
            {/* Chat Header */}
            <div className="bg-gradient-to-r from-blue-500 to-blue-600 p-4">
                <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
                            👤
                        </div>
                        <div className="text-white">
                            <p className="font-medium">
                                {match?.user_match_1?.id === user?.id
                                    ? match?.user_match_2?.display_name
                                    : match?.user_match_1?.display_name}
                            </p>
                            {/* <p className="text-xs text-white/70">
                                Room ID: {matchId}
                            </p> */}
                        </div>
                    </div>
                    <div className="flex items-center space-x-2">
                        <span className="inline-block w-2 h-2 bg-green-400 rounded-full"></span>
                        <span className="text-sm text-white/90">Online</span>
                    </div>
                </div>
            </div>

            {/* Messages Container */}
            <div className="flex-1 h-[600px] overflow-y-auto p-4 bg-gray-50">
                {messages.map((msg) => (
                    <div key={msg.id} className="mb-4">
                        {/* Message Bubble */}
                        <div
                            className={`flex flex-col ${
                                msg.sender?.id === user.id
                                    ? "items-end"
                                    : "items-start"
                            }`}
                        >
                            {/* User Name */}
                            {/* <span className="text-xs text-gray-500 mb-1 px-2">
                                {msg.sender?.id !== user.id
                                    ? msg.sender?.display_name
                                    : ""}
                            </span> */}

                            {/* Message Content */}
                            <div
                                className={`p-3 rounded-xl max-w-[70%] break-words ${
                                    msg.sender?.id === user.id
                                        ? "bg-blue-500 text-white rounded-tr-none"
                                        : "bg-gray-200 text-gray-800 rounded-tl-none"
                                }`}
                            >
                                <p className="text-sm whitespace-pre-wrap">
                                    {msg.content}
                                </p>
                            </div>

                            {/* Timestamp */}
                            <span className="text-xs text-gray-400 mt-1 px-2">
                                {new Date(msg.timestamp).toLocaleTimeString()}
                            </span>
                        </div>
                    </div>
                ))}
                <div ref={messagesEndRef} />
            </div>

            {/* Message Input */}
            <div className="p-4 bg-white border-t">
                <div className="flex gap-2">
                    <input
                        type="text"
                        placeholder="Type your message..."
                        value={message}
                        onChange={(e) => setMessage(e.target.value)}
                        onKeyDown={(e) => e.key === "Enter" && handleSend()}
                        className="flex-1 px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                    />
                    <button
                        onClick={handleSend}
                        disabled={!message.trim()}
                        className="px-6 py-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 
                                 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed
                                 flex items-center justify-center"
                    >
                        <span>Send</span>
                    </button>
                </div>
            </div>
        </div>
    );
}

```

### apps\frontend\src\components\Loading.jsx
```jsx
"use client";

import React from "react";

function Loading({ fullScreen = false }) {
    return (
        <div
            className={`flex flex-col items-center justify-center ${
                fullScreen
                    ? "fixed inset-0 z-50 bg-white/80 backdrop-blur-sm"
                    : "min-h-[200px] w-full"
            }`}
        >
            <div className="relative">
                <div className="w-16 h-16 rounded-full border-4 border-t-transparent border-[#FF5864] animate-spin"></div>
            </div>
            <p className="mt-4 text-lg font-semibold bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text text-transparent animate-pulse">
                Đang tải...
            </p>
        </div>
    );
}

export default Loading;

```

### apps\frontend\src\components\cards\ProfileCard.js
```js
"use client";

import React, { useState } from "react";
import { HeartIcon, XIcon, StarIcon } from "lucide-react";

const ProfileCard = ({ profile, onHandleMatch, onHandleNext }) => {
    const [currentPhoto, setCurrentPhoto] = useState(0);
    const [isLiked, setIsLiked] = useState(false);
    const [isNoped, setIsNoped] = useState(false);
    const [isSuperLiked, setIsSuperLiked] = useState(false);
    const [exitDirection, setExitDirection] = useState(null);

    const resetCardState = () => {
        setIsLiked(false);
        setIsNoped(false);
        setExitDirection(null);
    };

    const handleLike = () => {
        setIsLiked(true);
        onHandleMatch(profile.id, resetCardState);
    };
    const handleNope = () => {
        setIsNoped(true);
        setTimeout(() => {
            setIsNoped(false);
            setExitDirection(null);
            onHandleNext();
        }, 500);
    };
    return (
        <div
            className={`relative w-full max-w-sm rounded-3xl overflow-hidden shadow-2xl bg-white/90 backdrop-blur-sm 
                        will-change-[transform]
                    transform-gpu duration-500 ease-out
                    hover:shadow-[0_20px_50px_rgba(255,88,100,0.2)]
                    ${!exitDirection ? "hover:translate-y-[8px]" : ""}`}
        >
            <div className="relative aspect-[3/4] bg-gray-200 group">
                <div
                    className="absolute inset-0 transition-transform duration-200 ease-out will-change-transform"
                    style={{
                        transform: "translate3d(0,0,0)",
                    }}
                >
                    <img
                        src={profile?.photos?.[currentPhoto]?.url}
                        alt={`${profile.name}'s photo`}
                        className="w-full h-full object-cover"
                        loading="eager"
                        style={{
                            transform: "translate3d(0,0,0)",
                        }}
                    />
                </div>
                <div className="absolute top-4 left-0 right-0 flex justify-center gap-2 px-4 z-20">
                    <div className="glass px-3 py-1.5 rounded-full flex gap-2">
                        {profile?.photos?.map((_, index) => (
                            <button
                                key={index}
                                onClick={() => setCurrentPhoto(index)}
                                className={`transform-gpu transition-all duration-200 ease-out
                              ${
                                  index === currentPhoto
                                      ? "w-6 h-2 bg-white rounded-full"
                                      : "w-2 h-2 bg-white/50 rounded-full hover:bg-white/80"
                              }`}
                            />
                        ))}
                    </div>
                </div>
                <div className="absolute top-4 right-4 z-20">
                    <div className="glass px-3 py-1.5 rounded-full flex items-center gap-2">
                        <div className="w-2 h-2 rounded-full bg-gradient-to-r from-[#FF5864] to-[#FF655B] animate-pulse" />
                        <span className="text-sm font-semibold text-gray-800">
                            {/* {profile.matchPercentage}% Match */}
                        </span>
                    </div>
                </div>
                <div className="absolute bottom-0 left-0 right-0 glass-dark p-6 transform-gpu transition-transform duration-200 ease-out">
                    <div className="space-y-4">
                        <div className="flex items-center justify-between">
                            <h2 className="text-3xl font-bold text-white tracking-tight">
                                {profile.name}, {profile.age}
                            </h2>
                        </div>
                        <p className="text-sm text-white/90 flex items-center">
                            {/* <span className="inline-block w-2 h-2 rounded-full bg-green-400 mr-2 animate-pulse" /> */}
                            {/* {profile.distance} km away */}
                        </p>
                        <div className="flex flex-wrap gap-2">
                            {/* {profile.tags.map((tag, index) => (
                                <span
                                    key={index}
                                    className="glass px-3 py-1 rounded-full text-white text-sm
                              transform-gpu transition-all duration-200 ease-out
                              hover:bg-white/30 hover:translate-y-[-2px]
                              cursor-pointer"
                                >
                                    {tag}
                                </span>
                            ))} */}
                        </div>
                    </div>
                </div>
            </div>
            <div className="p-6">
                <p className="text-gray-700 leading-relaxed">{profile.bio}</p>
            </div>
            <div className="flex justify-center gap-6 p-6">
                <button
                    onClick={handleNope}
                    className="w-14 h-14 flex items-center justify-center rounded-full bg-white
                       will-change-transform
                       shadow-lg hover:shadow-xl transition-all duration-200 ease-out
                       hover:border-red-400 hover:-translate-y-1 group
                       relative before:absolute before:inset-0 before:rounded-full before:border-2
                       before:border-gray-300 before:transition-all before:duration-200
                       hover:before:border-red-400 hover:before:scale-110"
                >
                    <XIcon className="h-8 w-8 text-gray-400 group-hover:text-red-400 transition-colors duration-200" />
                </button>
                {/* <button
                    onClick={handleSuperLike}
                    className="w-12 h-12 flex items-center justify-center rounded-full
                       will-change-transform
                       shadow-lg hover:shadow-xl transition-all duration-200 ease-out
                       hover:-translate-y-1 hover:scale-110 relative overflow-hidden
                       bg-gradient-to-r from-blue-400 to-blue-500"
                >
                    <div className="absolute inset-0 bg-gradient-to-r from-blue-500 to-blue-600 transition-opacity duration-200 opacity-0 hover:opacity-100" />
                    <StarIcon className="h-6 w-6 text-white relative z-10" />
                </button> */}
                <button
                    onClick={handleLike}
                    className="w-14 h-14 flex items-center justify-center rounded-full
                       will-change-transform
                       shadow-lg hover:shadow-xl transition-all duration-200 ease-out
                       hover:-translate-y-1 hover:scale-105 relative overflow-hidden
                       bg-gradient-to-r from-[#FF5864] to-[#FF655B]"
                >
                    <div className="absolute inset-0 bg-gradient-to-r from-[#FF655B] to-[#FF5864] transition-opacity duration-200 opacity-0 hover:opacity-100" />
                    <HeartIcon className="h-8 w-8 text-white relative z-10" />
                </button>
            </div>
            {isLiked && (
                <div className="absolute inset-0 z-50 glass-dark flex items-center justify-center">
                    <HeartIcon className="w-32 h-32 text-[#FF5864] animate-bounce" />
                    <div className="absolute top-8 right-8 glass px-6 py-2 rounded-full">
                        <span className="text-xl font-bold bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text text-transparent">
                            Loading...
                        </span>
                    </div>
                </div>
            )}
            {isNoped && (
                <div className="absolute inset-0 z-50 glass-dark flex items-center justify-center">
                    <XIcon className="w-32 h-32 text-red-500 animate-bounce" />
                    <div className="absolute top-8 left-8 glass px-6 py-2 rounded-full">
                        <span className="text-xl font-bold bg-gradient-to-r from-red-500 to-red-600 bg-clip-text text-transparent">
                            Loading...
                        </span>
                    </div>
                </div>
            )}
        </div>
    );
};
export default ProfileCard;

```

### apps\frontend\src\components\layout\AppLayout.js
```js
import Footer from "@/ui/Footer";
import Header from "@/ui/Header";
import React from "react";

const AppLayout = ({ children }) => {
    return (
        <div className="flex flex-col min-h-screen bg-gradient-to-br from-white via-pink-50 to-rose-50 relative overflow-hidden">
            <div className="fixed inset-0 overflow-hidden pointer-events-none">
                <div className="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl animate-float" />
                <div
                    className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-[#FF5864]/30 to-[#FF655B]/30 rounded-full blur-3xl animate-float"
                    style={{
                        animationDelay: "-3s",
                    }}
                />
                <div
                    className="absolute top-1/4 left-10 w-40 h-40 bg-gradient-to-r from-pink-200 to-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-float"
                    style={{
                        animationDelay: "-2s",
                    }}
                />
                <div
                    className="absolute bottom-1/4 right-10 w-40 h-40 bg-gradient-to-r from-rose-200 to-rose-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-float"
                    style={{
                        animationDelay: "-4s",
                    }}
                />
                <div className="absolute inset-0 bg-grid-pattern opacity-[0.02]" />
            </div>
            <Header />
            <main className="flex-grow flex items-center justify-center p-4 relative">
                {children}
            </main>
            <Footer />
        </div>
    );
};
export default AppLayout;

```

### apps\frontend\src\context\ProfileContext.js
```js
"use client";

import axios from "axios";
import { createContext, useState, useContext, useEffect } from "react";

const ProfileContext = createContext(null);

export function ProfileProvider({ children }) {
    const [profileSetupData, setProfileSetupData] = useState();
    console.log(profileSetupData);
    useEffect(() => {
        const fetchProfileSetupData = async () => {
            axios
                .get("http://localhost:3001/api/profile-setup")
                .then((response) => {
                    console.log(response);

                    setProfileSetupData(response.data.data);
                })
                .catch((error) => {
                    console.error("Error fetching profile setup data:", error);
                });

            const res = await axios.get("/api/some-protected-route");
        };
        // fetchProfileSetupData();
    }, []);

    return (
        <ProfileContext.Provider
            value={{ profileSetupData, setProfileSetupData }}
        >
            {children}
        </ProfileContext.Provider>
    );
}

export function useProfile() {
    return useContext(ProfileContext);
}

```

### apps\frontend\src\hooks\useAuth.js
```js
"use client";

import axios from "axios";
import { createContext, useState, useContext, useEffect, useMemo } from "react";
import { setupAxios } from "@/app/auth/_helpers";
import { getData } from "@/utils/LocalStorage";
import * as authHelper from "./_helper";
import { useRouter } from "next/navigation";

setupAxios(axios);
const AuthContext = createContext(null);

const LOGIN_URL = "http://localhost:3001/api/auth/login";
const REGISTER_URL = "/auth/register";
const GET_USER_URL = "http://localhost:3001/api/me";

export function AuthProvider({ children }) {
    const router = useRouter();
    const [auth, setAuth] = useState(authHelper.getAuth());
    const [currentUser, setCurrentUser] = useState();

    const verify = async (auth, shouldRedirect = false) => {
        if (auth) {
            try {
                const { data: user } = await getUser(auth);

                setCurrentUser(user.user);
                if (!user?.user?.isFullInformation) {
                    router.push("/profile-setup");
                    return;
                }
                if (shouldRedirect) {
                    router.push("/");
                }
            } catch {
                saveAuth(undefined);
                setCurrentUser(undefined);
            }
        }
    };
    useEffect(() => {
        const auth = authHelper.getAuth();
        if (auth) {
            console.log("auth", auth);

            verify(auth.access_token, false);
        }
    }, [auth]);
    const saveAuth = (auth) => {
        if (auth) {
            authHelper.setAuth(auth);
            setAuth(auth);
        } else {
            authHelper.removeAuth();
        }
    };
    const login = async (email, password) => {
        try {
            const { data: auth } = await axios.post(LOGIN_URL, {
                email,
                password,
            });
            const authData = {
                access_token: auth.token,
                token_type: "Token",
            };
            saveAuth(authData);
            verify(auth.token, true);
            return true;
        } catch (error) {
            saveAuth(undefined);
            throw new Error(`Error ${error}`);
        }
    };
    const register = async (email, password, password_confirmation) => {
        try {
            const { data: auth } = await axios.post(REGISTER_URL, {
                email,
                password,
                password_confirmation,
            });
            saveAuth(auth);
            const { data: user } = await getUser();
            setCurrentUser(user);
        } catch (error) {
            saveAuth(undefined);
            throw new Error(`Error ${error}`);
        }
    };
    const getUser = (accessToken) => {
        console.log("GET_USER_URL", GET_USER_URL);

        return axios.get(GET_USER_URL, {
            headers: {
                Authorization: `Bearer ${accessToken}`,
            },
        });
    };
    const logout = () => {
        console.log("removeAuth");

        saveAuth(undefined);
        setCurrentUser(undefined);
        router.push("/auth/login");
    };

    return (
        <AuthContext.Provider
            value={{
                auth,
                setAuth,
                currentUser,
                setCurrentUser,
                verify,
                saveAuth,
                login,
                register,
                getUser,
                logout,
            }}
        >
            {children}
        </AuthContext.Provider>
    );
}

export function useAuth() {
    const context = useContext(AuthContext);
    if (!context) {
        throw new Error("useAuth must be used within a AuthProvider");
    }
    return context;
}

```

### apps\frontend\src\hooks\useMetadata.js
```js
"use client";

import axios from "axios";
import { createContext, useState, useContext, useEffect, useMemo } from "react";
import { setupAxios } from "@/app/auth/_helpers";
import { getData } from "@/utils/LocalStorage";

setupAxios(axios);
const MetadataContext = createContext(null);

export function MetadataProvider({ children }) {
    const [metadata, setMetadata] = useState(null);
    console.log(metadata);

    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchMetadata = async () => {
            setIsLoading(true);
            setError(null);
            try {
                const fetchData = async () => {
                    const token = getData("token");

                    const res = await axios.get(
                        "http://localhost:3001/api/metadata"
                    );
                    setMetadata(res.data.metadata);
                };
                fetchData();
            } catch (err) {
                console.error("Failed to fetch metadata in Provider:", err);
                setError(err);
            } finally {
                setIsLoading(false);
            }
        };

        fetchMetadata();
    }, []);

    const value = useMemo(
        () => ({
            metadata,
            isLoading,
            error,
        }),
        [metadata, isLoading, error]
    );

    return (
        <MetadataContext.Provider value={value}>
            {children}
        </MetadataContext.Provider>
    );
}

export function useMetadata() {
    const context = useContext(MetadataContext);
    if (!context) {
        throw new Error("useMetadata must be used within a MetadataProvider");
    }
    return context;
}

```

### apps\frontend\src\hooks\useSocket.js
```js
"use client";

import React, { createContext, useContext, useEffect, useState } from "react";
import { io } from "socket.io-client";
import { useAuth } from "@/hooks/useAuth";

const SocketContext = createContext();

export const SocketProvider = ({ children }) => {
    const [socket, setSocket] = useState(null);
    const { currentUser } = useAuth();

    useEffect(() => {
        if (!currentUser) return;
        const newSocket = io("http://localhost:3001", {
            autoConnect: false,
            reconnection: true,
        });

        newSocket.connect();

        newSocket.emit("me", currentUser);

        setSocket(newSocket);

        return () => newSocket.close();
    }, [currentUser]);

    return (
        <SocketContext.Provider value={socket}>
            {children}
        </SocketContext.Provider>
    );
};

export const useSocket = () => {
    const context = useContext(SocketContext);
    // if (!context) {
    //     throw new Error("useSocket must be used within a SocketProvider");
    // }
    return context;
};

```

### apps\frontend\src\hooks\_helper.js
```js
import { getData, setData } from "@/utils/LocalStorage";

export const getAuth = () => {
    try {
        const auth = getData("AUTH_LOCAL_STORAGE_KEY");
        if (auth) {
            return auth;
        } else {
            return undefined;
        }
    } catch (error) {
        console.error("AUTH LOCAL STORAGE PARSE ERROR", error);
    }
};
export const setAuth = (auth) => {
    setData("AUTH_LOCAL_STORAGE_KEY", auth);
};
export const removeAuth = () => {
    if (!localStorage) {
        return;
    }
    try {
        localStorage.removeItem("AUTH_LOCAL_STORAGE_KEY");
    } catch (error) {
        console.error("AUTH LOCAL STORAGE REMOVE ERROR", error);
    }
};

```

### apps\frontend\src\redux\store.js
```js
import { configureStore } from "@reduxjs/toolkit";
import authReducer from "./features/authSlice";

export const store = configureStore({
    reducer: {
        auth: authReducer,
    },
});

```

### apps\frontend\src\redux\feature\authSlice.js
```js
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

const initialState = {
    user: null,
    token: null,
    loading: false,
    error: null,
};

export const loginUser = createAsyncThunk(
    "auth/login",
    async (credentials, { rejectWithValue }) => {
        try {
            const response = await fetch(
                "http://localhost:3001/api/auth/login",
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(credentials),
                }
            );

            const data = await response.json();
            if (!response.ok) throw new Error(data.message);

            return data;
        } catch (error) {
            return rejectWithValue(error.message);
        }
    }
);

export const registerUser = createAsyncThunk(
    "auth/register",
    async (userData, { rejectWithValue }) => {
        try {
            const response = await fetch(
                "http://localhost:3001/api/auth/register",
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(userData),
                }
            );

            const data = await response.json();
            if (!response.ok) throw new Error(data.message);

            return data;
        } catch (error) {
            return rejectWithValue(error.message);
        }
    }
);

const authSlice = createSlice({
    name: "auth",
    initialState,
    reducers: {
        logout: (state) => {
            state.user = null;
            state.token = null;
            localStorage.removeItem("token");
        },
        setCredentials: (state, action) => {
            const { user, token } = action.payload;
            state.user = user;
            state.token = token;
        },
    },
    extraReducers: (builder) => {
        builder
            .addCase(loginUser.pending, (state) => {
                state.loading = true;
                state.error = null;
            })
            .addCase(loginUser.fulfilled, (state, action) => {
                state.loading = false;
                state.user = action.payload.user;
                state.token = action.payload.token;
                localStorage.setItem("token", action.payload.token);
            })
            .addCase(loginUser.rejected, (state, action) => {
                state.loading = false;
                state.error = action.payload;
            })
            .addCase(registerUser.pending, (state) => {
                state.loading = true;
                state.error = null;
            })
            .addCase(registerUser.fulfilled, (state, action) => {
                state.loading = false;
                state.user = action.payload.user;
                state.token = action.payload.token;
                localStorage.setItem("token", action.payload.token);
            })
            .addCase(registerUser.rejected, (state, action) => {
                state.loading = false;
                state.error = action.payload;
            });
    },
});

export const { logout, setCredentials } = authSlice.actions;
export default authSlice.reducer;

```

### apps\frontend\src\ui\FilterModal.js
```js
import React, { useState } from "react";
import { XIcon, SlidersIcon, CheckIcon } from "lucide-react";

const FilterModal = ({
    metadata,
    filtersData,
    isOpen,
    onHandleFilter,
    onClose,
}) => {
    const [filters, setFilters] = useState(filtersData || {});

    console.log(filters);

    const singleSelectSections = [
        {
            id: "searchingfor",
            label: "Đang tìm kiếm",
            options: metadata?.searchingFor?.map((item) => ({
                value: item.id,
                label: item.value,
            })),
        },
        {
            id: "zodiac",
            label: "Cung hoàng đạo",
            options: metadata?.zodiacs?.map((item) => ({
                value: item.id,
                label: item.value,
            })),
        },
        {
            id: "education",
            label: "Trình độ học vấn",
            options: metadata?.educations?.map((item) => ({
                value: item.id,
                label: item.value,
            })),
        },
        {
            id: "diet",
            label: "Chế độ ăn",
            options: metadata?.diets?.map((item) => ({
                value: item.id,
                label: item.value,
            })),
        },
        {
            id: "sleep",
            label: "Thói quen ngủ",
            options: metadata?.sleeps?.map((item) => ({
                value: item.id,
                label: item.value,
            })),
        },
        {
            id: "sns",
            label: "Thói quen MXH",
            options: metadata?.snus?.map((item) => ({
                value: item.id,
                label: item.value,
            })),
        },
        {
            id: "futurefamily",
            label: "Gia đình tương lai",
            options: metadata?.futureFamilies?.map((item) => ({
                value: item.id,
                label: item.value,
            })),
        },
        {
            id: "sexOrientation",
            label: "Xu hướng tính dục",
            options: metadata?.sexualOrientations?.map((item) => ({
                value: item.id,
                label: item.value,
            })),
        },
    ];
    const multiSelectSections = [
        {
            id: "favorite",
            label: "Sở thích",
            multiSelect: true,
            options: metadata?.favorites?.map((item) => ({
                value: item.id,
                label: item.value,
            })),
        },
        {
            id: "character",
            label: "Tính cách",
            multiSelect: true,
            options: metadata?.characters?.map((item) => ({
                value: item.id,
                label: item.value,
            })),
        },
        {
            id: "communicate",
            label: "Phong cách giao tiếp",
            multiSelect: true,
            options: metadata?.communicateStyles?.map((item) => ({
                value: item.id,
                label: item.value,
            })),
        },
        {
            id: "lovelanguage",
            label: "Ngôn ngữ tình yêu",
            multiSelect: true,
            options: metadata?.loveLanguages?.map((item) => ({
                value: item.id,
                label: item.value,
            })),
        },
        {
            id: "pet",
            label: "Thú cưng",
            multiSelect: true,
            options: metadata?.pets?.map((item) => ({
                value: item.id,
                label: item.value,
            })),
        },
        {
            id: "language",
            label: "Ngôn ngữ",
            multiSelect: true,
            options: metadata?.languages?.map((item) => ({
                value: item.id,
                label: item.value,
            })),
        },
    ];
    if (!isOpen) return null;
    const handleFilterChange = (filterId, value) => {
        setFilters((prev) => ({
            ...prev,
            [filterId]: value,
        }));
    };
    const handleOptionClick = (sectionId, value, multiSelect) => {
        if (multiSelect) {
            const currentValues = filters[sectionId] || [];
            const newValues = currentValues.includes(value)
                ? currentValues.filter((v) => v !== value)
                : [...currentValues, value];
            handleFilterChange(sectionId, newValues);
        } else {
            handleFilterChange(sectionId, value);
        }
    };
    const isSelected = (sectionId, value) => {
        const filterValue = filters[sectionId];
        if (Array.isArray(filterValue)) {
            return filterValue.includes(value);
        }
        return filterValue === value;
    };
    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
            <div
                className="absolute inset-0 bg-black/60 backdrop-blur-sm"
                onClick={onClose}
            />
            <div className="relative bg-white rounded-2xl w-full max-w-md max-h-[80vh] overflow-auto animate-scale-up">
                <div className="sticky top-0 bg-white px-6 py-4 border-b border-gray-200 flex items-center justify-between">
                    <div className="flex items-center gap-2">
                        <SlidersIcon className="h-5 w-5 text-gray-600" />
                        <h2 className="text-lg font-semibold text-gray-900">
                            Bộ lọc
                        </h2>
                    </div>
                    <button
                        onClick={onClose}
                        className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                    >
                        <XIcon className="h-5 w-5 text-gray-600" />
                    </button>
                </div>
                <div className="overflow-y-auto px-6 py-4">
                    <div className="space-y-6">
                        <div className="pb-4 border-b border-gray-200">
                            <h3 className="text-sm font-medium text-gray-500 mb-4">
                                Chọn một tùy chọn
                            </h3>
                            {singleSelectSections.map((section) => (
                                <div key={section.id} className="mb-6">
                                    <h4 className="text-sm font-medium text-gray-700 mb-3">
                                        {section.label}
                                    </h4>
                                    <div className="flex flex-wrap gap-2">
                                        {section.options?.map((option) => (
                                            <button
                                                key={option.value}
                                                onClick={() =>
                                                    handleOptionClick(
                                                        section.id,
                                                        option.value,
                                                        false
                                                    )
                                                }
                                                className={`px-4 py-2 rounded-full text-sm transition-all duration-300
                                ${
                                    isSelected(section.id, option.value)
                                        ? "bg-[#FF5864] text-white"
                                        : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                                }`}
                                            >
                                                <span className="flex items-center gap-2">
                                                    {option.label}
                                                    {/* {isSelected(
                                                        section.id,
                                                        option.value
                                                    ) && (
                                                        <CheckIcon className="h-4 w-4" />
                                                    )} */}
                                                </span>
                                            </button>
                                        ))}
                                    </div>
                                </div>
                            ))}
                        </div>
                        <div className="space-y-6">
                            <h3 className="text-sm font-medium text-gray-500 mb-4">
                                Chọn nhiều tùy chọn
                            </h3>
                            {multiSelectSections.map((section) => (
                                <div key={section.id}>
                                    <h4 className="text-sm font-medium text-gray-700 mb-3">
                                        {section.label}
                                    </h4>
                                    <div className="flex flex-wrap gap-2">
                                        {section.options.map((option) => (
                                            <button
                                                key={option.value}
                                                onClick={() =>
                                                    handleOptionClick(
                                                        section.id,
                                                        option.value,
                                                        true
                                                    )
                                                }
                                                className={`px-4 py-2 rounded-full text-sm transition-all duration-300
                                ${
                                    isSelected(section.id, option.value)
                                        ? "bg-[#FF5864] text-white"
                                        : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                                }`}
                                            >
                                                <span className="flex items-center gap-2">
                                                    {option.label}
                                                    {/* {isSelected(
                                                        section.id,
                                                        option.value
                                                    ) && (
                                                        <CheckIcon className="h-4 w-4" />
                                                    )} */}
                                                </span>
                                            </button>
                                        ))}
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
                <div className="sticky bottom-0 bg-white px-6 py-4 border-t border-gray-200">
                    <button
                        onClick={() => onHandleFilter(filters)}
                        className="w-full bg-gradient-to-r from-[#FF5864] to-[#FF655B] text-white py-3 px-6 rounded-xl
                     font-medium hover:shadow-lg transition-all duration-300 hover:-translate-y-0.5"
                    >
                        Áp dụng ({Object.keys(filters).length})
                    </button>
                </div>
            </div>
        </div>
    );
};
export default FilterModal;

```

### apps\frontend\src\ui\Footer.js
```js
"use client";
import React from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { HomeIcon, UserIcon, HeartIcon, BellIcon } from "lucide-react";
const Footer = () => {
    const pathname = usePathname();
    const isActive = (path) => pathname === path;
    const navItems = [
        {
            icon: HomeIcon,
            path: "/",
            label: "Home",
        },
        {
            icon: HeartIcon,
            path: "/matches",
            label: "Matches",
        },
        {
            icon: UserIcon,
            path: "/profile",
            label: "Profile",
        },
        {
            icon: BellIcon,
            path: "/notifications",
            label: "Thông báo",
        },
    ];
    return (
        <footer className="sticky bottom-0 z-10 bg-white/80 backdrop-blur-md border-t border-gray-200">
            <div className="container mx-auto px-4">
                <nav className="flex justify-around">
                    {navItems.map((item) => {
                        const Icon = item.icon;
                        const active = isActive(item.path);
                        return (
                            <Link
                                key={item.path}
                                href={item.path}
                                className={`flex flex-col items-center py-3 px-4 transition-all duration-300
                          hover:bg-gray-50/50 rounded-lg -mt-px ${
                              active
                                  ? "text-transparent bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text translate-y-[-2px]"
                                  : "text-gray-500"
                          }`}
                            >
                                <Icon
                                    className={`h-6 w-6 transition-transform duration-300 ${
                                        active
                                            ? "stroke-[#FF5864] scale-110"
                                            : "stroke-current hover:scale-105"
                                    }`}
                                />
                                <span
                                    className={`text-xs mt-1 font-medium ${
                                        active ? "opacity-100" : "opacity-80"
                                    }`}
                                >
                                    {item.label}
                                </span>
                            </Link>
                        );
                    })}
                </nav>
            </div>
        </footer>
    );
};
export default Footer;

```

### apps\frontend\src\ui\Header.js
```js
"use client";
import React, { useEffect, useRef, useState } from "react";
import Link from "next/link";
import { FlameIcon, SettingsIcon, BellIcon } from "lucide-react";

import NotificationDropdown from "./NotificationDropdown";
const Header = () => {
    const [showNotifications, setShowNotifications] = useState(false);
    const notificationRef = useRef(null);
    const unreadCount = 3;
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (
                notificationRef.current &&
                !notificationRef.current.contains(event.target)
            ) {
                setShowNotifications(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () =>
            document.removeEventListener("mousedown", handleClickOutside);
    }, []);

    return (
        <header className="sticky top-0 z-10 shadow-sm bg-white/80 backdrop-blur-md">
            <div className="container flex items-center justify-between px-4 py-3 mx-auto">
                <Link
                    href="/"
                    className="flex items-center transition-transform duration-300 group hover:scale-105"
                >
                    <FlameIcon className="h-6 w-6 text-[#FF5864]" />
                    <span className="ml-2 text-2xl font-bold text-transparent bg-gradient-to-r from-[#FF5864] to-[#FF655B] bg-clip-text">
                        DateViet
                    </span>
                </Link>
                <div className="flex items-center gap-2">
                    <div className="relative" ref={notificationRef}>
                        <button
                            onClick={() =>
                                setShowNotifications(!showNotifications)
                            }
                            className="p-2.5 rounded-full hover:bg-gray-100/80 transition-all duration-300
                     hover:shadow-md active:scale-95 relative"
                        >
                            <BellIcon className="w-6 h-6 text-gray-600" />
                            {/* {unreadCount > 0 && (
                                <span
                                    className="absolute -top-1 -right-1 w-5 h-5 bg-[#FF5864] text-white text-xs
                             rounded-full flex items-center justify-center animate-pulse"
                                >
                                    {unreadCount}
                                </span>
                            )} */}
                        </button>
                        {showNotifications && (
                            <NotificationDropdown
                                onClose={() => setShowNotifications(false)}
                            />
                        )}
                    </div>
                    <Link
                        href="/settings"
                        className="p-2.5 rounded-full hover:bg-gray-100/80 transition-all duration-300
                   hover:shadow-md active:scale-95"
                    >
                        <SettingsIcon className="w-6 h-6 text-gray-600" />
                    </Link>
                </div>
            </div>
        </header>
    );
};
export default Header;

```

### apps\frontend\src\ui\MatchModal.js
```js
import React from "react";
import { HeartIcon, MessageCircleIcon, XIcon } from "lucide-react";
import Link from "next/link";

const MatchModal = ({ profile, onClose }) => {
    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
            <div
                className="absolute inset-0 bg-black/60 backdrop-blur-md"
                onClick={onClose}
            />
            <div className="relative max-w-lg w-full animate-scale-up">
                <div className="relative bg-gradient-to-br from-[#FF5864] to-[#FF655B] rounded-3xl overflow-hidden">
                    <div className="absolute inset-0">
                        <div className="absolute top-0 left-0 w-full h-full bg-grid-pattern opacity-10" />
                        <div className="absolute -top-20 -right-20 w-40 h-40 bg-white/20 rounded-full blur-3xl animate-float" />
                        <div
                            className="absolute -bottom-20 -left-20 w-40 h-40 bg-white/20 rounded-full blur-3xl animate-float"
                            style={{
                                animationDelay: "-2s",
                            }}
                        />
                    </div>
                    <div className="relative p-8 text-center">
                        <button
                            onClick={onClose}
                            className="absolute top-4 right-4 p-2 rounded-full bg-white/10 hover:bg-white/20 
                       transition-colors duration-300"
                        >
                            <XIcon className="h-6 w-6 text-white" />
                        </button>
                        <div className="mb-8">
                            <div className="flex justify-center mb-6">
                                <div className="relative">
                                    <HeartIcon className="h-24 w-24 text-white animate-bounce" />
                                    <div className="absolute inset-0 bg-white/20 rounded-full blur-xl animate-pulse" />
                                </div>
                            </div>
                            <h2 className="text-4xl font-bold text-white mb-2">
                                It's a Match!
                            </h2>
                            <p className="text-white/90 text-lg">
                                Bạn và {profile.name} đã thích nhau
                            </p>
                        </div>
                        <div className="flex justify-center items-center gap-8 mb-10">
                            <div className="relative group">
                                <div className="absolute -inset-1 bg-gradient-to-r from-pink-600 to-purple-600 rounded-full blur opacity-75 group-hover:opacity-100 transition duration-1000 group-hover:duration-200 animate-rotate" />
                                <div className="relative w-28 h-28 rounded-full overflow-hidden border-4 border-white">
                                    <img
                                        src="https://images.unsplash.com/photo-1534528741775-53994a69daeb?ixlib=rb-4.0.3"
                                        alt="Your profile"
                                        className="w-full h-full object-cover"
                                    />
                                </div>
                            </div>
                            <div className="relative z-10">
                                <HeartIcon className="h-10 w-10 text-white animate-pulse" />
                            </div>
                            <div className="relative group">
                                <div className="absolute -inset-1 bg-gradient-to-r from-pink-600 to-purple-600 rounded-full blur opacity-75 group-hover:opacity-100 transition duration-1000 group-hover:duration-200 animate-rotate" />
                                <div className="relative w-28 h-28 rounded-full overflow-hidden border-4 border-white">
                                    <img
                                        src={profile?.photos?.[0]}
                                        alt={profile?.name}
                                        className="w-full h-full object-cover"
                                    />
                                </div>
                            </div>
                        </div>
                        <div className="space-y-4">
                            <Link
                                href="/chat"
                                className="block w-full bg-white/10 backdrop-blur-md text-white py-4 px-6 rounded-xl font-medium
                         hover:bg-white/20 transition-all duration-300 transform hover:-translate-y-1"
                            >
                                <span className="flex items-center justify-center gap-2">
                                    <MessageCircleIcon className="h-5 w-5" />
                                    Gửi lời chào
                                </span>
                            </Link>
                            <button
                                onClick={onClose}
                                className="block w-full bg-white text-[#FF5864] py-4 px-6 rounded-xl font-medium
                         hover:bg-gray-50 transition-all duration-300 transform hover:-translate-y-1"
                            >
                                Tiếp tục tìm kiếm
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};
export default MatchModal;

```

### apps\frontend\src\ui\NotificationDropdown.js
```js
"use client";
import React, { useEffect, useState } from "react";
import { HeartIcon, MessageCircleIcon, StarIcon } from "lucide-react";
import Link from "next/link";
import { useAuth } from "@/hooks/useAuth";
import { getRelativeTime } from "@/utils/Time";

const getNotificationContent = (notification) => {
    switch (notification.type) {
        case "NEW_MATCH":
            return {
                icon: <HeartIcon className="h-5 w-5 text-[#FF5864]" />,
                text: `Bạn và ${notification.user.name} đã ghép đôi!`,
                link: "/matches",
            };
        case "LIKED":
            return {
                icon: <HeartIcon className="h-5 w-5 text-[#FF5864]" />,
                text: `${notification.user.name} đã thích bạn`,
                link: "/matches",
                type: "like",
            };
        default:
            return null;
    }
};
const NotificationDropdown = ({ onClose }) => {
    const auth = useAuth();

    const [notifications, setNotifications] = useState([]);

    const fetchNotifications = async () => {
        try {
            const res = await fetch("http://localhost:3001/api/notifications", {
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${auth?.auth?.access_token}`,
                },
            });
            const data = await res.json();
            console.log(data);

            setNotifications(data?.data || []);
        } catch (error) {}
    };
    useEffect(() => {
        fetchNotifications();
    }, []);
    return (
        <div className="absolute right-0 mt-2 overflow-hidden bg-white shadow-lg w-80 rounded-2xl animate-scale-up">
            <div className="p-4 border-b border-gray-100">
                <div className="flex items-center justify-between">
                    <h3 className="font-semibold text-gray-900">Thông báo</h3>
                    <Link
                        href="/notifications"
                        className="text-sm text-[#FF5864] hover:text-[#FF655B] font-medium"
                    >
                        Xem tất cả
                    </Link>
                </div>
            </div>
            <div className="divide-y divide-gray-100 max-h-[400px] overflow-y-auto">
                {notifications?.map((notification) => {
                    const content = getNotificationContent(notification);
                    return (
                        <Link
                            key={notification?.id}
                            href={content?.link}
                            onClick={onClose}
                            className={`flex items-center gap-4 p-4 hover:bg-gray-50 transition-colors
                       ${!notification?.read ? "bg-pink-50/50" : ""}`}
                        >
                            <div className="relative">
                                <img
                                    src={notification?.user?.photo}
                                    alt={notification?.user?.name}
                                    className="object-cover w-10 h-10 rounded-full"
                                />
                                <div className="absolute p-1 bg-white rounded-full -bottom-1 -right-1">
                                    {content?.icon}
                                </div>
                            </div>
                            <div className="flex-1 min-w-0">
                                <p className="text-sm text-gray-900">
                                    {content?.text}
                                </p>
                                <p className="text-xs text-gray-500 mt-0.5">
                                    {getRelativeTime(notification?.time)}
                                </p>
                            </div>
                            {!notification?.read && (
                                <div className="w-2 h-2 bg-[#FF5864] rounded-full" />
                            )}
                        </Link>
                    );
                })}
            </div>
            {notifications?.length === 0 && (
                <div className="py-8 text-center text-gray-500">
                    <p>Không có thông báo mới</p>
                </div>
            )}
        </div>
    );
};
export default NotificationDropdown;

```

### apps\frontend\src\utils\LocalStorage.js
```js
const getData = (key) => {
    try {
        const data = localStorage.getItem(key);
        if (data) {
            return JSON.parse(data);
        }
    } catch (error) {
        console.error("Read from local storage:", error);
    }
};

const setData = (key, value) => {
    try {
        localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
        console.error("Save to local storage:", error);
    }
};

export { getData, setData };

```

### apps\frontend\src\utils\Time.js
```js
export function getRelativeTime(dateString) {
    const now = new Date();
    const past = new Date(dateString);
    const diffInSeconds = Math.floor((now - past) / 1000);

    if (diffInSeconds < 60) return "just now";
    if (diffInSeconds < 3600)
        return `${Math.floor(diffInSeconds / 60)} minutes ago`;
    if (diffInSeconds < 86400)
        return `${Math.floor(diffInSeconds / 3600)} hours ago`;
    if (diffInSeconds < 2592000)
        return `${Math.floor(diffInSeconds / 86400)} days ago`;
    if (diffInSeconds < 31536000)
        return `${Math.floor(diffInSeconds / 2592000)} months ago`;
    return `${Math.floor(diffInSeconds / 31536000)} years ago`;
}

```
