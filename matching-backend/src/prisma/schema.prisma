generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model matches {
  id           Int        @id @default(autoincrement())
  user_1_id    Int
  user_2_id    Int
  matched_at   DateTime?  @default(now()) @db.Timestamp(0)
  user_match_1 users      @relation("user_match_1", fields: [user_1_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "matches_ibfk_1")
  user_match_2 users      @relation("user_match_2", fields: [user_2_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "matches_ibfk_2")
  messages     messages[]
  is_accept    Boolean    @default(false)

  @@index([user_1_id], map: "user_1_id")
  @@index([user_2_id], map: "user_2_id")
}

model user_favorite {
  id          Int      @id @default(autoincrement())
  user_id     Int
  favorite_id Int
  user        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  favorite    Favorite @relation(fields: [favorite_id], references: [id], onDelete: Cascade)
}

model users {
  id                    Int                    @id @default(autoincrement())
  display_name          String                 @db.VarChar(255)
  username              String                 @db.VarChar(255)
  password              String                 @db.VarChar(255)
  is_verified           Boolean                @default(false)
  verify_token          String?
  email                 String                 @unique(map: "email") @db.VarChar(255)
  phone_number          String?                @db.VarChar(20)
  birthday              DateTime?              @db.Date
  gender                user_gender
  preferred_gender      users_preferred_gender
  status                users_status?          @default(offline)
  time_register         DateTime?              @default(now()) @db.Timestamp(0)
  is_full_information   Boolean                @default(false)
  Bio                   Bio?
  user_match_1          matches[]              @relation("user_match_1")
  user_match_2          matches[]              @relation("user_match_2")
  sentMessages          messages[]             @relation("SentMessages")
  receiveMessages       messages[]             @relation("ReceiveMessages")
  reportUser            reports[]              @relation("reportUser")
  reportedByUser        reports[]              @relation("reportedByUser")
  user_favorites        user_favorite[]
  receivedNotifications notifications[]        @relation("ReceiverNotifications")
  sentNotifications     notifications[]        @relation("SenderNotifications")
  userRecommendations   recommendation[]       @relation("UserRecommendations")
  recommendedUsers      recommendation[]       @relation("RecommendedUsers")
}

model Base_inf {
  id                    Int                 @id @default(autoincrement())
  bio_id                Int?                @unique(map: "bio_id")
  zodiac_id             Int?
  character_id          Int?
  communicate_style_id  Int?
  love_language_id      Int?
  future_family_id      Int?
  sexual_orientation_id Int?
  Bio                   Bio?                @relation(fields: [bio_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Base_inf_ibfk_1")
  Zodiac                Zodiac?             @relation(fields: [zodiac_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Base_inf_ibfk_2")
  Character             Character?          @relation(fields: [character_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Base_inf_ibfk_3")
  Communicate_style     Communicate_style?  @relation(fields: [communicate_style_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Base_inf_ibfk_4")
  Love_language         Love_language?      @relation(fields: [love_language_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Base_inf_ibfk_5")
  FutureFamily          FutureFamily?       @relation(fields: [future_family_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Base_inf_ibfk_6")
  Sexual_orientation    sexual_orientation? @relation(fields: [sexual_orientation_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@index([character_id], map: "character_id")
  @@index([communicate_style_id], map: "communicate_style_id")
  @@index([future_family_id], map: "future_family_id")
  @@index([love_language_id], map: "love_language_id")
  @@index([zodiac_id], map: "zodiac_id")
  @@index([sexual_orientation_id])
}

model Bio {
  id               Int           @id @default(autoincrement())
  user_id          Int?          @unique(map: "user_id")
  status           Bio_status?   @default(active)
  name             String?       @db.VarChar(255)
  age              Int?
  address          String?
  min_radius       Int?
  max_radius       Int?
  searching_for_id Int?
  about_me         String?       @db.Text
  Base_inf         Base_inf?
  users            users?        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Bio_ibfk_1")
  Searchingfor     Searchingfor? @relation(fields: [searching_for_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Bio_ibfk_2")
  Lifestyle        Lifestyle?
  Photo            Photo[]
  main_inf         main_inf?

  @@index([searching_for_id], map: "searching_for_id")
}

model Career {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String?    @db.Text
  main_inf    main_inf[]
}

model Character {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String?    @db.Text
  Base_inf    Base_inf[]
}

model Communicate_style {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String?    @db.Text
  Base_inf    Base_inf[]
}

model Diet {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  description String?     @db.Text
  Lifestyle   Lifestyle[]
}

model Education {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String?    @db.Text
  main_inf    main_inf[]
}

model Favorite {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  description    String?         @db.Text
  user_favorites user_favorite[]
}

model FutureFamily {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String?    @db.Text
  Base_inf    Base_inf[]
}

model Language {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  main_inf main_inf[]
}

model Lifestyle {
  id       Int      @id @default(autoincrement())
  bio_id   Int?     @unique(map: "bio_id")
  drink    Boolean? @default(false)
  smoke    Boolean? @default(false)
  train    Boolean? @default(false)
  pet_id   Int?
  diet_id  Int?
  sleep_id Int?
  snu_id   Int?
  Bio      Bio?     @relation(fields: [bio_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Lifestyle_ibfk_1")
  Pet      Pet?     @relation(fields: [pet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Lifestyle_ibfk_2")
  Diet     Diet?    @relation(fields: [diet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Lifestyle_ibfk_3")
  Sleep    Sleep?   @relation(fields: [sleep_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Lifestyle_ibfk_4")
  SNU      SNU?     @relation(fields: [snu_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Lifestyle_ibfk_5")

  @@index([diet_id], map: "diet_id")
  @@index([pet_id], map: "pet_id")
  @@index([sleep_id], map: "sleep_id")
  @@index([snu_id], map: "snu_id")
}

model Love_language {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String?    @db.Text
  Base_inf    Base_inf[]
}

model Pet {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  description String?     @db.Text
  Lifestyle   Lifestyle[]
}

model Photo {
  id             Int       @id @default(autoincrement())
  bio_id         Int?
  url            String    @db.Text
  is_profile_pic Boolean?  @default(false)
  uploaded_at    DateTime? @default(now()) @db.DateTime(0)
  Bio            Bio?      @relation(fields: [bio_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Photo_ibfk_1")

  @@index([bio_id], map: "bio_id")
}

model Religion {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String?    @db.Text
  main_inf    main_inf[]
}

model SNU {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  description String?     @db.Text
  Lifestyle   Lifestyle[]
}

model Searchingfor {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text
  Bio         Bio[]
}

model Sleep {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  description String?     @db.Text
  Lifestyle   Lifestyle[]
}

model Zodiac {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String?    @db.Text
  Base_inf    Base_inf[]
}

model main_inf {
  id           Int        @id @default(autoincrement())
  bio_id       Int?       @unique(map: "bio_id")
  height       String?    @db.VarChar(10)
  location     String?    @db.VarChar(255)
  language_id  Int?
  religion_id  Int?
  career_id    Int?
  education_id Int?
  Bio          Bio?       @relation(fields: [bio_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "main_inf_ibfk_1")
  Language     Language?  @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "main_inf_ibfk_2")
  Religion     Religion?  @relation(fields: [religion_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "main_inf_ibfk_3")
  Career       Career?    @relation(fields: [career_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "main_inf_ibfk_4")
  Education    Education? @relation(fields: [education_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "main_inf_ibfk_5")

  @@index([career_id], map: "career_id")
  @@index([education_id], map: "education_id")
  @@index([language_id], map: "language_id")
  @@index([religion_id], map: "religion_id")
}

model messages {
  id          Int       @id @default(autoincrement())
  match_id    Int
  sender_id   Int
  receiver_id Int
  content     String    @db.Text
  sent_at     DateTime? @default(now()) @db.Timestamp(0)
  matches     matches   @relation(fields: [match_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "messages_ibfk_1")
  sender      users     @relation("SentMessages", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "messages_ibfk_2")
  receiver    users     @relation("ReceiveMessages", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "messages_ibfk_3")

  @@index([match_id])
  @@index([receiver_id])
  @@index([sender_id])
  @@index([sent_at]) // Thêm index cho orderBy
}

model reports {
  id             Int       @id @default(autoincrement())
  reason         String?   @db.Text
  reported_by    Int?
  reported_user  Int?
  time_report    DateTime? @default(now()) @db.DateTime(0)
  reportedByUser users?    @relation("reportedByUser", fields: [reported_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reports_ibfk_1")
  reportUser     users?    @relation("reportUser", fields: [reported_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reports_ibfk_2")

  @@index([reported_by], map: "reported_by")
  @@index([reported_user], map: "reported_user")
}

model sexual_orientation {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String?    @db.Text
  Base_inf    Base_inf[]
}

model recommendation {
  id                Int      @id @default(autoincrement())
  userId            Int
  recommendedUserId Int
  score             Float
  created_at        DateTime @default(now()) @db.Timestamp(0)
  user              users    @relation("UserRecommendations", fields: [userId], references: [id], onDelete: Cascade)
  recommendedUser   users    @relation("RecommendedUsers", fields: [recommendedUserId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([recommendedUserId])
}

model notifications {
  id          Int              @id @default(autoincrement())
  receiver_id Int
  sender_id   Int?
  type        NotificationType
  entity_id   Int?
  is_read     Boolean          @default(false)
  created_at  DateTime         @default(now()) @db.Timestamp(0)
  is_hidden   Boolean          @default(false)

  receiver users  @relation("ReceiverNotifications", fields: [receiver_id], references: [id], onDelete: Cascade)
  sender   users? @relation("SenderNotifications", fields: [sender_id], references: [id], onDelete: SetNull)

  @@index([receiver_id])
  @@index([sender_id])
  @@index([type])
  @@index([entity_id])
  @@index([created_at]) // Thêm index cho orderBy
}

enum NotificationType {
  NEW_MATCH
  NEW_MESSAGE
  REPORT_RECEIVED
  PROFILE_VIEW
  LIKED
}

enum user_gender {
  male
  female
  other
}

enum users_preferred_gender {
  male
  female
  both
}

enum Bio_status {
  active
  inactive
}

enum users_status {
  online
  offline
  busy
}
